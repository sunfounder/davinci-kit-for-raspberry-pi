.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, d'Arduino et d'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et tirages au sort** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

1.1.5 Afficheur 7 segments √† 4 chiffres
===========================================

Introduction
-----------------

Passons maintenant √† la commande de l'afficheur 7 segments √† 4 chiffres.

Composants
---------------

.. image:: img/list_4_digit.png


Principe de fonctionnement
-----------------------------

**Afficheur 7 segments √† 4 chiffres**

L'afficheur 7 segments √† 4 chiffres est constitu√© de quatre afficheurs 7 segments fonctionnant ensemble.

.. image:: img/4-digit-sche.png

Chaque segment de l'afficheur 7 segments √† 4 chiffres fonctionne ind√©pendamment. 
Il utilise le principe de la persistance r√©tinienne pour afficher rapidement les 
caract√®res de chaque segment en boucle, formant ainsi une cha√Æne continue.

Par exemple, lorsque "1234" est affich√©, "1" est visible sur le premier segment, 
mais "234" ne l'est pas. Apr√®s un court instant, le deuxi√®me segment affiche "2" 
tandis que les 1er, 3e et 4e segments ne montrent rien, et ainsi de suite, les quatre 
chiffres d√©filent tour √† tour. Ce processus est tr√®s rapide (environ 5 ms), et 
gr√¢ce √† l'effet de r√©manence optique et de persistance visuelle, nous percevons 
les quatre caract√®res simultan√©ment.

.. image:: img/image78.png


**Codes d'affichage**

Pour vous aider √† comprendre comment les afficheurs 7 segments (Anode commune) 
affichent les chiffres, nous avons dress√© le tableau suivant. Les chiffres 
correspondent aux num√©ros 0-F affich√©s sur l'afficheur 7 segments ; (DP) GFEDCBA 
indique les segments LED allum√©s ou √©teints. Par exemple, 11000000 signifie que DP 
et G sont activ√©s, tandis que les autres sont d√©sactiv√©s. Le chiffre 0 est donc affich√©, 
et le code HEX correspond √† son √©quivalent en hexad√©cimal.

.. image:: img/common_anode.png


Sch√©ma de c√¢blage
--------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
============ ======== ======== ===

.. image:: img/schmatic_4_digit.png


Proc√©dures exp√©rimentales
-----------------------------------

**√âtape 1** : Construisez le circuit.

.. image:: img/image80.png
    :width: 800

**√âtape 2** : Acc√©dez au dossier contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.1.5/

**√âtape 3** : Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.1.5_4-Digit.c -lwiringPi

**√âtape 4** : Ex√©cutez le fichier compil√©.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, le programme commence un comptage qui augmente de 1 chaque seconde, et l'afficheur 7 segments √† 4 chiffres affiche le nombre correspondant.

.. note::

    Si cela ne fonctionne pas apr√®s ex√©cution, ou si un message d'erreur appara√Æt : "wiringPi.h: Aucun fichier ou r√©pertoire de ce type", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <wiringShift.h>
    #include <signal.h>
    #include <unistd.h>

    #define SDI 5
    #define RCLK 4
    #define SRCLK 1

    const int placePin[] = {12, 3, 2, 0};
    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

    int counter = 0;

    void pickDigit(int digit)
    {
        for (int i = 0; i < 4; i++)
        {
            digitalWrite(placePin[i], 0);
        }
        digitalWrite(placePin[digit], 1);
    }

    void hc595_shift(int8_t data)
    {
        int i;
        for (i = 0; i < 8; i++)
        {
            digitalWrite(SDI, 0x80 & (data << i));
            digitalWrite(SRCLK, 1);
            delayMicroseconds(1);
            digitalWrite(SRCLK, 0);
        }
        digitalWrite(RCLK, 1);
        delayMicroseconds(1);
        digitalWrite(RCLK, 0);
    }

    void clearDisplay()
    {
        int i;
        for (i = 0; i < 8; i++)
        {
            digitalWrite(SDI, 1);
            digitalWrite(SRCLK, 1);
            delayMicroseconds(1);
            digitalWrite(SRCLK, 0);
        }
        digitalWrite(RCLK, 1);
        delayMicroseconds(1);
        digitalWrite(RCLK, 0);
    }

    void loop()
    {
        while(1){
        clearDisplay();
        pickDigit(0);
        hc595_shift(number[counter % 10]);

        clearDisplay();
        pickDigit(1);
        hc595_shift(number[counter % 100 / 10]);

        clearDisplay();
        pickDigit(2);
        hc595_shift(number[counter % 1000 / 100]);
    
        clearDisplay();
        pickDigit(3);
        hc595_shift(number[counter % 10000 / 1000]);
        }
    }

    void timer(int timer1)
    { 
        if (timer1 == SIGALRM)
        { 
            counter++;
            alarm(1); 
            printf("%d\n", counter);
        }
    }

    void main(void)
    {
        if (wiringPiSetup() == -1)
        { 
            printf("setup wiringPi failed !");
            return;
        }
        pinMode(SDI, OUTPUT); 
        pinMode(RCLK, OUTPUT);
        pinMode(SRCLK, OUTPUT);
        
        for (int i = 0; i < 4; i++)
        {
            pinMode(placePin[i], OUTPUT);
            digitalWrite(placePin[i], HIGH);
        }
        signal(SIGALRM, timer); 
        alarm(1);               
        loop(); 
    }


**Explication du Code**

.. code-block:: c

    const int placePin[] = {12, 3, 2, 0};

Ces quatre broches contr√¥lent les anodes communes des affichages √† 7 segments √† quatre chiffres.

.. code-block:: c

    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

Un tableau de codes de segments en hexad√©cimal (Anode commune) pour les chiffres de 0 √† 9.

.. code-block:: c

    void pickDigit(int digit)
    {
        for (int i = 0; i < 4; i++)
        {
            digitalWrite(placePin[i], 0);
        }
        digitalWrite(placePin[digit], 1);
    }

S√©lectionne l'emplacement du chiffre. Il ne doit y avoir qu'un seul emplacement activ√© √† chaque fois. L'emplacement activ√© sera mis √† l'√©tat haut.

.. code-block:: c

    void loop()
    {
        while(1){
        clearDisplay();
        pickDigit(0);
        hc595_shift(number[counter % 10]);

        clearDisplay();
        pickDigit(1);
        hc595_shift(number[counter % 100 / 10]);

        clearDisplay();
        pickDigit(2);
        hc595_shift(number[counter % 1000 / 100]);
    
        clearDisplay();
        pickDigit(3);
        hc595_shift(number[counter % 10000 / 1000]);
        }
    }

La fonction sert √† d√©finir le chiffre affich√© sur l'affichage √† 7 segments √† quatre chiffres.

* ``clearDisplay()`` : √âcrit 11111111 pour √©teindre les huit LED de l'afficheur √† 7 segments afin de supprimer le contenu affich√©.
* ``pickDigit(0)`` : S√©lectionne le quatri√®me afficheur 7 segments.
* ``hc595_shift(number[counter%10])`` : Le chiffre des unit√©s du compteur s'affiche sur le quatri√®me segment.

.. code-block:: c

    signal(SIGALRM, timer); 

C'est une fonction syst√®me fournie. Le prototype du code est :

.. code-block:: c

    sig_t signal(int signum,sig_t handler);

Apr√®s l'ex√©cution de ``signal()``, une fois que le processus re√ßoit le signal correspondant (dans ce cas SIGALRM), il interrompt imm√©diatement la t√¢che en cours et ex√©cute la fonction d√©finie (ici, ``timer(sig)``).

.. code-block:: c

    alarm(1);

C'est √©galement une fonction syst√®me fournie. Le prototype du code est :

.. code-block:: c

    unsigned int alarm (unsigned int seconds);

Elle g√©n√®re un signal SIGALRM apr√®s un certain nombre de secondes.

.. code-block:: c

    void timer(int timer1)
    { 
        if (timer1 == SIGALRM)
        { 
            counter++;
            alarm(1); 
            printf("%d\n", counter);
        }
    }

Nous utilisons les fonctions ci-dessus pour impl√©menter la fonction de minuterie.
Apr√®s que ``alarm()`` a g√©n√©r√© le signal SIGALRM, la fonction ``timer()`` est appel√©e. Elle ajoute 1 au compteur et la fonction ``alarm(1)`` sera de nouveau appel√©e toutes les secondes de mani√®re r√©p√©t√©e.

