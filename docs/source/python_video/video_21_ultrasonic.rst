.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et √† des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions sp√©ciales lors des p√©riodes de f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !


Vid√©o 21 : Utilisation d'un capteur ultrasonique HC-SR04 pour l'√©cholocalisation
=======================================================================================

Ce tutoriel explique comment cr√©er un capteur de distance √† ultrasons avec un Raspberry 
Pi en utilisant le capteur HC-SR04. La vid√©o pr√©sente les principes de l'√©cholocalisation, 
introduit les composants n√©cessaires, montre la configuration du c√¢blage et d√©taille √©tape 
par √©tape le processus de codage. L'accent est mis sur l'importance d'une synchronisation 
pr√©cise dans l'ex√©cution du code pour obtenir des mesures de distance pr√©cises et sur 
l'application de bonnes pratiques d'ing√©nierie.

1. **Introduction √† l'√©cholocalisation** : Utilisation du son pour d√©tecter la position des objets, inspir√©e par les chauves-souris et les baleines.
2. **Pr√©sentation des composants** : Introduction au capteur ultrasonique HC-SR04 et connexion au Raspberry Pi.
3. **Configuration du c√¢blage** : Connexion du capteur HC-SR04 aux broches GPIO du Raspberry Pi pour l'alimentation, la masse, le d√©clenchement et l'√©cho.
4. **Processus de codage** : Explication du code Python pour g√©n√©rer des impulsions ultrasoniques, activer le capteur et mesurer le temps de retour de l'√©cho.
5. **Consid√©rations temporelles** : Importance d'une synchronisation pr√©cise pour mesurer la distance avec exactitude.
6. **Bonnes pratiques d'ing√©nierie** : Insistance sur la planification et la compr√©hension du code avant sa mise en ≈ìuvre.
7. **Attente du signal Echo** : Utilisation d'une boucle `while` pour attendre que la broche Echo passe √† l'√©tat haut.
8. **Enregistrement du temps de d√©part** : Capture de l'heure syst√®me lorsque la broche Echo passe √† l'√©tat haut pour marquer le d√©but de la mesure.
9. **Mesure du temps de trajet du ping** : Calcul du temps de trajet du ping en d√©terminant la diff√©rence de temps entre l'√©tat haut et bas de la broche Echo.
10. **Conversion des unit√©s** : Multiplication du temps de trajet du ping par un million pour une meilleure lisibilit√©.
11. **Ajout d'un d√©lai** : Introduction d'un d√©lai apr√®s chaque mesure pour √©viter les √©chos multiples.
12. **Calcul de la distance** : Utilisation de la vitesse du son et du temps de trajet du ping pour calculer la distance par rapport √† la cible.


**Vid√©o**

.. raw:: html

    <iframe width="700" height="500" src="https://www.youtube.com/embed/SoAGLXoQ5XI?si=OPMqLtQ53hKNHs4j" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>