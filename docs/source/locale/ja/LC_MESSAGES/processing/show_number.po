# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-04 15:50+0800\n"
"PO-Revision-Date: 2021-08-02 18:10+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../processing/show_number.rst:2
msgid "Show Number"
msgstr "Show Number（番号を表示）"

#: ../processing/show_number.rst:4
msgid ""
"In this lesson, we use processing to drive a 7-segment display to show a "
"figure from 0 to 9 and A to F."
msgstr "このレッスンでは、processingを使用して7セグメントディスプレイを駆動し、0から9およびAからFの数値を表示します。"

#: ../processing/show_number.rst:7
msgid "**Wiring**"
msgstr "**回路**"

#: ../processing/show_number.rst:12
msgid "**Sketch**"
msgstr "**スケッチ**"

#: ../processing/show_number.rst:70
msgid "**How it works?**"
msgstr "**原理**"

#: ../processing/show_number.rst:72
msgid ""
"Import ``processing.io.*`` and use the GPIO function library to control "
"the digital tube pins."
msgstr "``processing.io。*`` をインポートし、GPIO関数ライブラリを使用してdigital tube pinsを制御します。"

#: ../processing/show_number.rst:74
msgid ""
"Define array ``SegCode = "
"{0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71}``"
" which represents a segment code array from 0 to F in Hexadecimal (Common"
" cathode)."
msgstr ""
"配列を定義する ``SegCode = "
"{0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71}`` 16進数中で、0からFまでのセグメントコード配列を表す（共通カソード）"

#: ../processing/show_number.rst:77
msgid ""
"``setup()`` function sets the three pins SDI,RCLK and SRCLK as output, "
"and the initial data as 0."
msgstr "``setup()`` 関数は、3つのピンSDI、RCLK、SRCLKを出力として設定し、初期データを0として設定します。"

#: ../processing/show_number.rst:79
msgid ""
"``hc595_shift(int dat)`` function is used to shift the ``SegCode`` to "
"74HC595."
msgstr "``hc595_shift(int dat)`` 関数は、 ``SegCode`` を74HC595にシフトするために使用されます。"

#: ../processing/show_number.rst:103
msgid ""
"``n=(0x80 & (dat << i))`` means to shift dat to the left by ``i`` bits "
"and then do the ``&`` operation with 0x80."
msgstr ""
"``n=(0x80 & (dat << "
"i))`` は、datを ``i`` ビット左にシフトしてから、0x80と ``&`` 操作を実行することを意味します。"

#: ../processing/show_number.rst:105
msgid ""
"The rule of ``&`` operation is that when both sides of ``&`` are 1, the "
"result is 1, otherwise the result is 0."
msgstr "``&`` 演算のルールは、 ``&`` の両側が1の場合、結果は1であり、それ以外の場合、結果は0です。"

#: ../processing/show_number.rst:107
msgid ""
"For example, we assume dat=0x3f,i=2(0011 1111 << 2 shift to 1111 1100), "
"then 1111 1100 & 1000 0000 (0x80)) = 1000 0000."
msgstr ""
"たとえば、dat=0x3f,i=2(0011 1111 << 2 shift to 1111 1100), then 1111 1100 & "
"1000 0000 (0x80)) = 1000 0000."

#: ../processing/show_number.rst:109
msgid "At last assign the dat data to SDI(DS) by bits."
msgstr "最後に、datデータをビット単位でSDI（DS）に割り当てます。"

#: ../processing/show_number.rst:111
msgid ""
"``digitalWrite(SRCLK, 1)`` when SRCLK generates a rising edge pulse from "
"0 to 1, the data will be transferred from the DS register to the shift "
"register;"
msgstr ""
"``digitalWrite(SRCLK, "
"1)`` SRCLKが0から1までの立ち上がりエッジパルスを生成すると、データはDSレジスタからシフトレジスタに転送されます。"

#: ../processing/show_number.rst:113
msgid ""
"``digitalWrite(RCLK, 1)`` when RCLK generates a rising edge pulse from 0 "
"to 1, the data will be transferred from the shift register to the storage"
" register."
msgstr ""
"``digitalWrite(RCLK, 1)`` "
"RCLKが0から1までの立ち上がりエッジパルスを生成すると、データはシフトレジスタからストレージレジスタに転送されます。"

#: ../processing/show_number.rst:121
msgid "``fill()``: Sets the color used to fill shapes."
msgstr "``fill()``：図形の塗りつぶしに使用する色を設定します。"

#: ../processing/show_number.rst:122
msgid ""
"``textAlign(CENTER,CENTER)``: Sets the current alignment for drawing "
"text. The parameters ``LEFT``, ``CENTER``, and ``RIGHT`` set the display "
"characteristics of the letters in relation to the values for the x and y "
"parameters of the ``text()`` function."
msgstr ""
"``textAlign(CENTER,CENTER)``：テキストを描画するための現在の配置を設定します。 パラメータ "
"``LEFT``、``CENTER``、および ``RIGHT`` は、 "
"``text()`` 関数のxおよびyパラメータの値に関連して文字の表示特性を設定します。"

#: ../processing/show_number.rst:123
msgid ""
"``textSize()``: Sets the current font size. This size will be used in all"
" subsequent calls to the ``text()`` function. Font size is measured in "
"units of pixels."
msgstr ""
"``textSize()``：現在のフォントサイズを設定します。 このサイズは、以降の ``text()`` 関数のすべての呼び出しで使用されます。 "
"フォントサイズはピクセル単位で測定されます。"

#: ../processing/show_number.rst:125
msgid "These functions can customize the text style displayed on the processing."
msgstr "これらの関数は、processingで表示されるテキストスタイルをカスタマイズできます。"

#: ../processing/show_number.rst:137
msgid ""
"The ``frameCount`` is a seed, which is related to ``frameRate``. By "
"default ``frameRate`` is 60, which means that ``frameCount`` will "
"accumulate 60 times per second."
msgstr ""
"``frameCount`` はシードであり、``frameRate`` に関連しています。 "
"デフォルトでは、``frameRate`` は60です。これは、 ``frameCount`` が1秒間に60回累積することを意味します。"

#: ../processing/show_number.rst:140
msgid ""
"Then we can let processing and 7-segment display to show the figure from "
"0 to 9 and A to F simultaneously."
msgstr "次に、processingと7セグメントディスプレイを使用して、0から9までの数字とAからFまでの数字を同時に表示できます。"

#: ../processing/show_number.rst:142
msgid ""
"For more please refer to `Processing Reference "
"<https://processing.org/reference/>`_."
msgstr ""
"詳細については、`Processing Reference "
"<https://processing.org/reference/>`_ を参照してください。"

