.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Profundiza en Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y Compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Accede anticipadamente a anuncios de nuevos productos y avances.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones navide√±as.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy!

1.3.2 Servo
==============

Introducci√≥n
----------------

En esta lecci√≥n, aprenderemos a hacer girar un servo.

Componentes
-------------

.. image:: img/list_1.3.2.png

Principio
-----------

**Servo**

Un servo est√° compuesto generalmente por las siguientes partes: carcasa, eje, 
sistema de engranajes, potenci√≥metro, motor de CC y placa embebida.

.. image:: img/image121.png

Funciona de la siguiente manera: el microcontrolador env√≠a se√±ales PWM al servo, 
y la placa embebida en el servo recibe las se√±ales a trav√©s del pin de se√±al y 
controla el motor interno para girar. Como resultado, el motor acciona el sistema 
de engranajes y luego motiva el eje despu√©s de la desaceleraci√≥n. El eje y el 
potenci√≥metro del servo est√°n conectados entre s√≠. Cuando el eje gira, acciona 
el potenci√≥metro, que a su vez emite una se√±al de voltaje a la placa embebida. 
Luego, la placa determina la direcci√≥n y velocidad de rotaci√≥n en funci√≥n de la 
posici√≥n actual, permitiendo que el servo se detenga exactamente en la posici√≥n 
definida y se mantenga ah√≠.

.. image:: img/image122.png

El √°ngulo se determina por la duraci√≥n de un pulso que se aplica al cable de 
control. Esto se llama Modulaci√≥n por Ancho de Pulso (PWM). El servo espera 
recibir un pulso cada 20 ms. La longitud del pulso determinar√° cu√°nto gira el 
motor. Por ejemplo, un pulso de 1.5 ms har√° que el motor gire a la posici√≥n de 
90 grados (posici√≥n neutral).

Cuando se env√≠a un pulso a un servo que es menor de 1.5 ms, el servo gira a una 
posici√≥n y mantiene su eje de salida a algunos grados en sentido antihorario 
desde el punto neutral. Cuando el pulso es mayor de 1.5 ms, ocurre lo contrario. 
El ancho m√≠nimo y m√°ximo del pulso que ordenar√° al servo girar a una posici√≥n 
v√°lida son funciones de cada servo. Generalmente, el pulso m√≠nimo ser√° de 
aproximadamente 0.5 ms de ancho y el pulso m√°ximo ser√° de 2.5 ms de ancho.

.. image:: img/image123.jpeg

Diagrama Esquem√°tico
------------------------

.. image:: ../img/image337.png


Procedimientos Experimentales
-------------------------------

**Paso 1:** Construir el circuito.

.. image:: ../img/image125.png

**Paso 2**: Acceder a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.3.2

**Paso 3**: Compilar.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.2_Servo.c -lwiringPi

**Paso 4**: Ejecutar el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Al ejecutar el programa, el servo girar√° de 0 grados a 180 grados, y luego 
de 180 grados a 0 grados, de manera circular.

.. note::

    Si no funciona despu√©s de ejecutarlo, o aparece un mensaje de error: \"wiringPi.h: No such file or directory\", consulta :ref:`C code is not working?`.

**C√≥digo**

.. code-block:: c

    #include <wiringPi.h>
    #include <softPwm.h>
    #include <stdio.h>

    #define ServoPin    1       //define el servo en GPIO1
    long Map(long value,long fromLow,long fromHigh,long toLow,long toHigh){
        return (toHigh-toLow)*(value-fromLow) / (fromHigh-fromLow) + toLow;
    }
    void setAngle(int pin, int angle){    //Crea una funci√≥n para controlar el √°ngulo del servo.
        if(angle < 0)
            angle = 0;
        if(angle > 180)
            angle = 180;
        softPwmWrite(pin,Map(angle, 0, 180, 5, 25));   
    } 

    int main(void)
    {
        int i;
        if(wiringPiSetup() == -1){ //si la inicializaci√≥n de wiring falla, imprime un mensaje en pantalla
            printf("setup wiringPi failed !");
            return 1; 
        }
        softPwmCreate(ServoPin, 0, 200);       //inicializa el pin PMW del servo
        while(1){
            for(i=0;i<181;i++){     // Permite que el servo gire de 0 a 180.            	setAngle(ServoPin,i);
                delay(2);
            }
            delay(1000);
            for(i=181;i>-1;i--){        // Permite que el servo gire de 180 a 0.            	setAngle(ServoPin,i);
                delay(2);
            }
            delay(1000);
        }
        return 0;
    }

**Explicaci√≥n del C√≥digo**

.. code-block:: c

    long Map(long value,long fromLow,long fromHigh,long toLow,long toHigh){
        return (toHigh-toLow)*(value-fromLow) / (fromHigh-fromLow) + toLow;
    }

Crea una funci√≥n Map() para mapear valores en el siguiente c√≥digo.

.. code-block:: c

    void setAngle(int pin, int angle){    //Crea una funci√≥n para controlar el √°ngulo del servo.
        if(angle < 0)
            angle = 0;
        if(angle > 180)
            angle = 180;
        softPwmWrite(pin,Map(angle, 0, 180, 5, 25));   
    } 

Crea una funci√≥n, setAngle(), para escribir el √°ngulo en el servo.

.. code-block:: c

    softPwmWrite(pin,Map(angle,0,180,5,25));  

Esta funci√≥n puede cambiar el ciclo de trabajo del PWM.

Para hacer que el servo gire de 0 a 180 ¬∞, el ancho del pulso debe cambiar
dentro del rango de 0.5 ms a 2.5 ms cuando el per√≠odo es de 20 ms; en la
funci√≥n softPwmCreate(), hemos establecido que el per√≠odo es
200x100us=20ms, por lo que necesitamos mapear de 0 a 180 a 5x100us a 25x100us.

El prototipo de esta funci√≥n se muestra a continuaci√≥n.

.. code-block:: 

    int softPwmCreateÔºàint pinÔºåint initialValueÔºåint pwmRangeÔºâ;


**Par√°metro pin:** Cualquier pin GPIO de Raspberry Pi puede configurarse como pin PWM.

**Par√°metro initialValue:** El ancho del pulso inicial es el valor inicial
multiplicado por 100us.

**Par√°metro pwmRange:** el per√≠odo del PWM es el rango PWM multiplicado por 100us.

