# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-19 18:22+0800\n"
"PO-Revision-Date: 2021-05-31 20:55+0800\n"
"Last-Translator: \n"
"Language: de\n"
"Language-Team: \n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../1.1.2_rgb_led.rst:2
msgid "1.1.2 RGB LED"
msgstr "1.1.2 RGB-LED"

#: ../1.1.2_rgb_led.rst:5
msgid "Introduction"
msgstr "Einführung"

#: ../1.1.2_rgb_led.rst:7
msgid ""
"In this lesson, we will use it to control an RGB LED to flash various "
"kinds of colors."
msgstr ""
"In dieser Lektion steuern wir mit eine RGB-LED, die verschiedene Arten "
"von Farben zu blinken."

#: ../1.1.2_rgb_led.rst:11
msgid "Components"
msgstr "Komponenten"

#: ../1.1.2_rgb_led.rst:17
msgid "Principle"
msgstr "Prinzip"

#: ../1.1.2_rgb_led.rst:19
msgid "**PWM**"
msgstr "**PWM**"

#: ../1.1.2_rgb_led.rst:21
msgid ""
"Pulse Width Modulation, or PWM, is a technique for getting analog results"
" with digital means. Digital control is used to create a square wave, a "
"signal switched between on and off. This on-off pattern can simulate "
"voltages in between full on (5 Volts) and off (0 Volts) by changing the "
"portion of the time the signal spends on versus the time that the signal "
"spends off. The duration of \\\"on time\\\" is called pulse width. To get"
" varying analog values, you change, or modulate, that width. If you "
"repeat this on-off pattern fast enough with some device, an LED for "
"example, the result would be like this: the signal is a steady voltage "
"between 0 and 5v controlling the brightness of the LED."
msgstr ""
"Die Pulsweitenmodulation oder PWM ist eine Technik, mit der analoge "
"Ergebnisse mit digitalen Mitteln erzielt werden können. Die digitale "
"Steuerung wird verwendet, um eine Rechteckwelle zu erzeugen, um ein "
"Signal zwischen Ein und Aus zu schalten. Dieses Ein-Aus-Muster kann "
"Spannungen zwischen Voll-Ein (5 Volt) und Aus (0 Volt) simulieren, mit "
"der Änderung von Zeit, in dem das Signal an ist, gegenüber der Zeit, in "
"der das Signal abläuft. Die Dauer der \"Einschaltzeit\" wird als "
"Impulsbreite bezeichnet. Um unterschiedliche analoge Werte zu erhalten, "
"ändern oder modulieren Sie diese Breite. Wenn Sie dieses Ein-Aus-Muster "
"mit einem Gerät, beispielsweise einer LED, schnell genug wiederholen, "
"sieht das Ergebnis folgendermaßen aus: Das Signal ist eine konstante "
"Spannung zwischen 0 und 5 V, die die Helligkeit der LED steuert."

#: ../1.1.2_rgb_led.rst:32
msgid "**Duty Cycle**"
msgstr "**Arbeitszyklus**"

#: ../1.1.2_rgb_led.rst:34
msgid ""
"A duty cycle is the percentage of one period in which a signal is active."
" A period is the time it takes for a signal to complete an on-and-off "
"cycle. As a formula, a duty cycle may be expressed as:"
msgstr ""
"Ein Arbeitszyklus ist der Prozentsatz einer Periode, in der ein Signal "
"aktiv ist. Eine Periode ist die Zeit, die ein Signal benötigt, um einen "
"Ein- und Ausschaltzyklus abzuschließen. Als Formel kann ein Arbeitszyklus"
" ausgedrückt werden als:"

#: ../1.1.2_rgb_led.rst:43
msgid ""
"Where **D** is the duty cycle, **T** is the time the signal is active, "
"and **P** is the total period of the signal. Thus, a 60% duty cycle means"
" the signal is on 60% of the time but off 40% of the time. The \\\"on "
"time\\\" for a 60% duty cycle could be a fraction of a second, a day, or "
"even a week, depending on the length of the period."
msgstr ""
"Wobei **D** das Tastverhältnis ist, **T** die Zeit ist, zu der das Signal"
" aktiv ist, und **P** die Gesamtperiode des Signals ist. Ein "
"Tastverhältnis von 60% bedeutet also, dass das Signal in 60% der Fälle "
"eingeschaltet ist, in 40% der Fälle jedoch ausgeschaltet ist. Die  "
"\"Pünktlichkeit\" für einen Arbeitszyklus von 60% kann je nach Dauer des "
"Zeitraums einen Bruchteil einer Sekunde, eines Tages oder sogar einer "
"Woche betragen."

#: ../1.1.2_rgb_led.rst:54
msgid "**RGB LED**"
msgstr "**RGB LED**"

#: ../1.1.2_rgb_led.rst:60
msgid ""
"The three primary colors of the RGB LED can be mixed into various colors "
"by brightness. The brightness of LED can be adjusted with PWM. Raspberry "
"Pi has only one channel for hardware PWM output, but it needs three "
"channels to control the RGB LED, which means it is difficult to control "
"the RGB LED with the hardware PWM of Raspberry Pi. Fortunately, the "
"softPwm library simulates PWM (softPwm) by programming. You only need to "
"include the header file softPwm.h (for C language users), and then call "
"the API it provides to easily control the RGB LED by multi-channel PWM "
"output, so as to display all kinds of color."
msgstr ""
"Die drei Primärfarben der RGB-LED können durch Helligkeit in verschiedene"
" Farben gemischt werden. Die Helligkeit der LED kann mit PWM eingestellt "
"werden. Raspberry Pi hat nur einen Kanal für die Hardware-PWM-Ausgabe, "
"benötigt jedoch drei Kanäle zur Steuerung der RGB-LED, was bedeutet, dass"
" es schwierig ist, die RGB-LED mit der Hardware-PWM von Raspberry Pi zu "
"steuern. Glücklicherweise simuliert die softPwm-Bibliothek PWM (softPwm) "
"durch Programmierung. Alles, was Sie tun müssen, ist die Titeldatei "
"SoftPwm.h (C-Sprachbenutzer) und rufen Sie die API, die es bietet für die"
" einfache Steuerung der RGB-LED durch die Mehrkanal-PWM-Ausgabe, um eine "
"Vielzahl von Farben anzuzeigen."

#: ../1.1.2_rgb_led.rst:71
msgid "Schematic Diagram"
msgstr "Schematische Darstellung"

#: ../1.1.2_rgb_led.rst:73
msgid ""
"After connecting the pins of R, G, and B to a current limiting resistor, "
"connect them to the GPIO17, GPIO18, and GPIO27 respectively. The longest "
"pin (GND) of the LED connects to the GND of the Raspberry Pi. When the "
"three pins are given different PWM values, the RGB LED will display "
"different colors."
msgstr ""
"Nachdem Sie die Pins von R, G und B mit einem Strombegrenzungswiderstand "
"verbunden haben, verbinden Sie sie mit dem GPIO17, GPIO18 bzw. GPIO27. "
"Der längste Pin (GND) der LED ist mit dem GND des Raspberry Pi verbunden."
" Wenn die drei Pins unterschiedliche PWM-Werte erhalten, zeigt die RGB-"
"LED unterschiedliche Farben an."

#: ../1.1.2_rgb_led.rst:80
msgid "T-Board Name"
msgstr "T-Karte Name"

#: ../1.1.2_rgb_led.rst:80
msgid "physical"
msgstr "physisch"

#: ../1.1.2_rgb_led.rst:80
msgid "wiringPi"
msgstr "wiringPi"

#: ../1.1.2_rgb_led.rst:80
msgid "BCM"
msgstr "BCM"

#: ../1.1.2_rgb_led.rst:81
msgid "GPIO17"
msgstr "GPIO17"

#: ../1.1.2_rgb_led.rst:81
msgid "Pin 11"
msgstr "Pin 11"

#: ../1.1.2_rgb_led.rst:81
msgid "0"
msgstr "0"

#: ../1.1.2_rgb_led.rst:81
msgid "17"
msgstr "17"

#: ../1.1.2_rgb_led.rst:82
msgid "GPIO18"
msgstr "GPIO18"

#: ../1.1.2_rgb_led.rst:82
msgid "Pin 12"
msgstr "Pin 12"

#: ../1.1.2_rgb_led.rst:82
msgid "1"
msgstr "1"

#: ../1.1.2_rgb_led.rst:82
msgid "18"
msgstr "18"

#: ../1.1.2_rgb_led.rst:83
msgid "GPIO27"
msgstr "GPIO27"

#: ../1.1.2_rgb_led.rst:83
msgid "Pin 13"
msgstr "Pin 13"

#: ../1.1.2_rgb_led.rst:83
msgid "2"
msgstr "2"

#: ../1.1.2_rgb_led.rst:83
msgid "27"
msgstr "27"

#: ../1.1.2_rgb_led.rst:89
msgid "Experimental Procedures"
msgstr "Experimentelle Verfahren"

#: ../1.1.2_rgb_led.rst:91
msgid "**Step 1:** Build the circuit."
msgstr "**Schritt 1:** Bauen Sie die Schaltung auf."

#: ../1.1.2_rgb_led.rst:98
msgid "For C Language Users"
msgstr "Für Benutzer in C-Sprache"

#: ../1.1.2_rgb_led.rst:100
msgid "**Step 2:** Go to the folder of the code."
msgstr "**Schritt 2:** Gehen Sie zum Ordner der Kode."

#: ../1.1.2_rgb_led.rst:110
msgid "**Step 3:** Compile the code."
msgstr "**Schritt 3:** Kompilieren Sie die Kode."

#: ../1.1.2_rgb_led.rst:122
 
msgid ""
"When the instruction \\\"gcc\\\" is executed, if \\\"-o\\\" is not "
"called, then the executable file is named \\\"a.out\\\"."
msgstr ""
"Wenn die Anweisung \"gcc\" ausgeführt wird und \"-o\" nicht aufgerufen "
"wird, wird ausführbare Datei \"a.out\" benannt."

#: ../1.1.2_rgb_led.rst:124
msgid "**Step 4:** Run the executable file."
msgstr "**Schritt 4:** Führen Sie die ausführbare Datei aus."

#: ../1.1.2_rgb_led.rst:135 ../1.1.2_rgb_led.rst:281
msgid ""
"After the code runs, you will see that RGB displays red, green, blue, "
"yellow, pink, and cyan."
msgstr ""
"Nachdem die Kode ausgeführt wurde, sehen Sie, dass RGB Rot, Grün, Blau, "
"Gelb, Pink und Cyan anzeigt."

#: ../1.1.2_rgb_led.rst:140
msgid ""
"If it does not work after running, please refer to :ref:`C code is not "
"working?`"
msgstr ""
"Wenn es nach dem Ausführen nicht funktioniert, lesen Sie bitte :ref:`C "
"code is not working?`"

#: ../1.1.2_rgb_led.rst:142 ../1.1.2_rgb_led.rst:284
msgid "**Code**"
msgstr "**Code**"

#: ../1.1.2_rgb_led.rst:197 ../1.1.2_rgb_led.rst:377
msgid "**Code Explanation**"
msgstr "**Code Erklärung**"

#: ../1.1.2_rgb_led.rst:203
msgid "Library used for realizing the pwm function of the software."
msgstr "Bibliothek zur Realisierung der PWM-Funktion der Software."

#: ../1.1.2_rgb_led.rst:213
msgid ""
"The function is to use software to create a PWM pin, set its period "
"between 0x100us-100x100us."
msgstr ""
"Die Funktion besteht darin, mit Software einen PWM-Pin zu erstellen und "
"dessen Periode zwischen 0x100us und 100x100us einzustellen."

#: ../1.1.2_rgb_led.rst:216
msgid ""
"The prototype of the function softPwmCreate(LedPinRed, 0, 100) is as "
"follows:"
msgstr ""
"Der Prototyp der Funktion softPwmCreate (LedPinRed, 0, 100) lautet wie "
"folgt:"

#: ../1.1.2_rgb_led.rst:223 ../1.1.2_rgb_led.rst:246
msgid "**Parameter pin:** Any GPIO pin of Raspberry Pi can be set as a PWM pin."
msgstr ""
"**Parameter-Pin:** Jeder GPIO-Pin von Raspberry Pi kann als PWM-Pin "
"gesetzt werden."

#: ../1.1.2_rgb_led.rst:224
msgid ""
"**Parameter initialValue:** The initial pulse width is that initialValue "
"times100us."
msgstr ""
"**Parameter initialValue:** Die anfängliche Impulsbreite ist der "
"initialValue times100us."

#: ../1.1.2_rgb_led.rst:225
msgid "**Parameter pwmRange:** the period of PWM is that pwmRange times100us."
msgstr "**Parameter pwmRange:** Die Periode von PWM ist die pwmRange times100us."

#: ../1.1.2_rgb_led.rst:235
msgid ""
"This function is to set the colors of the LED. Using RGB, the formal "
"parameter **r_val** represents the luminance of the red one, **g_val** of"
" the green one, **b_val** of the blue one."
msgstr ""
"Diese Funktion dient zum Einstellen der Farben der LED. Bei Verwendung "
"von RGB repräsentiert der formale Parameter **r_val** die Luminanz des "
"roten, **g_val** des grünen, **b_val** des blauen."

#: ../1.1.2_rgb_led.rst:239
msgid ""
"The prototype of the function softPwmWrite(LedPinBlue, b_val) is as "
"follows："
msgstr ""
"Der Prototyp der Funktion softPwmWrite (LedPinBlue, b_val) lautet wie "
"folgt:"

#: ../1.1.2_rgb_led.rst:247
msgid ""
"**Parameter Value:** The pulse width of PWM is value times 100us. Note "
"that value can only be less than pwmRange defined previously, if it is "
"larger than pwmRange, the value will be given a fixed value, pwmRange."
msgstr ""
"**Parameterwert:** Die Pulsbreite von PWM ist Wert mal 100us. Beachten "
"Sie, dass der Wert nur kleiner als der zuvor definierte pwmRange sein "
"kann. Wenn er größer als pwmRange ist, erhält der Wert einen festen Wert,"
" pwmRange."

#: ../1.1.2_rgb_led.rst:253
msgid ""
"Call the function defined before. Write 0xff into LedPinRed and 0x00 into"
" LedPinGreen and LedPinBlue. Only the Red LED lights up after running "
"this code. If you want to light up LEDs in other colors, just modify the "
"parameters."
msgstr ""
"Rufen Sie die zuvor definierte Funktion auf. Schreiben Sie 0xff in "
"LedPinRed und 0x00 in LedPinGreen und LedPinBlue. Nach dem Ausführen der "
"Kode leuchtet nur die rote LED auf. Wenn Sie LEDs in anderen Farben "
"aufleuchten möchten, ändern Sie einfach die Parameter."

#: ../1.1.2_rgb_led.rst:259
msgid "For Python Language Users"
msgstr "Für Python-Sprachbenutzer"

#: ../1.1.2_rgb_led.rst:261
msgid "**Step 2:** Open the code file."
msgstr "**Schritt 2:** Öffnen Sie die Kodedatei."

#: ../1.1.2_rgb_led.rst:271
msgid "**Step 3:** Run."
msgstr "**Schritt 3:** Ausführen."

#: ../1.1.2_rgb_led.rst:288
 
msgid ""
"You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, "
"you need to go to  source code path like ``davinci-kit-for-raspberry-"
"pi/python``."
msgstr ""
"Sie können den folgenden Code **Ändern/Zurücksetzen/ "
"Kopieren/Ausführen/Stoppen**. Zuvor müssen Sie jedoch zu einem "
"Quellcodepfad wie ``davinci-kit-for-raspberry-pi/python`` gehen."

#: ../1.1.2_rgb_led.rst:389
msgid ""
"Call the GPIO.PWM( )function to define Red, Green and Blue as PWM pins "
"and set the frequency of PWM pins to 2000Hz, then Use the Start() "
"function to set the initial duty cycle to zero."
msgstr ""
"Rufen Sie die Funktion GPIO.PWM () auf, um Rot, Grün und Blau als PWM-"
"Pins zu definieren und die Frequenz der PWM-Pins auf 2000 Hz "
"einzustellen. Verwenden Sie dann die Funktion Start (), um den "
"anfänglichen Arbeitszyklus auf Null zu setzen."

#: ../1.1.2_rgb_led.rst:398
msgid ""
"Define a MAP function for mapping values. For instance, x=50, in_min=0, "
"in_max=255, out_min=0, out_max=100. After the map function mapping, it "
"returns (50-0) \\* (100-0)/(255-0) +0=19.6, meaning that 50 in 0-255 "
"equals 19.6 in 0-100."
msgstr ""
"Definieren Sie eine MAP-Funktion zum Zuordnen von Werten. Zum Beispiel "
"ist x = 50, in_min = 0, in_max = 255, out_min = 0, out_max = 100. Nach "
"der Zuordnung der Kartenfunktion wird (50-0) \\* (100-0)/(255-0) +0=19.6,"
" zurückgegeben, was bedeutet, dass 50 in 0-255 19,6 in 0-100 entspricht."

#: ../1.1.2_rgb_led.rst:410
msgid ""
"Configures the three LEDs’ luminance with the inputted color value, "
"assign the first two values of the hexadecimal to R_val, the middle two "
"assigned to G_val, the last two values to B_val. For instance, if "
"color=0xFF00FF, R_val=（0xFF00FF & 0xFF0000）>> 16 = 0xFF, G_val = 0x00, "
"B_val=0xFF."
msgstr ""
"Konfiguriert die Luminanz der drei LEDs mit dem eingegebenen Farbwert. "
"Weisen Sie R_val die ersten beiden Hexadezimalwerte zu, G_val die beiden "
"mittleren und B_val die letzten beiden Werte. Wenn beispielsweise color ="
" 0xFF00FF ist, ist R_val = 0xFF00FF & 0xFF0000 >> 16 = 0xFF, G_val = "
"0x00, B_val = 0xFF."

#: ../1.1.2_rgb_led.rst:422
msgid ""
"Use map function to map the R,G,B value among 0~255 into PWM duty cycle "
"range 0-100."
msgstr ""
"Verwenden Sie die Zuordnungsfunktion, um den R-, G-, B-Wert zwischen 0 "
"und 255 in den PWM-Arbeitszyklusbereich von 0 bis 100 abzubilden."

#: ../1.1.2_rgb_led.rst:431
msgid ""
"Assign the mapped duty cycle value to the corresponding PWM channel to "
"change the luminance."
msgstr ""
"Weisen Sie den zugeordneten Tastverhältniswert dem entsprechenden PWM-"
"Kanal zu, um die Luminanz zu ändern."

#: ../1.1.2_rgb_led.rst:440
msgid ""
"Assign every item in the COLOR list to the color respectively and change "
"the color of the RGB LED via the setColor() function."
msgstr ""
"Ordnen Sie jedes Element in der COLOR-Liste der jeweiligen Farbe zu und "
"ändern Sie die Farbe der RGB-LED über die Funktion setColor()."

#: ../1.1.2_rgb_led.rst:444
msgid "Phenomenon Picture"
msgstr "Phänomen Bild"

