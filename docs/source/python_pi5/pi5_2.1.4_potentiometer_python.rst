.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _2.1.4_py_pi5:


2.1.4 Potentiometer
========================

Einf√ºhrung
------------

Die ADC-Funktion kann verwendet werden, um analoge Signale in digitale
Signale umzuwandeln, und in diesem Experiment wird der ADC0834 verwendet, um die Funktion
mit ADC zu bekommen. Hier implementieren wir diesen Prozess mit einem Potentiometer.
Das Potentiometer √§ndert die physikalische Gr√∂√üe -- die Spannung, die durch die ADC-Funktion umgewandelt wird.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/2.1.7_potentiometer_list.png


Schaltplan
-----------------

.. image:: ../python_pi5/img/2.1.7_potentiometer_second_1.png


.. image:: ../python_pi5/img/2.1.7_potentiometer_second_2.png

Experimentelle Verfahren
----------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/2.1.7_Potentiometer_circuit.png


.. note::
    Bitte platzieren Sie den Chip, indem Sie sich auf die entsprechende Position
    im Bild beziehen. Beachten Sie, dass die Kerben am Chip links sein sollten, wenn er platziert wird.

**Schritt 2:** √ñffnen Sie die Code-Datei

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3:** Ausf√ºhren.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.4_Potentiometer_zero.py

Nachdem der Code ausgef√ºhrt wurde, drehen Sie den Knopf am Potentiometer, die Intensit√§t
der LED wird entsprechend √§ndern.

**Code**

.. note::

    Sie k√∂nnen den unten stehenden Code **Modifizieren/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen**. Aber bevor Sie das tun, m√ºssen Sie zum Quellcode-Pfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code ge√§ndert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um die Auswirkungen zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from gpiozero import PWMLED
   import ADC0834
   import time

   # Initialisieren Sie eine PWM-LED am GPIO-Pin 22
   led = PWMLED(22)

   # Richten Sie das ADC0834-Modul ein
   ADC0834.setup()

   def MAP(x, in_min, in_max, out_min, out_max):
       """
       Ordnen Sie einen Wert von einem Bereich in einen anderen zu.
       :param x: Der umzuordnende Wert.
       :param in_min: Die untere Grenze des aktuellen Bereichs des Werts.
       :param in_max: Die obere Grenze des aktuellen Bereichs des Werts.
       :param out_min: Die untere Grenze des Zielbereichs des Werts.
       :param out_max: Die obere Grenze des Zielbereichs des Werts.
       :return: Der umgeordnete Wert.
       """
       return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

   try:
       while True:
           # Holen Sie den aktuellen Messwert vom ADC0834-Modul
           res = ADC0834.getResult()
           print('res = %d' % res)

           # Ordnen Sie den ADC-Wert einem Bereich zu, der f√ºr die Einstellung der LED-Helligkeit geeignet ist
           R_val = MAP(res, 0, 255, 0, 100)

           # Stellen Sie die Helligkeit der LED ein
           led.value = float(R_val / 100)

           # Warten Sie 0,2 Sekunden, bevor Sie erneut messen
           time.sleep(0.2)

   # Eleganter Ausstieg, wenn 'Ctrl+C' gedr√ºckt wird
   except KeyboardInterrupt: 
       led.value = 0  # Schalten Sie die LED aus


**Code-Erkl√§rung**

#. ``gpiozero`` f√ºr die PWM-LED-Steuerung, ``ADC0834`` f√ºr die Analog-Digital-Umwandlung und ``time`` f√ºr Verz√∂gerungen.

   .. code-block:: python

       #!/usr/bin/env python3

       from gpiozero import PWMLED
       import ADC0834
       import time

#. Initialisieren Sie ein PWMLED-Objekt, das mit dem GPIO-Pin 22 verbunden ist, und richten Sie den ADC0834-Konverter ein.

   .. code-block:: python

       # Initialisieren Sie eine PWM-LED am GPIO-Pin 22
       led = PWMLED(22)

       # Richten Sie das ADC0834-Modul ein
       ADC0834.setup()

#. Definieren Sie eine Funktion mit dem Namen ``MAP``, um Werte von einem Bereich in einen anderen zu konvertieren, n√ºtzlich f√ºr die Zuordnung von ADC-Werten zu geeigneten LED-Helligkeitsstufen.

   .. code-block:: python

       def MAP(x, in_min, in_max, out_min, out_max):
           return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

#. Lesen Sie kontinuierlich den ADC-Wert in einer Schleife, ordnen Sie den ADC-Wert (0-255) einer Helligkeitsstufe (0-100) f√ºr die LED zu. Passen Sie die Helligkeit der LED entsprechend diesem umgeordneten Wert an. Implementieren Sie eine Verz√∂gerung von 0,2 Sekunden f√ºr eine bessere Lesbarkeit und Stabilit√§t.

   .. code-block:: python

       try:
           while True:
               # Holen Sie den aktuellen Messwert vom ADC0834-Modul
               res = ADC0834.getResult()
               print('res = %d' % res)

               # Ordnen Sie den ADC-Wert einem Bereich zu, der f√ºr die Einstellung der LED-Helligkeit geeignet ist
               R_val = MAP(res, 0, 255, 0, 100)

               # Stellen Sie die Helligkeit der LED ein
               led.value = float(R_val / 100)

               # Warten Sie 0,2 Sekunden, bevor Sie erneut messen
               time.sleep(0.2)

       # Eleganter Ausstieg, wenn 'Ctrl+C' gedr√ºckt wird
       except KeyboardInterrupt: 
           led.value = 0  # Schalten Sie die LED aus
