3.1.1 Counting Device
~~~~~~~~~~~~~~~~~~~~~

**Introduction**
-----------------

Here we will make a number-displaying counter system, consisting of a
PIR sensor and a 4-digit segment display. When the PIR detects that
someone is passing by, the number on the 4-digit segment display will
add 1. You can use this counter to count the number of people walking 
through the passageway.

**Components**
---------------

.. image:: media/list_Counting_Device1.png
    :align: center

.. image:: media/list_Counting_Device2.png
    :align: center

**Schematic Diagram**
----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: media/Schematic_three_one1.png
   :align: center

**Experimental Procedures**
-----------------------------

**Step 1**: Build the circuit.

.. image:: media/image235.png
   :alt: 计数器_bb
   :width: 6.69444in
   :height: 4.12708in

**For C Language Users**
^^^^^^^^^^^^^^^^^^^^^^^^^

**Step 2**: Go to the folder of the code.

.. code-block:: 

    cd /home/pi/davinci-kit-for-raspberry-pi/c/3.1.1/

**Step 3**: Compile the code.

.. code-block:: 

    gcc 3.1.1_CountingDevice.c -lwiringPi

**Step 4**: Run the executable file.

.. code-block:: 

    gcc 3.1.1_CountingDevice.c -lwiringPi

After the code runs, when the PIR detects that someone is passing by,
the number on the 4-digit segment display will add 1.

**Code Explanation**

.. code-block:: c

    void display()
    {
        clearDisplay();
        pickDigit(0);
        hc595_shift(number[counter % 10]);

        clearDisplay();
        pickDigit(1);
        hc595_shift(number[counter % 100 / 10]);

        clearDisplay();
        pickDigit(2);
        hc595_shift(number[counter % 1000 / 100]);
     
        clearDisplay();
        pickDigit(3);
        hc595_shift(number[counter % 10000 / 1000]);
    }

First, start the fourth segment display, write the single-digit number.
Then start the third segment display, and type in the tens digit; after
that, start the second and the first segment display respectively, and
write the hundreds and thousands digits respectively. Because the
refreshing speed is very fast, we see a complete four-digit display.

.. code-block:: c

    void loop(){
        int currentState =0;
        int lastState=0;
        while(1){
            display();
            currentState=digitalRead(sensorPin);
            if((currentState==0)&&(lastState==1)){
                counter +=1;
            }
            lastState=currentState;
        }
    }

This is the main function: display the number on the 4-digit segment
display and read the PIR value. When the PIR detects that someone is
passing by, the number on the 4-digit segment display will add 1.

**For Python Language Users**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Step 2**: Go to the folder of the code.

.. code-block::

    cd /home/pi/davinci-kit-for-raspberry-pi/python/

**Step 3**: Run the executable file.

.. code-block::

    sudo python3 3.1.1_CountingDevice.py

After the code runs, when the PIR detects that someone is passing by,
the number on the 4-digit segment display will add 1.

**Code Explanation**

Based on **1.1.5 4-Digit 7-Segment Display**, this lesson adds **PIR
module** to change the automatic counting of lesson 1.1.5 into count
detecting. When the PIR detects that someone is passing by, the number
on the 4-digit segment display will add 1.

.. code-block:: python

    def display():
        global counter                    
        clearDisplay() 
        pickDigit(0)  
        hc595_shift(number[counter % 10])

        clearDisplay()
        pickDigit(1)
        hc595_shift(number[counter % 100//10])

        clearDisplay()
        pickDigit(2)
        hc595_shift(number[counter % 1000//100])

        clearDisplay()
        pickDigit(3)
        hc595_shift(number[counter % 10000//1000])

First, start the fourth segment display, write the single-digit number.
Then start the third segment display, and type in the tens digit; after
that, start the second and the first segment display respectively, and
write the hundreds and thousands digits respectively. Because the
refreshing speed is very fast, we see a complete four-digit display.

.. code-block:: python

    def loop():
    global counter
        currentState = 0
        lastState = 0
        while True:
            display()
            currentState=GPIO.input(sensorPin)
            if (currentState == 0) and (lastState == 1):
                counter +=1
            lastState=currentState 

This is the main function: display the number on the 4-digit segment
display and read the PIR value. When the PIR detects that someone is
passing by, the number on the 4-digit segment display will add 1.

**Phenomenon Picture**
-------------------------

.. image:: media/image236.jpeg
   :alt: \_MG_3354
   :width: 5.31875in
   :height: 3.16528in
   :align: center
