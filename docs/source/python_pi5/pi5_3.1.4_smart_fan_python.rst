.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux annonces de nouveaux produits et d'aper√ßus en avant-premi√®re.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions et concours** : Participez √† des concours et profitez de promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pi5_fan:

3.1.4 Ventilateur intelligent
=============================

Introduction
---------------

Dans ce projet, nous utiliserons des moteurs, des boutons et des thermistances pour 
cr√©er un ventilateur intelligent manuel et automatique dont la vitesse est r√©glable.

Composants requis
---------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/4.1.10_smart_fan_list.png
    :width: 800
    :align: center

.. C'est certainement pratique d'acheter un kit complet. Voici le lien : 

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Nom
..         - COMPOSANTS DANS CE KIT
..         - LIEN
..     *   - Kit Raphael
..         - 337
..         - |link_Raphael_kit|

.. Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - INTRODUCTION DES COMPOSANTS
..         - LIEN D'ACHAT

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`power_module`
..         - \-
..     *   - :ref:`thermistor`
..         - |link_thermistor_buy|
..     *   - :ref:`l293d`
..         - \-
..     *   - :ref:`adc0834`
..         - \-
..     *   - :ref:`button`
..         - |link_button_buy|
..     *   - :ref:`motor`
..         - |link_motor_buy|


Sch√©ma de c√¢blage
---------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.10_smart_fan_schematic.png
   :align: center

Proc√©dure exp√©rimentale
---------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/4.1.10_smart_fan_circuit.png

.. note::
    Le module d'alimentation peut √™tre utilis√© avec une pile 9V et la connexion 
    pour pile 9V fournie dans le kit. Ins√©rez le cavalier du module d'alimentation 
    dans les bandes de bus 5V de la plaque d'exp√©rimentation.

.. image:: ../python_pi5/img/4.1.10_smart_fan_battery.jpeg
   :align: center

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le programme.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 3.1.4_SmartFan.py

Lorsque le code est ex√©cut√©, d√©marrez le ventilateur en appuyant sur le bouton. 
Chaque appui ajuste la vitesse d'un cran vers le haut ou vers le bas. Il existe 
**5** niveaux de vitesse : **0~4**. Lorsque le ventilateur est r√©gl√© √† la 4\ :sup:`√®me` 
vitesse et que vous appuyez √† nouveau, le ventilateur s'arr√™te avec une vitesse de **0**.

D√®s que la temp√©rature augmente ou diminue de plus de 2¬∞C, la vitesse augmente ou diminue 
automatiquement d'un niveau.

Code
--------

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre dans le r√©pertoire source comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from gpiozero import Motor, Button
   from time import sleep
   import ADC0834
   import math

   # Initialisation des broches GPIO pour le bouton et le contr√¥le du moteur
   BtnPin = Button(22)
   motor = Motor(forward=5, backward=6, enable=13)

   # Initialisation du module ADC0834 pour la d√©tection de temp√©rature
   ADC0834.setup()

   # Initialisation des variables pour suivre le niveau de vitesse du moteur et les temp√©ratures
   level = 0
   currentTemp = 0
   markTemp = 0

   def temperature():
       """
       Reads and calculates the current temperature from the sensor.
       Returns:
           float: The current temperature in Celsius.
       """
       # Lire la valeur analogique depuis le module ADC0834
       analogVal = ADC0834.getResult()
       # Conversion de la valeur analogique en tension puis en r√©sistance
       Vr = 5 * float(analogVal) / 255
       Rt = 10000 * Vr / (5 - Vr)
       # Calcul de la temp√©rature en Celsius
       temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273,15 + 25)))
       Cel = temp - 273,15
       return Cel

   def motor_run(level):
       """
       Adjusts the motor speed based on the specified level.
       Args:
           level (int): Desired motor speed level.
       Returns:
           int: Adjusted motor speed level.
       """
       # Arr√™ter le moteur si le niveau est 0
       if level == 0:
           motor.stop()
           return 0
       # Limiter le niveau √† 4 pour la vitesse maximale
       if level >= 4:
           level = 4
       # D√©finir la vitesse du moteur
       motor.forward(speed=float(level / 4))
       return level

   def changeLevel():
       """
       Changes the motor speed level when the button is pressed and updates the reference temperature.
       """
       global level, currentTemp, markTemp
       print("Button pressed")
       # Passer √† travers les niveaux 0-4
       level = (level + 1) % 5
       # Mettre √† jour la temp√©rature de r√©f√©rence
       markTemp = currentTemp

   # Lier l'√©v√©nement de pression du bouton √† la fonction changeLevel
   BtnPin.when_pressed = changeLevel

   def main():
       """
       Main function to continuously monitor and respond to temperature changes.
       """
       global level, currentTemp, markTemp
       # D√©finir la temp√©rature de r√©f√©rence initiale
       markTemp = temperature()
       while True:
           # Lire en continu la temp√©rature actuelle
           currentTemp = temperature()
           # Ajuster le niveau du moteur en fonction de la diff√©rence de temp√©rature
           if level != 0:
               if currentTemp - markTemp <= -2:
                   level -= 1
                   markTemp = currentTemp
               elif currentTemp - markTemp >= 2:
                   if level < 4:
                       level += 1
                   markTemp = currentTemp
           # Faire tourner le moteur au niveau ajust√©
           level = motor_run(level)

   # Ex√©cuter la fonction principale et g√©rer l'interruption par clavier
   try:
       main()
   except KeyboardInterrupt:
       # Arr√™ter le moteur lorsque le script est interrompu
       motor.stop()



Explication du Code
----------------------

#. Importe les classes pour g√©rer un moteur et un bouton, ainsi que la fonction `sleep` pour introduire des pauses. Le script importe √©galement la biblioth√®que ADC0834 pour la d√©tection de temp√©rature et la biblioth√®que math√©matique `math` pour effectuer des calculs.

   .. code-block:: python

       #!/usr/bin/env python3

       from gpiozero import Motor, Button
       from time import sleep
       import ADC0834
       import math

#. Configure le bouton sur la broche GPIO 22 et initialise le moteur avec des broches GPIO sp√©cifiques pour le contr√¥le. Initialise le module ADC0834 pour la mesure de la temp√©rature. D√©finit √©galement des variables pour suivre le niveau de vitesse du moteur et les temp√©ratures.

   .. code-block:: python

       # Initialisation des broches GPIO pour le bouton et le contr√¥le du moteur
       BtnPin = Button(22)
       motor = Motor(forward=5, backward=6, enable=13)

       # Initialisation du module ADC0834 pour la d√©tection de temp√©rature
       ADC0834.setup()

       # Initialisation des variables pour suivre le niveau de vitesse du moteur et les temp√©ratures
       level = 0
       currentTemp = 0
       markTemp = 0

#. D√©finit une fonction pour lire et calculer la temp√©rature √† partir du capteur, en convertissant la valeur lue en degr√©s Celsius.

   .. code-block:: python

       def temperature():
           """
           Reads and calculates the current temperature from the sensor.
           Returns:
               float: The current temperature in Celsius.
           """
           # Lire la valeur analogique depuis le module ADC0834
           analogVal = ADC0834.getResult()
           # Convertir la valeur analogique en tension, puis en r√©sistance
           Vr = 5 * float(analogVal) / 255
           Rt = 10000 * Vr / (5 - Vr)
           # Calculer la temp√©rature en Celsius
           temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))
           Cel = temp - 273.15
           return Cel

#. Introduit une fonction pour ajuster la vitesse du moteur en fonction du niveau sp√©cifi√©.

   .. code-block:: python

       def motor_run(level):
           """
           Adjusts the motor speed based on the specified level.
           Args:
               level (int): Desired motor speed level.
           Returns:
               int: Adjusted motor speed level.
           """
           # Arr√™te le moteur si le niveau est 0
           if level == 0:
               motor.stop()
               return 0
           # Limite le niveau √† 4 pour la vitesse maximale
           if level >= 4:
               level = 4
           # D√©finit la vitesse du moteur
           motor.forward(speed=float(level / 4))
           return level

#. Impl√©mente une fonction pour changer le niveau de vitesse du moteur manuellement √† l'aide d'un bouton, et lie cette fonction √† l'√©v√©nement de pression du bouton.

   .. code-block:: python

       def changeLevel():
           """
           Changes the motor speed level when the button is pressed and updates the reference temperature.
           """
           global level, currentTemp, markTemp
           print("Button pressed")
           # Parcourt les niveaux 0-4
           level = (level + 1) % 5
           # Met √† jour la temp√©rature de r√©f√©rence
           markTemp = currentTemp

       # Lie l'√©v√©nement de pression du bouton √† la fonction changeLevel
       BtnPin.when_pressed = changeLevel

#. La fonction principale, con√ßue pour ajuster continuellement la vitesse du moteur en r√©ponse aux variations de temp√©rature, est impl√©ment√©e ici.

   .. code-block:: python

       def main():
           """
           Main function to continuously monitor and respond to temperature changes.
           """
           global level, currentTemp, markTemp
           # D√©finit la temp√©rature de r√©f√©rence initiale
           markTemp = temperature()
           while True:
               # Lit en continu la temp√©rature actuelle
               currentTemp = temperature()
               # Ajuste le niveau du moteur en fonction de la diff√©rence de temp√©rature
               if level != 0:
                   if currentTemp - markTemp <= -2:
                       level -= 1
                       markTemp = currentTemp
                   elif currentTemp - markTemp >= 2:
                       if level < 4:
                           level += 1
                       markTemp = currentTemp
               # Fait tourner le moteur au niveau ajust√©
               level = motor_run(level)

#. Ex√©cute la fonction principale et garantit que le moteur s'arr√™te si le script est interrompu.

   .. code-block:: python

       # Ex√©cute la fonction principale et g√®re l'interruption par clavier
       try:
           main()
       except KeyboardInterrupt:
           # Arr√™te le moteur lorsque le script est interrompu
           motor.stop()


