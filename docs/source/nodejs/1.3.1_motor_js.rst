.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l‚Äôunivers du Raspberry Pi, d‚ÄôArduino et de l‚ÄôESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d‚Äôexperts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques gr√¢ce √† l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre et Partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d‚Äôun acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

1.3.1 Moteur
=================

Introduction
---------------

Dans ce projet, nous allons apprendre √† utiliser le L293D pour piloter un moteur 
√† courant continu (DC) et le faire tourner dans le sens horaire et antihoraire. 
Comme le moteur DC n√©cessite un courant plus √©lev√©, nous utilisons ici le module 
d'alimentation pour alimenter les moteurs par mesure de s√©curit√©.

Composants
------------

.. image:: ../img/list_1.3.1.png


Sch√©ma de c√¢blage
--------------------

Branchez le module d'alimentation sur la plaque de montage (breadboard) et ins√©rez 
le cavalier (jumper) sur la broche 5V, de mani√®re √† obtenir une sortie de tension de 5V. 
Connectez la broche 1 de L293D √† GPIO22 et d√©finissez-la sur un niveau haut. Connectez 
la broche 2 √† GPIO27 et la broche 7 √† GPIO17, puis d√©finissez une broche sur un niveau 
haut et l'autre sur un niveau bas. Cela vous permet de changer le sens de rotation du moteur.

.. image:: ../img/image336.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image117.png


.. note::
    Le module d‚Äôalimentation peut √™tre connect√© √† une batterie 9V √† l‚Äôaide du 
    connecteur 9V fourni dans le kit. Ins√©rez le cavalier du module d‚Äôalimentation 
    dans la rang√©e 5V de la plaque de montage.

.. image:: ../img/image118.jpeg

**√âtape 2 :** Acc√©der au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 4 :** Ex√©cuter le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node motor.js

Lorsque le code s‚Äôex√©cute, le moteur commence par tourner dans le sens horaire 
pendant 1 seconde, puis s‚Äôarr√™te pendant 1 seconde. Ensuite, il tourne dans le 
sens antihoraire pendant 1 seconde, avant de s‚Äôarr√™ter √† nouveau pendant 1 seconde. 
Cette s√©rie d‚Äôactions se r√©p√©tera en boucle.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    MotorPin1 = new Gpio(17, { mode: Gpio.OUTPUT });
    MotorPin2 = new Gpio(27, { mode: Gpio.OUTPUT });
    MotorEnable = new Gpio(22, { mode: Gpio.OUTPUT });


    // D√©finir une fonction pour piloter le moteur
    // direction : 2 (horaire), 1 (antihoraire), 0 (arr√™t)
    function motor(direction) {
        switch (direction) {
            case 2: // Sens horaire
                // D√©finir le sens
                MotorPin1.digitalWrite(1)
                MotorPin2.digitalWrite(0)
                // Activer le moteur
                MotorEnable.digitalWrite(1)
                console.log('Clockwise')
                break;
            case 1:  // Sens antihoraire
                // D√©finir le sens
                MotorPin1.digitalWrite(0)
                MotorPin2.digitalWrite(1)
                // Activer le moteur
                MotorEnable.digitalWrite(1)
                console.log('Counterclockwise')
                break;
            case 0: // Arr√™t
                // D√©sactiver le moteur
                MotorEnable.digitalWrite(0)
                console.log('Stop')

        }
    }

    process.on('SIGINT', function () {
        MotorEnable.digitalWrite(0)
        process.exit();
    })

    let index=-1
    setInterval(() => {
        index=(index+1)%3
        motor(index)
    }, 1000)    
 

**Explication du code**

.. code-block:: js

    MotorPin1 = new Gpio(17, { mode: Gpio.OUTPUT });
    MotorPin2 = new Gpio(27, { mode: Gpio.OUTPUT });
    MotorEnable = new Gpio(22, { mode: Gpio.OUTPUT });

Importer le module pigpio et cr√©er trois objets de la classe Gpio pour contr√¥ler les 
trois ports Gpio17, Gpio27 et Gpio22.

.. code-block:: js

    function motor(direction) {
        switch (direction) {
            case 2: // Clockwise
                // Set direction
                MotorPin1.digitalWrite(1)
                MotorPin2.digitalWrite(0)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Clockwise')
                break;
            case 1:  // Counterclockwise
                // Set direction
                MotorPin1.digitalWrite(0)
                MotorPin2.digitalWrite(1)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Counterclockwise')
                break;
            case 0: // Stop
                // Disable the motor
                MotorEnable.digitalWrite(0)
                console.log('Stop')

        }
    }

D√©finir une fonction ``motor()`` pour contr√¥ler le moteur :

#. Lorsque ``direction`` est √©gal √† 2, la broche MotorPin1 passe √† un niveau haut, MotorPin2 √† un niveau bas et MotorEnable √† un niveau haut, ce qui fait tourner le moteur dans le sens horaire.
#. Lorsque ``direction`` est √©gal √† 1, la broche MotorPin1 passe √† un niveau bas, MotorPin2 √† un niveau haut et MotorEnable √† un niveau haut, ce qui fait tourner le moteur dans le sens antihoraire.
#. Lorsque ``direction`` est √©gal √† 0, MotorEnable passe √† un niveau bas et le moteur s‚Äôarr√™te de tourner.

.. code-block:: js

    let index=-1
    setInterval(() => {
        index=(index+1)%3
        motor(index)
    }, 1000)    

Fait tourner le moteur alternativement dans le sens horaire et antihoraire, avec un intervalle de 1 seconde.

.. code-block:: js

    process.on('SIGINT', function () {
        MotorEnable.digitalWrite(0)
        process.exit();
    })



Lorsque la touche **Ctrl+C** est d√©tect√©e, MotorEnable est mis √† un 
niveau bas pour arr√™ter le moteur.



Image du r√©sultat
----------------------

.. image:: ../img/image119.jpeg