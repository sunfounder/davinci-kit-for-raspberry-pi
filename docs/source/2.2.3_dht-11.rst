.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Explorez en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et tirages au sort** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.2.3 DHT-11
===============

Introduction
---------------

Le capteur num√©rique de temp√©rature et d'humidit√© DHT11 est un capteur composite 
qui contient un signal num√©rique calibr√© de temp√©rature et d'humidit√©. La technologie 
de collecte de modules num√©riques d√©di√©s ainsi que la technologie de d√©tection de la 
temp√©rature et de l'humidit√© sont appliqu√©es pour assurer une haute fiabilit√© et une 
excellente stabilit√©.

Les capteurs comprennent un capteur de r√©sistance √† l'humidit√© et un capteur de 
temp√©rature NTC, tous deux connect√©s √† un microcontr√¥leur haute performance 8 bits.

Composants
-------------

.. image:: img/list_2.2.3_dht-11.png


Principe
-------------

Le DHT11 est un capteur num√©rique basique, tr√®s √©conomique, qui mesure la temp√©rature 
et l'humidit√©. Il utilise un capteur d'humidit√© capacitif et une thermistance pour 
mesurer l'air ambiant, puis transmet un signal num√©rique via la broche de donn√©es 
(aucune entr√©e analogique n'est requise).

.. image:: img/image205.png
    :width: 200


Seules trois broches sont disponibles : VCC, GND et DATA. Le processus de communication 
commence par l'envoi de signaux de d√©marrage au DHT11 via la ligne DATA, et le DHT11 
r√©pond par un signal de confirmation. Ensuite, l'h√¥te re√ßoit ce signal de r√©ponse et 
commence √† recevoir 40 bits de donn√©es d'humidit√© et de temp√©rature (8 bits pour l'humidit√© 
enti√®re, 8 bits pour la d√©cimale de l'humidit√©, 8 bits pour la temp√©rature enti√®re, 8 bits 
pour la d√©cimale de la temp√©rature et 8 bits pour le checksum). Pour plus d'informations, 
veuillez consulter la fiche technique du DHT11.

Sch√©ma de principe
----------------------

.. image:: img/image326.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image207.png
    :width: 800



Pour les utilisateurs C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.3/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.3_DHT.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, le programme affichera la temp√©rature et 
l'humidit√© d√©tect√©es par le DHT11 sur l'√©cran de l'ordinateur.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur : "wiringPi.h : Aucun fichier ou r√©pertoire de ce type", veuillez 
    vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <stdint.h>

    #define MAXTIMINGS 85  // Maximum number of timing transitions

    int dht11_dat[5] = {0, 0, 0, 0, 0};  // Data array to hold sensor values

    // Function to read data from DHT11 sensor
    void read_dht11_dat(int GPIOPIN)
    {
        uint8_t currState;
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0;
        uint8_t i;
        float f; // Temperature in Fahrenheit

        // Reset data array before each read
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;

        // Pull pin down for 18 milliseconds to initiate communication
        pinMode(GPIOPIN, OUTPUT);
        digitalWrite(GPIOPIN, LOW);
        delay(18);

        // Then pull it up for 40 microseconds
        digitalWrite(GPIOPIN, HIGH);
        delayMicroseconds(40); 

        // Prepare to read the pin
        pinMode(GPIOPIN, INPUT);

        // Detect change and read data
        for (i = 0; i < MAXTIMINGS; i++) 
        {
            counter = 0;

            // Count how long each state lasts
            while (digitalRead(GPIOPIN) == laststate)
            {
                counter++;
                delayMicroseconds(2);
                if (counter == 255) 
                {
                    break;
                }
            }

            // Save the current state
            laststate = digitalRead(GPIOPIN);

            if (counter == 255) break;

            // Ignore first 3 transitions (DHT11 response signal)
            if ((i >= 4) && (i % 2 == 0)) 
            {
                // Shift bits and store data
                dht11_dat[j/8] <<= 1;
                if (counter > 16)
                {
                    dht11_dat[j/8] |= 1;
                }

                j++;
            }
        }

        // Check if we received 40 bits (5 bytes) and verify checksum
        if ((j >= 40) && (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) 
        {
            // Convert temperature to Fahrenheit
            f = dht11_dat[2] * 9.0 / 5.0 + 32;
            printf("Humidity = %d.%d %% Temperature = %d.%d ¬∞C (%.1f ¬∞F)\n",
                   dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], f);
        }
        else
        {
            printf("Data not good, skip\n");
        }
    }

    int main (void)
    {
        printf("Raspberry Pi wiringPi DHT11 Temperature test program\n");

        // Initialize wiringPi using BCM GPIO pin numbering
        if (wiringPiSetupGpio() == -1)
        {
            exit(1);
        }

        while(1) 
        {
            // Read data from DHT11 connected to GPIO pin 17
            read_dht11_dat(17);
            delay(1000); // Wait 1 second before next read
        }

        return 0;
    }

**Explication du code**

#. Inclure les en-t√™tes : Le code inclut les en-t√™tes n√©cessaires pour les fonctions wiringPi et l‚Äôentr√©e/sortie standard.

   .. code-block:: c

        #include <wiringPi.h>
        #include <stdio.h>
        #include <stdlib.h>
        #include <stdint.h>

#. D√©finir les constantes :

   * ``MAXTIMINGS`` : Le nombre maximum de transitions de temps attendu du capteur DHT11 (85).
   
   .. code-block:: C

        #define MAXTIMINGS 85  // Nombre maximum de transitions de temps

#. Tableau de donn√©es global :

   * ``dht11_dat[5]`` : Un tableau pour stocker les 5 octets de donn√©es re√ßus du capteur DHT11.
   
   .. code-block:: C

        int dht11_dat[5] = {0, 0, 0, 0, 0};  // Tableau de donn√©es pour stocker les valeurs du capteur

#. Fonction ``read_dht11_dat(int GPIOPIN)`` : Lit les donn√©es du capteur DHT11 connect√© √† la broche GPIO sp√©cifi√©e.
   
   * Initialisation : R√©initialise le tableau ``dht11_dat`` √† z√©ro avant chaque lecture.
   
     .. code-block:: C

        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;

   * Signal de d√©marrage : Met la broche GPIO √† bas pendant au moins 18 millisecondes pour signaler au DHT11 de commencer √† envoyer des donn√©es.
   
     .. code-block:: C

        pinMode(GPIOPIN, OUTPUT);
        digitalWrite(GPIOPIN, LOW);
        delay(18);  // 18 millisecondes

   * Met la broche GPIO √† haut pendant 40 microsecondes.
   
     .. code-block:: C

        digitalWrite(GPIOPIN, HIGH);
        delayMicroseconds(40);  // 40 microsecondes

   * Configure la broche GPIO en mode entr√©e pour lire les donn√©es du capteur.
   
     .. code-block:: C

        pinMode(GPIOPIN, INPUT);

   * Boucle de lecture des donn√©es : La boucle s‚Äôex√©cute jusqu‚Äô√† ``MAXTIMINGS`` fois pour lire les bits de donn√©es.

     Pour chaque transition (de haut √† bas ou de bas √† haut), elle mesure combien de temps la broche reste dans chaque √©tat.

     .. code-block:: C

        for (i = 0; i < MAXTIMINGS; i++) 
        {
            counter = 0;
            while (digitalRead(GPIOPIN) == laststate)
            {
                counter++;
                delayMicroseconds(2);
                if (counter == 255) 
                {
                    break;
                }
            }
            laststate = digitalRead(GPIOPIN);
            // ... reste de la boucle
        }

   * Extraction de bits de donn√©es : Les 3 premi√®res transitions sont ignor√©es car elles font partie de la r√©ponse initiale du DHT11.

     Pour chaque bit de donn√©es, elle d√©termine si le bit est 0 ou 1 en fonction de la dur√©e pendant laquelle la broche reste √† haut.

     .. code-block:: C

        if ((i >= 4) && (i % 2 == 0)) 
        {
            dht11_dat[j/8] <<= 1;
            if (counter > 16)
            {
                dht11_dat[j/8] |= 1;
            }
            j++;
        }

   * V√©rification de la somme de contr√¥le : Apr√®s avoir re√ßu tous les bits, le code v√©rifie la somme de contr√¥le pour garantir l'int√©grit√© des donn√©es.
   
     .. code-block:: C

        if ((j >= 40) && (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) )

   * Si la somme de contr√¥le est correcte, elle affiche les valeurs d'humidit√© et de temp√©rature.
   
     .. code-block:: C

        f = dht11_dat[2] * 9.0 / 5.0 + 32;
        printf("Humidit√© = %d.%d %% Temp√©rature = %d.%d ¬∞C (%.1f ¬∞F)\n",
               dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], f);

   * Si la somme de contr√¥le √©choue, elle affiche un message d'erreur.
   
     .. code-block:: C

        else
        {
            printf("Donn√©es incorrectes, saut\n");
        }

#. Fonction principale :

   * Affiche un message de d√©marrage.

   .. code-block:: C

        printf("Programme de test de temp√©rature DHT11 pour Raspberry Pi avec wiringPi\n");

   * Initialise wiringPi en utilisant la num√©rotation des broches GPIO BCM.
   
   .. code-block:: C

        if (wiringPiSetupGpio() == -1)
        {
            exit(1);
        }

   * Entre dans une boucle infinie pour lire les donn√©es du capteur DHT11 chaque seconde.
     
     .. code-block:: C

        while(1) 
        {
            read_dht11_dat(17);
            delay(1000); // attendre 1 seconde
        }

Pour les utilisateurs de Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2:** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**√âtape 3:** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.3_DHT.py

Une fois le code ex√©cut√©, le programme affichera la temp√©rature et l'humidit√© 
d√©tect√©es par le DHT11 √† l'√©cran de l'ordinateur.


**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code comme ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

   from gpiozero import OutputDevice, InputDevice
   import time


   class DHT11():
      MAX_DELAY_COUINT = 100
      BIT_1_DELAY_COUNT = 10
      BITS_LEN = 40

      def __init__(self, pin, pull_up=False):
         self._pin = pin
         self._pull_up = pull_up


      def read_data(self):
         bit_count = 0
         delay_count = 0
         bits = ""

         # -------------- send start --------------
         gpio = OutputDevice(self._pin)
         gpio.off()
         time.sleep(0.02)

         gpio.close()
         gpio = InputDevice(self._pin, pull_up=self._pull_up)

         # -------------- wait response --------------
         while gpio.value == 1:
               pass
         
         # -------------- read data --------------
         while bit_count < self.BITS_LEN:
               while gpio.value == 0:
                  pass

               # st = time.time()
               while gpio.value == 1:
                  delay_count += 1
                  # break
                  if delay_count > self.MAX_DELAY_COUINT:
                     break
               if delay_count > self.BIT_1_DELAY_COUNT:
                  bits += "1"
               else:
                  bits += "0"

               delay_count = 0
               bit_count += 1

         # -------------- verify --------------
         humidity_integer = int(bits[0:8], 2)
         humidity_decimal = int(bits[8:16], 2)
         temperature_integer = int(bits[16:24], 2)
         temperature_decimal = int(bits[24:32], 2)
         check_sum = int(bits[32:40], 2)

         _sum = humidity_integer + humidity_decimal + temperature_integer + temperature_decimal

         # print(bits)
         # print(humidity_integer, humidity_decimal, temperature_integer, temperature_decimal)
         # print(f'sum:{_sum}, check_sum:{check_sum}')
         # print()

         if check_sum != _sum:
               humidity = 0.0
               temperature = 0.0
         else:
               humidity = float(f'{humidity_integer}.{humidity_decimal}')
               temperature = float(f'{temperature_integer}.{temperature_decimal}')

         # -------------- return --------------
         return humidity, temperature


   if __name__ == '__main__':
      dht11 = DHT11(17)
      while True:
         humidity, temperature = dht11.read_data()
         print(f"{time.time():.3f}  temperature:{temperature}¬∞C  humidity: {humidity}%")
         time.sleep(2)

**Explication du Code**

.. code-block:: python

    def read_data(self):
        bit_count = 0
        delay_count = 0
        bits = ""

        # -------------- send start --------------
        gpio = OutputDevice(self._pin)
        gpio.off()
        time.sleep(0.02)

        gpio.close()
        gpio = InputDevice(self._pin, pull_up=self._pull_up)
        #...

Cette fonction est utilis√©e pour impl√©menter les fonctions du DHT11. Elle stocke les donn√©es 
d√©tect√©es dans le tableau bits[]. Le DHT11 transmet des donn√©es de 40 bits √† la fois. 
Les 16 premiers bits sont li√©s √† l'humidit√©, les 16 bits du milieu sont li√©s √† la temp√©rature, 
et les huit derniers bits sont utilis√©s pour la v√©rification. 


Le format des donn√©es est le suivant :

**8 bits de donn√©es enti√®res d'humidit√©** + **8 bits de donn√©es d√©cimales d'humidit√©** 
+ **8 bits de donn√©es enti√®res de temp√©rature** + **8 bits de donn√©es d√©cimales de temp√©rature** 
+ **8 bits de bit de contr√¥le**.

Lorsque la validit√© est d√©tect√©e via le bit de contr√¥le, la fonction renvoie 
deux r√©sultats : 1. erreur ; 2. humidit√© et temp√©rature.

.. code-block:: python

   _sum = humidity_integer + humidity_decimal + temperature_integer + temperature_decimal

   if check_sum != _sum:
      humidity = 0.0
      temperature = 0.0
   else:
      humidity = float(f'{humidity_integer}.{humidity_decimal}')
      temperature = float(f'{temperature_integer}.{temperature_decimal}')


Par exemple, si les donn√©es re√ßues sont 00101011 (valeur de 8 bits de l'entier d'humidit√©) 
00000000 (valeur de 8 bits de la d√©cimale d'humidit√©) 00111100 (valeur de 8 bits de l'entier 
de temp√©rature) 00000000 (valeur de 8 bits de la d√©cimale de temp√©rature) 01100111 (bit de contr√¥le)

**Calcul :**

00101011+00000000+00111100+00000000=01100111.

Si le r√©sultat final est √©gal aux donn√©es du bit de contr√¥le, la transmission des donn√©es est 
anormale : retour False.

Si le r√©sultat final est √©gal aux donn√©es du bit de contr√¥le, les donn√©es re√ßues sont correctes, 
alors il y aura un retour de ``humidity`` et ``temperature`` et l'affichage 
"Humidit√© = 43%, Temp√©rature = 60‚ÑÉ".


Photo du ph√©nom√®ne
-----------------------

.. image:: img/image209.jpeg