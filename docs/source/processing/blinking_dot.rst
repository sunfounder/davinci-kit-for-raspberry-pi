.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales lors des p√©riodes de f√™te.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Blinking Dot
===========================

Dans ce projet, nous allons dessiner un point dans Processing qui clignotera en synchronisation avec la LED. Veuillez monter le circuit comme indiqu√© dans le sch√©ma et ex√©cuter le programme.

.. image:: img/blinking_dot.png
.. image:: img/clickable_dot_on.png

**C√¢blage**

.. image:: img/image49.png

**Code**

.. code-block:: arduino

    import processing.io.*;
    int ledPin = 17; 
    boolean state = true; 

    void setup() {
        size(100, 100);
        frameRate(2); // d√©finir la fr√©quence d'images
        GPIO.pinMode(ledPin, GPIO.OUTPUT); // configurer le ledPin en mode sortie 
    }

    void draw() {
        state = !state;
        if (state==true) {
            GPIO.digitalWrite(ledPin, GPIO.LOW); // allumer la LED
            fill(255, 0, 0); // d√©finir la couleur de remplissage de la LED allum√©e
        } else {
            GPIO.digitalWrite(ledPin, GPIO.HIGH); // √©teindre la LED
            fill(155); // d√©finir la couleur de remplissage de la LED √©teinte
        } 
        ellipse(width/2, height/2, width*0.75, height*0.75);
    }

**Comment √ßa fonctionne ?**

Au d√©but du programme, il est n√©cessaire d'importer la biblioth√®que de fonctions GPIO de Processing avec ``import processing.io.*;``, ce qui est indispensable pour les exp√©rimentations avec les circuits.

La **fr√©quence d'images** est la fr√©quence √† laquelle les images apparaissent sur le panneau, exprim√©e en hertz (Hz). En d'autres termes, il s'agit aussi de la fr√©quence √† laquelle la fonction ``draw()`` est appel√©e. Dans ``setup()``, en d√©finissant la fr√©quence d'images √† 2, ``draw()`` sera appel√© toutes les 0,5 secondes.

Chaque appel de la fonction ``draw()`` inverse la valeur de ``state`` et l'√©value. Si la valeur est ``true``, la LED s'allume et le pinceau est rempli de rouge ; sinon, la LED est √©teinte et le pinceau est rempli de gris.

Apr√®s cette √©valuation, utilisez la fonction ``ellipse()`` pour dessiner un cercle. Il est important de noter que ``width`` et ``height`` sont des variables syst√®me utilis√©es pour stocker la largeur et la hauteur de la fen√™tre d'affichage.

Il y a deux autres points importants √† prendre en compte. Lorsque vous utilisez les GPIO, il est n√©cessaire d'utiliser la fonction ``GPIO.pinMode()`` pour d√©finir l'√©tat INPUT/OUTPUT de la broche, puis d'utiliser la fonction ``GPIO.digitalWrite()`` pour assigner une valeur (HIGH/LOW) √† la broche.

.. note::

    Veuillez √©viter d'utiliser ``delay()`` dans ``draw()`` car cela pourrait affecter le rafra√Æchissement de la fen√™tre d'affichage.



Pour plus d'informations, veuillez vous r√©f√©rer √† la `Processing Reference <https://processing.org/reference/>`_.
