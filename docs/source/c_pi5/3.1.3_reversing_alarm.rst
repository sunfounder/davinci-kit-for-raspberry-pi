.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et Partagez** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

3.1.3 Alarme de Recul
=====================

Introduction
--------------

Dans ce projet, nous allons utiliser un √©cran LCD, un buzzer et des capteurs ultrasoniques pour r√©aliser un syst√®me d'aide au recul. Nous pourrons l'installer sur un v√©hicule t√©l√©guid√© pour simuler le processus r√©el de marche arri√®re d'une voiture dans un garage.

Composants
------------

.. image:: img/list_Reversing_Alarm.png
    :align: center


Sch√©ma de c√¢blage
-----------------------

Le capteur ultrasonique d√©tecte la distance entre lui-m√™me et l'obstacle, qui 
sera affich√©e sur le LCD sous forme de code. En m√™me temps, le capteur ultrasonique 
commande le buzzer pour √©mettre des sons d'alerte de diff√©rentes fr√©quences en fonction 
de la valeur de la distance.

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO17       Pin 11   0        17
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: img/Schematic_three_one3.png
    :width: 800
    :align: center


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image242.png
    :width: 800
    :align: center

**√âtape 2 :** Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.3/

**√âtape 3 :** Compilez.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.3_ReversingAlarm.c -lwiringPi

**√âtape 4 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Lorsque le code s'ex√©cute, le module de capteur ultrasonique d√©tecte la distance 
jusqu'√† l'obstacle, puis affiche les informations sur l'√©cran LCD1602 ; en parall√®le, 
le buzzer √©met un signal d'alerte dont la fr√©quence varie en fonction de la distance.

.. note::

    * Si un message d'erreur s'affiche indiquant ``wiringPi.h: Aucun fichier ou r√©pertoire de ce type``, veuillez consulter :ref:`install_wiringpi`.
    * Si vous obtenez l'erreur ``Unable to open I2C device: No such file or directory``, vous devez vous r√©f√©rer √† :ref:`i2c_config` pour activer l'I2C et v√©rifier le c√¢blage.
    * Si le code et le c√¢blage sont corrects mais que l'√©cran LCD ne s'affiche toujours pas, essayez de tourner le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

**Code**

.. note::
    Les codes suivants sont incomplets. Si vous souhaitez consulter le code complet, 
    il est recommand√© d'utiliser la commande ``nano 3.1.1_ReversingAlarm.c``.

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <sys/time.h>
    #include <wiringPi.h>
    #include <wiringPiI2C.h>
    #include <string.h>

    #define Trig    4
    #define Echo    5
    #define Buzzer  0

    int LCDAddr = 0x27;
    int BLEN = 1;
    int fd;

    // Fonctions li√©es au LCD
    void write_word(int data){...}

    void send_command(int comm){...}

    void send_data(int data){...}

    void lcdInit(){...}

    void clear(){...}

    void write(int x, int y, char data[]){...}

    // Fonctions li√©es √† l'ultrason
    void ultraInit(void){...}

    float disMeasure(void){...}

    // Fonction principale
    int main(void)
    {
        float dis;
        char result[10];
        if(wiringPiSetup() == -1){ 
            printf("setup wiringPi failed !");
            return 1;
        }

        pinMode(Buzzer,OUTPUT);
        fd = wiringPiI2CSetup(LCDAddr);
        lcdInit();
        ultraInit();

        clear();
        write(0, 0, "Ultrasonic Starting"); 
        write(1, 1, "By Sunfounder");   

        while(1){
            dis = disMeasure();
            printf("%.2f cm \n",dis);
            delay(100);
            digitalWrite(Buzzer,LOW);
            if (dis > 400){
                clear();
                write(0, 0, "Error");
                write(3, 1, "Out of range");    
                delay(500);
            }
            else
            {
                clear();
                write(0, 0, "Distance is");
                sprintf(result,"%.2f cm",dis);
                write(5, 1, result);

                if(dis>=50)
                {delay(500);}
                else if(dis<50 & dis>20) {
                    for(int i=0;i<2;i++){
                    digitalWrite(Buzzer,HIGH);
                        delay(50);
                    digitalWrite(Buzzer,LOW);
                        delay(200);
                    }
                }
                else if(dis<=20){
                    for(int i=0;i<5;i++){
                    digitalWrite(Buzzer,HIGH);
                        delay(50);
                    digitalWrite(Buzzer,LOW);
                        delay(50);
                    }
                }
            }   
        }

        return 0;
    }

**Explication du Code**

.. code-block:: c

    pinMode(Buzzer,OUTPUT);
    fd = wiringPiI2CSetup(LCDAddr);
    lcdInit();
    ultraInit();

Dans ce programme, nous utilisons les composants pr√©c√©demment abord√©s de mani√®re 
int√©gr√©e. Ici, nous utilisons un buzzer, un √©cran LCD et un capteur ultrasonique. 
Nous les initialisons de la m√™me mani√®re que dans les exemples pr√©c√©dents.

.. code-block:: c

    dis = disMeasure();
     printf("%.2f cm \n",dis);
    digitalWrite(Buzzer,LOW);
    if (dis > 400){
         write(0, 0, "Error");
         write(3, 1, "Out of range");    
    }
    else
    {
        write(0, 0, "Distance is");
        sprintf(result,"%.2f cm",dis);
        write(5, 1, result);
    }

Ici, nous obtenons la valeur du capteur ultrasonique et calculons la distance.

Si la valeur de la distance est sup√©rieure √† la port√©e d√©tectable, un message d'erreur est affich√© sur l'√©cran LCD. Si la valeur de la distance est dans la plage acceptable, les r√©sultats correspondants sont affich√©s.

.. code-block:: c

    sprintf(result,"%.2f cm",dis);

Le mode de sortie de l'√©cran LCD ne prend en charge que le type de donn√©es 
caract√®res, et la variable `dis` stocke une valeur de type `float`. Nous devons 
donc utiliser `sprintf()`. Cette fonction convertit la valeur de type `float` en 
cha√Æne de caract√®res et la stocke dans la variable `result[]`. `%.2f` signifie que 
nous conservons deux d√©cimales.

.. code-block:: c

    if(dis>=50)
    {delay(500);}
    else if(dis<50 & dis>20) {
        for(int i=0;i<2;i++){
        digitalWrite(Buzzer,HIGH);
            delay(50);
        digitalWrite(Buzzer,LOW);
            delay(200);
        }
    }
    else if(dis<=20){
        for(int i=0;i<5;i++){
        digitalWrite(Buzzer,HIGH);
            delay(50);
        digitalWrite(Buzzer,LOW);
            delay(50);
        }
    }

Cette condition permet de contr√¥ler le son du buzzer. Selon la diff√©rence de distance, 
trois cas sont possibles, chacun g√©n√©rant des fr√©quences sonores distinctes. Puisque la 
valeur totale de `delay` est de 500ms, toutes ces conditions assurent un intervalle de 
500ms pour le capteur ultrasonique.

