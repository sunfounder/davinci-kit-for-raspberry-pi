.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _2.1.4_potentiometer:

2.1.4 Potentiom√®tre
======================

Introduction
---------------

La fonction ADC peut √™tre utilis√©e pour convertir des signaux analogiques en 
signaux num√©riques. Dans cette exp√©rience, nous utilisons l'ADC0834 pour r√©aliser 
cette conversion avec un potentiom√®tre. Le potentiom√®tre modifie la quantit√© physique 
‚Äî la tension ‚Äî qui est ensuite convertie par la fonction ADC.

Composants
-----------

.. image:: img/list_2.1.4_potentiometer.png


Principe
----------

**ADC0834**

L'ADC0834 est un convertisseur analogique-num√©rique 8 bits √† `successive approximation <https://cn.bing.com/dict/search?q=successive approximations&FORM=BDVSP6&mkt=zh-cn>`__ 
√©quip√© d'un multiplexeur multicanal configurable et d'une entr√©e/sortie s√©rie. Cette entr√©e/sortie s√©rie est con√ßue pour interfacer avec des registres √† d√©calage ou des microprocesseurs.

.. image:: img/image309.png


**S√©quence d'Op√©ration**
La conversion est initi√©e en pla√ßant CS √† un niveau bas, ce qui active tous 
les circuits logiques. CS doit rester √† un niveau bas pendant tout le processus 
de conversion. Un signal d'horloge est ensuite re√ßu du processeur. √Ä chaque 
transition du signal d'horloge de bas en haut, les donn√©es sur DI sont envoy√©es 
dans le registre de d√©calage d'adresse du multiplexeur. Le premier signal haut 
sur l'entr√©e correspond au bit de d√©marrage. Un mot d'assignation de 3 √† 4 bits 
suit le bit de d√©marrage. √Ä chaque transition suivante de bas en haut du signal 
d'horloge, le bit de d√©marrage et le mot d'assignation sont d√©cal√©s dans le 
registre de d√©calage. Lorsque le bit de d√©marrage atteint la position de d√©marrage 
du registre du multiplexeur, le canal d'entr√©e est s√©lectionn√© et la conversion 
commence. La sortie SAR Statu (SARS) passe √† un niveau haut pour indiquer qu'une 
conversion est en cours, et l'entr√©e DI du registre de d√©calage du multiplexeur 
est d√©sactiv√©e pendant la dur√©e de la conversion.

Un intervalle d'une p√©riode d'horloge est automatiquement ins√©r√© pour permettre au 
canal multiplex√© s√©lectionn√© de se stabiliser. La sortie des donn√©es (DO) quitte 
l'√©tat haute imp√©dance et fournit un niveau bas pour cette p√©riode d'horloge de 
stabilisation du multiplexeur. Le comparateur SAR compare les sorties successives 
de l'√©chelle r√©sistive au signal analogique entrant. La sortie du comparateur 
indique si l'entr√©e analogique est sup√©rieure ou inf√©rieure √† la sortie de l'√©chelle 
r√©sistive. Au fur et √† mesure que la conversion progresse, les donn√©es de conversion 
sont simultan√©ment envoy√©es depuis la broche de sortie DO, en commen√ßant par le bit 
de poids fort (MSB).

Apr√®s huit p√©riodes d'horloge, la conversion est termin√©e et la sortie SARS passe √† 
un niveau bas. Enfin, les donn√©es sont sorties, en commen√ßant par le bit de poids 
faible (LSB) apr√®s le flux de donn√©es commen√ßant par le MSB.

.. image:: img/image175.png
    :width: 800
    :align: center


**Table de contr√¥le d'adresse MUX de l'ADC0834**

.. image:: img/image176.png
    :width: 800
    :align: center


**Potentiom√®tre**

Le potentiom√®tre est un composant de r√©sistance avec trois bornes dont la valeur de 
r√©sistance peut √™tre ajust√©e. Il est g√©n√©ralement compos√© d'un r√©sistor et d'un contact 
mobile. Lorsque le contact se d√©place le long du r√©sistor, une certaine r√©sistance ou 
une tension est g√©n√©r√©e en fonction du d√©placement.

.. image:: img/image310.png
    :width: 300
    :align: center


Les fonctions du potentiom√®tre dans le circuit sont les suivantes :

1. Servir de diviseur de tension

Le potentiom√®tre est une r√©sistance ajustable en continu. Lorsque vous ajustez 
l'arbre ou le curseur du potentiom√®tre, le contact mobile se d√©place sur le 
r√©sistor. Une tension est alors g√©n√©r√©e en fonction de la tension appliqu√©e et 
de l'angle ou de la distance parcourue par le bras mobile.

Sch√©ma
---------

.. image:: img/image311.png


.. image:: img/image312.png


Proc√©dures Exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image180.png
    :width: 800



.. note::
    Placez la puce en vous r√©f√©rant √† la position indiqu√©e sur l'image. Veillez 
    √† ce que les rainures sur la puce soient orient√©es √† gauche lors de son placement.

Pour les utilisateurs de langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.1.4/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.4_Potentiometer.c -lwiringPi

**√âtape 4 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Une fois le code ex√©cut√©, tournez le bouton du potentiom√®tre et l'intensit√© 
de la LED changera en cons√©quence.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou si un message d'erreur appara√Æt : "wiringPi.h: Aucun fichier ou r√©pertoire de ce type", veuillez consulter :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <softPwm.h>

    typedef unsigned char uchar;
    typedef unsigned int uint;

    #define     ADC_CS    0
    #define     ADC_CLK   1
    #define     ADC_DIO   2
    #define     LedPin    3

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Bit de d√©marrage
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Mode Single End
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // ODD
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,odd);  delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // S√©lection
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,sel);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);

        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);

        for(i=0;i<8;i++)
        {
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);

            pinMode(ADC_DIO, INPUT);
            dat1=dat1<<1 | digitalRead(ADC_DIO);
        }

        for(i=0;i<8;i++)
        {
            dat2 = dat2 | ((uchar)(digitalRead(ADC_DIO))<<i);
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
        }

        digitalWrite(ADC_CS,1);
        pinMode(ADC_DIO, OUTPUT);
        return(dat1==dat2) ? dat1 : 0;
    }

    int main(void)
    {
        uchar analogVal;
        if(wiringPiSetup() == -1){ //si l'initialisation √©choue, affichage du message d'erreur
            printf("setup wiringPi failed !");
            return 1;
        }
        softPwmCreate(LedPin,  0, 100);
        pinMode(ADC_CS,  OUTPUT);
        pinMode(ADC_CLK, OUTPUT);

        while(1){
            analogVal = get_ADC_Result(0);
            printf("Current analogVal : %d\n", analogVal);
            delay(100);
            softPwmWrite(LedPin, analogVal);
            delay(100);
        }
        return 0;
    }

**Explication du code**

.. code-block:: c

    #define     ADC_CS    0
    #define     ADC_CLK   1
    #define     ADC_DIO   2
    #define     LedPin    3

D√©finissez CS, CLK, DIO pour l'ADC0834, et connectez-les respectivement √† GPIO0, 
GPIO1 et GPIO2. Ensuite, connectez la LED √† GPIO3.

.. code-block:: c

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Bit de d√©marrage
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Mode Single End
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Impair
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,odd);  delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // S√©lection
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,sel);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);

        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        for(i=0;i<8;i++)
        {
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);

            pinMode(ADC_DIO, INPUT);
            dat1=dat1<<1 | digitalRead(ADC_DIO);
        }

        for(i=0;i<8;i++)
        {
            dat2 = dat2 | ((uchar)(digitalRead(ADC_DIO))<<i);
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
        }

        digitalWrite(ADC_CS,1);
        pinMode(ADC_DIO, OUTPUT);
        return(dat1==dat2) ? dat1 : 0;
    }

Il s'agit d'une fonction pour l'ADC0834 qui permet d'effectuer une conversion 
analogique-num√©rique. Le d√©roulement sp√©cifique est le suivant :

.. code-block:: c

    digitalWrite(ADC_CS, 0);

R√©glez CS sur niveau bas pour commencer l'activation de la conversion AD.

.. code-block:: c

    // Bit de d√©marrage
    digitalWrite(ADC_CLK,0);
    digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
    digitalWrite(ADC_CLK,1);    delayMicroseconds(2);

Lorsque la premi√®re transition de l'entr√©e d'horloge de bas en haut se produit, 
r√©glez DIO sur 1 en tant que bit de d√©marrage. Dans les trois √©tapes suivantes, 
il y a trois mots d'affectation.

.. code-block:: c

    // Mode Single End
    digitalWrite(ADC_CLK,0);
    digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
    digitalWrite(ADC_CLK,1);    delayMicroseconds(2);

Lors de la deuxi√®me transition de l'horloge, r√©glez DIO sur 1 pour choisir le 
mode Single End.

.. code-block:: c

    // Impair
    digitalWrite(ADC_CLK,0);
    digitalWrite(ADC_DIO,odd);  delayMicroseconds(2);
    digitalWrite(ADC_CLK,1);    delayMicroseconds(2);

Pour la troisi√®me transition, la valeur de DIO est contr√¥l√©e par la variable **odd**.

.. code-block:: c

    // S√©lection
    digitalWrite(ADC_CLK,0);
    digitalWrite(ADC_DIO,sel);    delayMicroseconds(2);
    digitalWrite(ADC_CLK,1);

√Ä la quatri√®me transition de l'horloge, la valeur de DIO est contr√¥l√©e par la 
variable **sel**.

Si channel=0, sel=0, odd=0, les formules op√©ratoires concernant **sel** et **odd** 
sont les suivantes :

.. code-block:: c

    int sel = channel > 1 & 1;
    int odd = channel & 1;

Lorsque channel=1, sel=0, odd=1, reportez-vous √† la table de logique de contr√¥le 
de l'adresse ci-dessous. Ici, CH1 est s√©lectionn√© et le bit de d√©marrage est 
transf√©r√© √† l'emplacement de d√©marrage du registre multiplexeur et la conversion commence.

.. image:: img/image313.png


.. code-block:: c

    digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
    digitalWrite(ADC_CLK,0);
    digitalWrite(ADC_DIO,1);    delayMicroseconds(2);

Ici, DIO est r√©gl√© deux fois sur 1, cela peut √™tre ignor√©.

.. code-block:: c

    for(i=0;i<8;i++)
        {
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);

            pinMode(ADC_DIO, INPUT);
            dat1=dat1<<1 | digitalRead(ADC_DIO);
        }

Dans la premi√®re boucle for(), d√®s que le cinqui√®me signal d'horloge passe de haut √† 
bas, DIO est r√©gl√© en mode entr√©e. La conversion commence alors et la valeur convertie 
est stock√©e dans la variable dat1. Apr√®s huit p√©riodes d'horloge, la conversion est termin√©e.

.. code-block:: c

    for(i=0;i<8;i++)
        {
            dat2 = dat2 | ((uchar)(digitalRead(ADC_DIO))<<i);
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
        }

Dans la deuxi√®me boucle for(), les valeurs converties sont sorties via DO apr√®s huit 
autres p√©riodes d'horloge et stock√©es dans la variable dat2.

.. code-block:: c

    digitalWrite(ADC_CS,1);
    pinMode(ADC_DIO, OUTPUT);
    return(dat1==dat2) ? dat1 : 0;

return(dat1==dat2) ? dat1 : 0 permet de comparer la valeur obtenue pendant la 
conversion et la valeur de sortie. Si elles sont √©gales, la valeur convertie 
dat1 est renvoy√©e ; sinon, 0 est renvoy√©. Ici, le processus de conversion de 
l'ADC0834 est termin√©.

.. code-block:: c

    softPwmCreate(LedPin,  0, 100);

La fonction utilise un PWM logiciel pour cr√©er une broche PWM, LedPin, 
avec une largeur d'impulsion initiale de 0 et une p√©riode de PWM de 100 x 100 ¬µs.

.. code-block:: c

    while(1){
            analogVal = get_ADC_Result(0);
            printf("Current analogVal : %d\n", analogVal);
            softPwmWrite(LedPin, analogVal);
            delay(100);
        }

Dans le programme principal, la valeur de la cha√Æne 0, connect√©e √† un potentiom√®tre, 
est lue et stock√©e dans la variable analogVal, puis √©crite dans LedPin. Vous pouvez 
alors observer la variation de la luminosit√© de la LED en fonction de la valeur du 
potentiom√®tre.

Pour les utilisateurs Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Ouvrez le fichier de code

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.4_Potentiometer.py

Apr√®s l'ex√©cution du code, tournez le bouton du potentiom√®tre, l'intensit√© de la 
LED changera en cons√©quence.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller au chemin source du code comme ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import ADC0834
    import time

    LedPin = 22

    def setup():
        global led_val
        # Configurer le mode GPIO en num√©rotation BCM
        GPIO.setmode(GPIO.BCM)
        # Configurer le mode LedPin en sortie avec un niveau initial √©lev√© (3,3V)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Configurer la LED comme canal PWM avec une fr√©quence de 2kHz
        led_val = GPIO.PWM(LedPin, 2000)
        # D√©marrer avec une valeur initiale de 0
        led_val.start(0)

    def destroy():
        # Arr√™ter tous les canaux PWM
        led_val.stop()
        # Lib√©rer les ressources
        GPIO.cleanup()

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)
    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # Lorsque 'Ctrl+C' est appuy√©, la fonction destroy() est ex√©cut√©e.
            destroy()

**Explication du code**

.. code-block:: python

    import ADC0834

Importer la biblioth√®que ADC0834. Vous pouvez v√©rifier le contenu de la biblioth√®que 
en appelant la commande `nano ADC0834.py`.

.. code-block:: python

    def setup():
        global led_val
        # Configurer le mode GPIO en num√©rotation BCM
        GPIO.setmode(GPIO.BCM)
        # Configurer le mode LedPin en sortie avec un niveau initial √©lev√© (3,3V)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Configurer la LED comme canal PWM avec une fr√©quence de 2kHz
        led_val = GPIO.PWM(LedPin, 2000)

        # D√©marrer avec une valeur initiale de 0
        led_val.start(0)

Dans la fonction setup(), d√©finissez le mode BCM pour la num√©rotation, configurez 
LedPin comme canal PWM et r√©glez la fr√©quence √† 2 kHz.

**ADC0834.setup() :** Initialise l'ADC0834 et connecte les broches d√©finies CS, CLK, 
DIO de l'ADC0834 aux GPIO17, GPIO18 et GPIO27 respectivement.

.. code-block:: python

    def loop():
        while True:
            res = ADC0834.getResult()
            print ('res = %d' % res)
            R_val = MAP(res, 0, 255, 0, 100)
            led_val.ChangeDutyCycle(R_val)
            time.sleep(0.2)

La fonction getResult() est utilis√©e pour lire les valeurs analogiques des quatre 
canaux de l'ADC0834. Par d√©faut, elle lit la valeur du canal CH0. Pour lire les 
autres canaux, entrez le num√©ro du canal dans les parenth√®ses, par exemple **getResult(1)**.

La fonction loop() lit d'abord la valeur de CH0 et l'assigne √† la variable **res**. 
Ensuite, la fonction MAP est appel√©e pour mapper la valeur lue du potentiom√®tre entre 
0 et 100. Cette √©tape permet de contr√¥ler le cycle de travail de LedPin. Vous verrez 
alors la luminosit√© de la LED varier en fonction de la valeur du potentiom√®tre.




Image du ph√©nom√®ne
-----------------------

.. image:: img/image181.jpeg

