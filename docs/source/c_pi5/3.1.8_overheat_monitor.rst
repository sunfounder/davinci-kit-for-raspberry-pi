.. note::

    Ciao, benvenuto nella Community su Facebook per gli appassionati di SunFounder Raspberry Pi, Arduino e ESP32! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **PerchÃ© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con lâ€™aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci dei nuovi prodotti e anteprime esclusive.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti piÃ¹ recenti.
    - **Promozioni e Giveaway Festivi**: Partecipa a concorsi e promozioni in occasione delle festivitÃ .

    ðŸ‘‰ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

3.1.8 Monitor di Surriscaldamento
=================================

Introduzione
--------------

Potresti voler realizzare un dispositivo di monitoraggio della temperatura 
per rilevare il surriscaldamento in vari ambienti. Ad esempio, in fabbrica, 
per attivare un allarme e spegnere automaticamente la macchina in caso di 
surriscaldamento del circuito. In questa lezione, utilizzeremo un termistore, 
un joystick, un cicalino, un LED e un LCD per creare un dispositivo intelligente 
di monitoraggio della temperatura con soglia regolabile.

Componenti
-------------

.. image:: img/list_Overheat_Monitor.png
    :align: center

.. image:: img/list_Overheat_Monitor2.png
    :align: center

Schema di Collegamento
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin15    3        22
GPIO23       Pin16    4        23
GPIO24       Pin18    5        24
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: img/Schematic_three_one8.png
   :width: 700
   :align: center

Procedure Sperimentali
----------------------

**Passo 1:** Costruisci il circuito.

.. image:: img/image258.png
   :alt: Overheat Monitor_bb
   :width: 800

**Passo 2:** Vai nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.8/

**Passo 3:** Compila il codice.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.8_OverheatMonitor.c -lwiringPi -lm

**Passo 4:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Quando il codice Ã¨ in esecuzione, la temperatura attuale e la soglia 
di alta temperatura (**40**Â°C) vengono visualizzate su **I2C LCD1602**. 
Se la temperatura attuale supera la soglia, il cicalino e il LED si 
accendono per avvisare.

.. note::

    Se non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`Il codice C non funziona?`.

**Joystick**: il joystick serve per regolare la soglia di alta temperatura. 
Spostando il **Joystick** lungo gli assi X e Y si puÃ² aumentare o diminuire 
la soglia. Premere il **Joystick** una volta per reimpostare la soglia al 
valore iniziale.

**Spiegazione del Codice**

.. code-block:: c

    intÂ get_joystick_value(){
    Â Â Â Â ucharÂ x_val;
    Â Â Â Â ucharÂ y_val;
    Â Â Â Â x_valÂ =Â get_ADC_Result(1);
    Â Â Â Â y_valÂ =Â get_ADC_Result(2);
    Â Â Â Â ifÂ (x_valÂ >Â 200){
    Â Â Â Â Â Â Â Â returnÂ 1;
        }
    Â Â Â Â elseÂ if(x_valÂ <Â 50){
    Â Â Â Â Â Â Â Â returnÂ -1;
        }
    Â Â Â Â elseÂ if(y_valÂ >Â 200){
    Â Â Â Â Â Â Â Â returnÂ -10;
        }
    Â Â Â Â elseÂ if(y_valÂ <Â 50){
    Â Â Â Â Â Â Â Â returnÂ 10;
        }
        else{
    Â Â Â Â Â Â Â Â returnÂ 0;
        }
    }

Questa funzione legge i valori di X e Y. Se **X>200**, restituisce "**1**"; 
**X<50**, restituisce "**-1**"; **y>200**, restituisce "**-10**"; e **y<50**, 
restituisce "**10**".

.. code-block:: c

    voidÂ upper_tem_setting(){
    Â Â Â Â write(0,Â 0,Â "UpperÂ Adjust:");
    Â Â Â Â intÂ changeÂ =Â get_joystick_value();
    Â Â Â Â upperTemÂ =Â upperTemÂ +Â change;
    Â Â Â Â charÂ str[6];
    Â Â Â Â snprintf(str,3,"%d",upperTem);
    write(0,1,str);
    intÂ len;
    Â Â lenÂ =Â strlen(str);
    Â Â write(len,1,"Â Â Â Â Â Â Â Â Â Â Â Â Â ");
        delay(100);
    }

Questa funzione regola la soglia e la visualizza su **I2C LCD1602**.

.. code-block:: c

    doubleÂ temperature(){
    Â Â Â Â unsignedÂ charÂ temp_value;
    Â Â Â Â doubleÂ Vr,Â Rt,Â temp,Â cel,Â Fah;
    Â Â Â Â temp_valueÂ =Â get_ADC_Result(0);
    Â Â Â Â VrÂ =Â 5Â *Â (double)(temp_value)Â /Â 255;
    Â Â Â Â RtÂ =Â 10000Â *Â (double)(Vr)Â /Â (5Â -Â (double)(Vr));
    Â Â Â Â tempÂ =Â 1Â /Â (((log(Rt/10000))Â /Â 3950)+(1Â /Â (273.15Â +Â 25)));
    Â Â Â Â celÂ =Â tempÂ -Â 273.15;
    Â Â Â Â FahÂ =Â celÂ *Â 1.8Â +32;
    Â Â Â Â returnÂ cel;
    }

Legge il valore analogico di **CH0** (termistore) di **ADC0834** e lo 
converte in temperatura.

.. code-block:: c

    voidÂ monitoring_temp(){
    Â Â Â Â charÂ str[6];
    Â Â Â Â doubleÂ celÂ =Â temperature();
    Â Â Â Â snprintf(str,6,"%.2f",cel);
    Â Â Â Â write(0,Â 0,Â "Temp:Â ");
    Â Â Â Â write(6,Â 0,Â str);
    Â Â Â Â snprintf(str,3,"%d",upperTem);
    Â Â Â Â write(0,Â 1,Â "Upper:Â ");
    Â Â Â Â write(7,Â 1,Â str);
        delay(100);
    Â Â Â Â if(celÂ >=Â upperTem){
    Â Â Â Â Â Â Â Â digitalWrite(buzzPin,Â HIGH);
    Â Â Â Â Â Â Â Â digitalWrite(LedPin,Â HIGH);
        }
    Â Â Â Â elseÂ if(celÂ <Â upperTem){
    Â Â Â Â Â Â Â Â digitalWrite(buzzPin,Â LOW);
    Â Â Â Â Â Â Â Â digitalWrite(LedPin,Â LOW);
        }
    }

Quando il codice Ã¨ in esecuzione, la temperatura attuale e la soglia 
di alta temperatura (**40**Â°C) vengono visualizzate su **I2C LCD1602**. 
Se la temperatura attuale supera la soglia, il cicalino e il LED si accendono 
per avvisare.

.. code-block:: c

    intÂ main(void)
    {
        setup();
    Â Â Â Â intÂ lastStateÂ =1;
    Â Â Â Â intÂ stage=0;
    Â Â Â Â whileÂ (1)
        {
    Â Â Â Â Â Â Â Â intÂ currentStateÂ =Â digitalRead(Joy_BtnPin);
    Â Â Â Â Â Â Â Â if(currentState==1Â &&Â lastStateÂ ==Â 0){
    Â Â Â Â Â Â Â Â Â Â Â Â stage=(stage+1)%2;
                delay(100);
                lcd_clear();
            }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â Â Â Â Â ifÂ (stage==1){
                upper_tem_setting();
            }
            else{
                monitoring_temp();
            }
        }
    Â Â Â Â returnÂ 0;
    }

La funzione main() include l'intero processo del programma:


1) Allâ€™avvio del programma, il valore iniziale di **stage** Ã¨ **0** e la 
temperatura attuale insieme alla soglia di alta temperatura (**40**Â°C) 
vengono visualizzate su **I2C LCD1602**. Se la temperatura supera la soglia, 
il cicalino e il LED si attivano per avvisare.

2) Premendo il Joystick, **stage** diventa **1**, consentendo di regolare la 
soglia di alta temperatura. Spostando il Joystick lungo gli assi X e Y si puÃ² 
aumentare o diminuire la soglia corrente. Premere nuovamente il Joystick per 
reimpostare la soglia al valore iniziale.

