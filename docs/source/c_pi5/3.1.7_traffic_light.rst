.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et Partagez** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

3.1.7 Feu Tricolore
=======================

Introduction
-------------

Dans ce projet, nous allons utiliser des LEDs de trois couleurs pour simuler le 
changement de feux de signalisation, et un afficheur 7 segments √† quatre chiffres 
pour afficher le d√©compte de chaque √©tat du feu.

Composants
-------------

.. image:: img/list_Traffic_Light.png
    :align: center


Sch√©ma de c√¢blage
--------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SPICE0       Pin 24   10       8
SPICE1       Pin 26   11       7
============ ======== ======== ===

.. image:: img/Schematic_three_one7.png
   :align: center


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image254.png
   :width: 800


**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.7/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.7_TrafficLight.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Lorsque le programme est lanc√©, les LEDs simuleront le changement de couleurs des 
feux tricolores. Tout d'abord, la LED rouge s'allume pendant **60s**, puis la LED 
verte s'allume pendant **30s**, suivie de la LED jaune pendant **5s**. Ensuite, la 
LED rouge s'allume √† nouveau pour **60s**. Cette s√©rie d'actions sera r√©p√©t√©e en boucle.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur indiquant : \"wiringPi.h: Aucun fichier ou r√©pertoire de ce type ¬ª, veuillez consulter :ref:`C code is not working?`.


**Explication du Code**

.. code-block:: c

    #define     SDI     5 
    #define     RCLK    4  
    #define     SRCLK    1   

    const int placePin[] = {12, 3, 2, 0};
    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

    void pickDigit(int digit);
    void hc595_shift(int8_t data);
    void clearDisplay();
    void display();

Ces fonctions servent √† afficher les num√©ros sur un afficheur 7 segments √† quatre 
chiffres. Reportez-vous √† la section :ref:`1.1.5 Afficheur 7 segments √† 4 chiffres` 
pour plus de d√©tails. Ici, les codes permettent d'afficher le d√©compte du temps du 
feu tricolore.

.. code-block:: c

    const int ledPin[]={6,10,11};  

    int colorState = 0;

    void lightup()
    {
        for(int i=0;i<3;i++){
            digitalWrite(ledPin[i],HIGH);
        }
        digitalWrite(ledPin[colorState],LOW);    
    }

Ces lignes contr√¥lent l'allumage et l'extinction des LEDs.

.. code-block:: c

    int greenLight = 30;
    int yellowLight = 5;
    int redLight = 60;
    int colorState = 0;
    char *lightColor[]={"Red","Green","Yellow"};
    int counter = 60;

    void timer(int  timer1){       // Fonction de minuteur
        if(timer1 == SIGALRM){   
            counter --;         
            alarm(1); 
            if(counter == 0){
                if(colorState == 0) counter = greenLight;
                if(colorState == 1) counter = yellowLight;
                if(colorState == 2) counter = redLight;
                colorState = (colorState+1)%3; 
            }
            printf("counter : %d \t light color: %s \n",counter,lightColor[colorState]);
        }
    }

Ce code active ou d√©sactive le minuteur. Reportez-vous √† la section
 :ref:`1.1.5 4-Digit 7-Segment Display` pour plus de d√©tails. Lorsque 
 le compteur atteint z√©ro, `colorState` change, ce qui permet de changer 
 la LED et d'attribuer une nouvelle valeur au minuteur.

.. code-block:: c

    void loop()
    {
        while(1){
        display();
        lightup(); 
        }
    }

    int main(void)
    {
        //‚Ä¶
        signal(SIGALRM,timer);  
        alarm(1); 
        loop();
        return 0;
    }

Le minuteur est d√©marr√© dans la fonction **main()**. Dans la fonction **loop()**, 
une boucle `while(1)` est utilis√©e pour appeler les fonctions de l'afficheur 7 
segments et des LEDs.

