.. note::

    Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts.

    **Why Join?**

    - **Expert Support**: Solve post-sale issues and technical challenges with help from our community and team.
    - **Learn & Share**: Exchange tips and tutorials to enhance your skills.
    - **Exclusive Previews**: Get early access to new product announcements and sneak peeks.
    - **Special Discounts**: Enjoy exclusive discounts on our newest products.
    - **Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions.

    ðŸ‘‰ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!

3.1.11 Morse Code Generator
=============================

Introduction
-----------------

In this lesson, we'll make a Morse code generator, where you type in a
series of English letters in the Raspberry Pi to make it appear as Morse
code.

Components
---------------

.. image:: img/3.1.10.png
    :align: center

Schematic Diagram
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: img/Schematic_three_one11.png
   :align: center

Experimental Procedures
----------------------------

**Step 1:** Build the circuit. (Pay attention to poles of the buzzer:
The one with + label is the positive pole and the other is the
negative.)

.. image:: img/image269.png
   :alt: Morse_bb
   :width: 800

**Step 2**: Open the code file.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.11/

**Step 3**: Compile the code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.11_MorseCodeGenerator.c -lwiringPi

**Step 4**: Run the executable file above.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

After the program runs, type a series of characters, and the buzzer and
the LED will send the corresponding Morse code signals.

.. note::

    If it does not work after running, or there is an error prompt: \"wiringPi.h: No such file or directory\", please refer to :ref:`C code is not working?`.


**Code Explanation**

.. code-block:: c

    structÂ MORSE{
    Â Â Â Â charÂ word;
    Â Â Â Â unsignedÂ charÂ *code;
    };

    structÂ MORSEÂ morseDict[]=
    {
    Â Â Â Â {'A',"01"},Â {'B',"1000"},Â {'C',"1010"},Â {'D',"100"},Â {'E',"0"},Â 
    Â Â Â Â {'F',"0010"},Â {'G',"110"},Â {'H',"0000"},Â {'I',"00"},Â {'J',"0111"},Â 
    Â Â Â Â {'K',"101"},Â {'L',"0100"},Â {'M',"11"},Â {'N',"10"},Â {'O',"111"},Â 
    Â Â Â Â {'P',"0110"},Â {'Q',"1101"},Â {'R',"010"},Â {'S',"000"},Â {'T',"1"},
    Â Â Â Â {'U',"001"},Â {'V',"0001"},Â {'W',"011"},Â {'X',"1001"},Â {'Y',"1011"},Â 
    Â Â Â Â {'Z',"1100"},{'1',"01111"},Â {'2',"00111"},Â {'3',"00011"},Â {'4',"00001"},Â 
    Â Â Â Â {'5',"00000"},{'6',"10000"},Â {'7',"11000"},Â {'8',"11100"},Â {'9',"11110"},
    Â Â Â Â {'0',"11111"},{'?',"001100"},Â {'/',"10010"},Â {',',"110011"},Â {'.',"010101"},
    Â Â Â Â {';',"101010"},{'!',"101011"},Â {'@',"011010"},Â {':',"111000"}
    };

This structure MORSE is the dictionary of the Morse code, containing
characters A-Z, numbers 0-9 and marks \"?\" \"/\" \":\" \",\" \".\" \";\" \"!\" \"@\" .

.. code-block:: c

    charÂ *lookup(charÂ key,structÂ MORSEÂ *dict,intÂ length)
    {
    Â Â Â Â forÂ (intÂ i=0;i<length;i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â if(dict[i].word==key){
    Â Â Â Â Â Â Â Â Â Â Â Â returnÂ dict[i].code;
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }Â Â Â Â 
    }

The function **lookup()** works by \"checking the dictionary\". Define a
**key,** search the same words as **key** in the structure **morseDict**
and return the corresponding informationâ€” \"**code**\" of the certain
word.

.. code-block:: c

    voidÂ on(){
    Â Â Â Â digitalWrite(ALedPin,HIGH);
    Â Â Â Â digitalWrite(BeepPin,HIGH);Â Â Â Â Â 
    }

Create a function on() to start the buzzer and the LED.

.. code-block:: c

    voidÂ off(){
    Â Â Â Â digitalWrite(ALedPin,LOW);
    Â Â Â Â digitalWrite(BeepPin,LOW);
    }

The function off() turns off the buzzer and the LED.

.. code-block:: c

    voidÂ beep(intÂ dt){
    Â Â Â Â on();
    Â Â Â Â delay(dt);
    Â Â Â Â off();
    Â Â Â Â delay(dt);
    }

Define a function beep() to make the buzzer and the LED emit sounds and
blink in a certain interval of **dt**.

.. code-block:: c

    voidÂ morsecode(charÂ *code){
    Â Â Â Â intÂ pauseÂ =Â 250;
    Â Â Â Â charÂ *pointÂ =Â NULL;
    Â Â Â Â intÂ lengthÂ =Â sizeof(morseDict)/sizeof(morseDict[0]);
    Â Â Â Â forÂ (intÂ i=0;i<strlen(code);i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â point=lookup(code[i],morseDict,length);
    Â Â Â Â Â Â Â Â forÂ (intÂ j=0;j<strlen(point);j++){
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (point[j]=='0')
    Â Â Â Â Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause/2);
    Â Â Â Â Â Â Â Â Â Â Â Â }elseÂ if(point[j]=='1')
    Â Â Â Â Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause);
    Â Â Â Â Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â Â Â Â Â delay(pause);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }
    }

The function morsecode() is used to process the Morse code of input
characters by making the \"1\" of the code keep emitting sounds or lights
and the \"0\"shortly emit sounds or lights, ex., input \"SOS\", and there
will be a signal containing three short three long and then three short
segments \" Â· Â· Â· - - - Â· Â· Â· \".

.. code-block:: c

    intÂ toupper(intÂ c)
    {
    Â Â Â Â ifÂ ((cÂ >=Â 'a')Â &&Â (cÂ <=Â 'z'))
    Â Â Â Â Â Â Â Â returnÂ cÂ +Â ('A'Â -Â 'a');
    Â Â Â Â returnÂ c;
    }
    charÂ *strupr(charÂ *str)
    {
    Â Â Â Â charÂ *orign=str;
    Â Â Â Â forÂ (;Â *str!='\0';Â str++)
    Â Â Â Â Â Â Â Â *strÂ =Â toupper(*str);
    returnÂ orign;
    }

Before coding, you need to unify the letters into capital letters.

.. code-block:: c

    voidÂ main(){
    Â Â Â Â setup();
    Â Â Â Â charÂ *code;
    Â Â Â Â intÂ length=8;
    Â Â Â Â codeÂ =Â (char*)malloc(sizeof(char)*length);
    Â Â Â Â whileÂ (1){
    Â Â Â Â Â Â Â Â printf("PleaseÂ inputÂ theÂ messenger:");
            delay(100);
    Â Â Â Â Â Â Â Â scanf("%s",code);
    Â Â Â Â Â Â Â Â code=strupr(code);
    Â Â Â Â Â Â Â Â printf("%s\n",code);
            delay(100);
    Â Â Â Â Â Â Â Â morsecode(code);
    Â Â Â Â }
    }

When you type the relevant characters with the keyboard,
code=strupr(code) will convert the input letters to their capital form.

Printf() then prints the clear text on the computer screen, and the
morsecod() function causes the buzzer and the LED to emit Morse code.

Note that the length of the input character mustnâ€™t exceed the
**length** (can be revised).
