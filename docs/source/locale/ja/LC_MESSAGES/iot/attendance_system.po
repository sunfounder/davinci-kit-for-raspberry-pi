# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-29 17:00+0800\n"
"PO-Revision-Date: 2021-08-03 18:29+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.3\n"

#: ../iot/attendance_system.rst:2
msgid "Attendance system"
msgstr "Attendance system（出席システム）"

#: ../iot/attendance_system.rst:4
msgid ""
"In this project, we use MFRC522 RFID Module and Cloud4RPi to make a system, "
"you can view the attendance information on Cloud4RPi, or open the local .csv "
"file to view the attendance records."
msgstr ""
"このプロジェクトでは、MFRC522 RFIDモジュールとCloud4RPiを使用してシステムを作"
"成します。Cloud4RPiで出席情報を表示したり、ローカルの.csvファイルを開いて出席"
"レコードを表示したりできます。"

#: ../iot/attendance_system.rst:6
msgid ""
"Due to the delay of network data transmission, the project only allows you to "
"punch in when the green LED is on and upload data when the red LED is on."
msgstr ""
"ネットワークデータ送信の遅延により、プロジェクトでは、緑色のLEDがオンのときに"
"パンチインし、赤色のLEDがオンのときにデータをアップロードします。"

#: ../iot/attendance_system.rst:9
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../iot/attendance_system.rst:11
msgid "Build the circuit."
msgstr "回路を構築します。"

#: ../iot/attendance_system.rst:16
msgid "Open the code."
msgstr "コードを開きます。"

#: ../iot/attendance_system.rst:27
msgid "Find the line below and fill in the correct device token."
msgstr "下の行を見つけて、正しいデバイストークンを入力します。"

#: ../iot/attendance_system.rst:33
msgid "Run the code."
msgstr "コードを実行します。"

#: ../iot/attendance_system.rst:43
msgid ""
"Go to Cloud4RPi, add a new control panel named **project5** and add 2 widgets "
"(text and chart widgets) via the **Add widget** button."
msgstr ""
"Cloud4RPiに移動し、**project5** という名前の新しいコントロールパネルを追加し、"
"**Add widget** ボタンを使用して2つのwidget（text and chart widgets）を追加しま"
"す。"

#: ../iot/attendance_system.rst:48
msgid ""
"Once added, you can view the clock-in records for different time periods on "
"the Chart widget (when the value of LED ON is True, it means someone clocked "
"in), and then view the number of people who clocked in on the Text widget."
msgstr ""
"追加すると、チャートwidgetでさまざまな期間の出勤記録を表示し（LED ONの値がTrue"
"の場合、誰かが出勤したことを意味します）、テキストwidgetで出勤した人の数を表示"
"できます。"

#: ../iot/attendance_system.rst:50
msgid ""
"Also you can find the ``.csv`` file with the date under the path ``/home/pi/"
"cloud4rpi-raspberrypi-python``."
msgstr ""
"また、パス ``/home/pi/cloud4rpi-raspberrypi-python`` の下に日付のある ``.csv`` "
"ファイルを見つけることができます。"

#: ../iot/attendance_system.rst:55
msgid "Open it with the following command."
msgstr "次のコマンドで開きます。"

#: ../iot/attendance_system.rst:66
msgid ""
"In this way, you can read the punch-in records of different time periods. On "
"the left is the ID of different MFRC522 RFID modules, and on the right is the "
"time of punching in."
msgstr ""
"このようにして、さまざまな期間のパンチインレコードを読み取ることができます。 "
"左側はさまざまなMFRC522RFIDモジュールのIDであり、右側はパンチインの時間です。"

#: ../iot/attendance_system.rst:73
msgid ""
"If the person's name is written to the MFRC522 RFID Module in advance, and "
"then the id is replaced with text in the code (which will be mentioned later "
"in the code explanation), so that the attendance sheet records the name of "
"each person, rather than the ID of the card."
msgstr ""
"事前にMFRC522RFIDモジュールに人の名前を書き込んでから、コード内のテキスト"
"（コードの説明は後述）にIDを置き換えると、出席シートに カードのIDより、各人の"
"名前が記録されます。"

#: ../iot/attendance_system.rst:76
msgid "Code Explanation"
msgstr "コードの説明"

#: ../iot/attendance_system.rst:87
msgid "Set 2 LEDs as output and set the initial value to high."
msgstr "2つのLEDを出力として設定し、初期値を高に設定します。"

#: ../iot/attendance_system.rst:103
msgid ""
"Use the ``get_time()`` function to get the current timestamp and return two "
"values. Where ``present_date`` is accurate to the day and ``present_time`` is "
"accurate to the second."
msgstr ""
"``get_time()`` 関数を使用して、現在のtimestampを取得し、2つの値を返します。 こ"
"こで、``present_date`` はその日に対して正確であり、``present_time`` は秒に対して"
"正確です。"

#: ../iot/attendance_system.rst:116
msgid ""
"First, we set ``attendance`` to False, which means that no one is clocked in."
msgstr ""
"まず、``attendance`` をFalseに設定します。これは、誰もクロックインされていない"
"ことを意味します。"

#: ../iot/attendance_system.rst:118
msgid ""
"Then set GreenPin to low level to light it, and RedPin to high level to keep "
"it off, indicating that the current attendance system is working normally."
msgstr ""
"次に、GreenPinを低レベルに設定して点灯させ、RedPinを高レベルに設定して消灯させ"
"ます。これは、現在の出席システムが正常に機能していることを示します。"

#: ../iot/attendance_system.rst:120
msgid ""
"When someone punches in, the id and text information of the card will be "
"printed. If the red LED is on and the green LED is off, it means that the "
"check-in is successful and the result is sent to Cloud4RPi."
msgstr ""
"誰かがパンチインすると、カードのIDとテキスト情報が印刷されます。 赤いLEDがオン"
"で、緑のLEDがオフの場合は、チェックインが成功し、結果がCloud4RPiに送信されるこ"
"とを意味します。"

#: ../iot/attendance_system.rst:122
msgid ""
"During this period, the attendance system is in sleep state until the next "
"cycle starts (the green light is on)."
msgstr ""
"この期間中、出席システムは次のサイクルが開始するまでスリープ状態になります（緑"
"色のライトが点灯します）。"

#: ../iot/attendance_system.rst:135
msgid ""
"First determine if the id is duplicated in ``attendance_list`` by an if "
"statement, if not, it means the punch-in is valid and pass the id information "
"into ``attendance_list``. Then we get the current timestamp and use the id as "
"the key of the ``attendance_statistics`` dictionary and ``present_time`` as "
"the value of the corresponding key. In this way, the "
"``attendance_statistics`` dictionary stores the punch time of the current id."
msgstr ""
"まず、ifステートメントによってIDが ``attendance_list`` で重複しているかどうかを"
"判断します。重複していない場合は、パンチインが有効であることを意味し、ID情報を"
" ``attendance_list`` に渡します。 次に、現在のtimestampを取得し、IDを"
" ``attendance_statistics`` ディクショナリのキーとして使用し、``present_time`` を"
"対応するキーの値として使用します。 このようにして、 ``attendance_statistics`` "
"ディクショナリは現在のIDのパンチタイムを保存します。"

#: ../iot/attendance_system.rst:137
msgid ""
"Finally we write the ``attendance_statistics`` dictionary to a .csv file and "
"name the file as ``'attendance_sheet.'' + present_date + '.csv'``, so that we "
"store the attendance sheet in time order."
msgstr ""
"最後に、``attendance_statistics`` 辞書を.csvファイルに書き込み、ファイルに"
" ``'attendance_sheet.'' + present_date + '.csv'`` という名前を付けて、出席シート"
"を時間順に保存します。"

#: ../iot/attendance_system.rst:141
msgid ""
"If you have written the person's name in the MFRC522 RFID, then replace the "
"``id`` with ``text`` and your attendance sheet will record the name of the "
"person."
msgstr ""
"MFRC522 RFIDに人の名前を書き込んだ場合は、``id`` を ``text`` に置き換えると、出席"
"シートにその人の名前が記録されます。"

#: ../iot/attendance_system.rst:148
msgid "Returns the length of ``attendance_list``, i.e. the number of attendees."
msgstr "``attendance_list`` の長さ、つまり出席者の数を返します。"
