.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.2.2 Thermistor
====================

Introduction
----------------

Tout comme la photo-r√©sistance permet de d√©tecter la lumi√®re, une thermistance 
est un dispositif √©lectronique sensible √† la temp√©rature pouvant √™tre utilis√© 
pour des fonctions de contr√¥le de temp√©rature, comme la r√©alisation d'une alarme thermique.

Composants
-------------

.. image:: img/list_2.2.2_thermistor.png


Principe
-----------

Une thermistance est une r√©sistance thermosensible qui pr√©sente un changement 
pr√©cis et pr√©visible de r√©sistance en fonction des variations de temp√©rature. 
L'ampleur de ce changement d√©pend de sa composition sp√©cifique. Les thermistances 
appartiennent au groupe des composants passifs, qui, contrairement aux composants 
actifs, ne peuvent pas amplifier un signal ou fournir un gain de puissance √† un circuit.

La thermistance est un √©l√©ment sensible, et elle existe en deux types : √† coefficient 
de temp√©rature n√©gatif (CTN) et √† coefficient de temp√©rature positif (CTP). Dans ce 
projet, nous utilisons une thermistance CTN, dont la r√©sistance diminue avec 
l'augmentation de la temp√©rature.

.. image:: img/image325.png

Le principe est que la r√©sistance de la thermistance CTN change en fonction de la 
temp√©rature ambiante. Elle d√©tecte ainsi la temp√©rature en temps r√©el. Lorsque la 
temp√©rature augmente, la r√©sistance de la thermistance diminue. Ensuite, les donn√©es 
de tension sont converties en valeurs num√©riques par l'adaptateur A/D, permettant 
d'afficher la temp√©rature en degr√©s Celsius ou Fahrenheit via la programmation.

Dans cette exp√©rience, une thermistance et une r√©sistance de pull-up de 10k ohms 
sont utilis√©es. Chaque thermistance a une r√©sistance nominale. Ici, elle est de 
10k ohms, mesur√©e √† 25 degr√©s Celsius.

Voici la relation entre la r√©sistance et la temp√©rature :

R\ :sub:`T` =R\ :sub:`N` exp\ :sup:`B(1/TK ‚Äì 1/TN)`

**R\ T** est la r√©sistance de la thermistance CTN √† la temp√©rature **T\ K**.

**R\ N** est la r√©sistance de la thermistance CTN √† la temp√©rature nominale **T\ N**. Ici, la valeur de **R\ N** est de 10k.

**T\ K** est la temp√©rature en kelvins (K). Ici, la valeur de **T\ K**\ est 273,15 + degr√©s Celsius.

**T\ N** est la temp√©rature nominale en kelvins (K), ici la valeur de **T\ N** est 273,15 + 25.

Le **B**\ (b√™ta), constant de mat√©riau de la thermistance CTN, est aussi appel√© indice 
de sensibilit√© thermique, avec une valeur de 3950.

**exp** d√©signe l'exponentielle, et la base de l'exponentielle, **e**, est un nombre 
naturel d'environ 2,7.

La formule convertie devient :
T\ :sub:`K`\ =1/(ln(R\ :sub:`T`/R\ :sub:`N`)/B+1/T\ :sub:`N`), ce qui permet d'obtenir 
la temp√©rature en kelvins. En soustrayant 273,15, on obtient la temp√©rature en degr√©s Celsius.

Cette relation est une formule empirique et n'est pr√©cise que lorsque la temp√©rature 
et la r√©sistance se situent dans une plage effective.

Sch√©ma de connexion
-----------------------

.. image:: img/image323.png

.. image:: img/image324.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Montez le circuit.

.. image:: img/image202.png
    :width: 800

Pour les utilisateurs du langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.2/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.2_Thermistor.c -lwiringPi -lm

.. note::
    L'option `-lm` permet de charger la biblioth√®que math√©matique. Ne l'oubliez pas, sinon une erreur pourrait survenir.

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Lorsque le code s'ex√©cute, la thermistance d√©tecte la temp√©rature ambiante, 
qui sera affich√©e √† l'√©cran une fois le calcul termin√©.

.. note::

    Si le programme ne fonctionne pas ou s'il y a un message d'erreur tel que 
    "wiringPi.h: Aucun fichier ou r√©pertoire de ce type", veuillez consulter 
    :ref:`C code is not working?`.


**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <math.h>

    typedef unsigned char uchar;
    typedef unsigned int uint;

    #define     ADC_CS    0
    #define     ADC_CLK   1
    #define     ADC_DIO   2

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Bit de d√©marrage
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Mode √† une seule extr√©mit√©
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // ODD
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,odd);  delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // S√©lection
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,sel);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);

        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);

        for(i=0;i<8;i++)
        {
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);

            pinMode(ADC_DIO, INPUT);
            dat1=dat1<<1 | digitalRead(ADC_DIO);
        }

        for(i=0;i<8;i++)
        {
            dat2 = dat2 | ((uchar)(digitalRead(ADC_DIO))<<i);
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
        }

        digitalWrite(ADC_CS,1);
        pinMode(ADC_DIO, OUTPUT);
        return(dat1==dat2) ? dat1 : 0;
    }

    int main(void)
    {
        unsigned char analogVal;
        double Vr, Rt, temp, cel, Fah;
        if(wiringPiSetup() == -1){ // en cas d'√©chec de l'initialisation de wiringPi, affiche un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(ADC_CS,  OUTPUT);
        pinMode(ADC_CLK, OUTPUT);

        while(1){
            analogVal = get_ADC_Result(0);
            Vr = 5 * (double)(analogVal) / 255;
            Rt = 10000 * (double)(Vr) / (5 - (double)(Vr));
            temp = 1 / (((log(Rt/10000)) / 3950)+(1 / (273.15 + 25)));
            cel = temp - 273.15;
            Fah = cel * 1.8 +32;
            printf("Celsius: %.2f C  Fahrenheit: %.2f F\n", cel, Fah);
            delay(100);
        }
        return 0;
    }
**Explication du code**

.. code-block:: c

    #include <math.h>

Il s'agit d'une biblioth√®que num√©rique en C qui d√©clare un ensemble de fonctions 
pour calculer des op√©rations et transformations math√©matiques courantes.

.. code-block:: c

    analogVal = get_ADC_Result(0);

Cette fonction est utilis√©e pour lire la valeur du thermistor.

.. code-block:: c

    Vr = 5 * (double)(analogVal) / 255;
    Rt = 10000 * (double)(Vr) / (5 - (double)(Vr));
    temp = 1 / (((log(Rt/10000)) / 3950)+(1 / (273.15 + 25)));
    cel = temp - 273.15;
    Fah = cel * 1.8 +32;
    printf("Celsius: %.2f C  Fahrenheit: %.2f F\n", cel, Fah);

Ces calculs permettent de convertir les valeurs du thermistor en degr√©s Celsius.

.. code-block:: c

    Vr = 5 * (double)(analogVal) / 255;
    Rt = 10000 * (double)(Vr) / (5 - (double)(Vr));

Ces deux lignes de code calculent la r√©partition de la tension avec la valeur 
analogique lue afin d'obtenir Rt (la r√©sistance du thermistor).

.. code-block:: c

    temp = 1 / (((log(Rt/10000)) / 3950)+(1 / (273.15 + 25)));

Ce code fait r√©f√©rence √† l'insertion de Rt dans la formule 
**T\ K\ =1/(ln(R\ T/R\ N)/B+1/T\ N)** pour obtenir la temp√©rature en Kelvin.

.. code-block:: c

    temp = temp - 273.15;

Conversion de la temp√©rature en Kelvin en degr√©s Celsius.

.. code-block:: c

    Fah = cel * 1.8 +32;

Conversion des degr√©s Celsius en degr√©s Fahrenheit.

.. code-block:: c

    printf("Celsius: %.2f C  Fahrenheit: %.2f F\n", cel, Fah);

Affiche la temp√©rature en degr√©s Celsius et Fahrenheit ainsi que leurs unit√©s √† l'√©cran.

Pour les utilisateurs de Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.2_Thermistor.py

Une fois le code ex√©cut√©, la thermistance d√©tecte la temp√©rature ambiante, 
qui sera affich√©e √† l'√©cran apr√®s le calcul du programme.

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin source du code, comme ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import ADC0834
    import time
    import math

    def init():
        ADC0834.setup()

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            Vr = 5 * float(analogVal) / 255
            Rt = 10000 * Vr / (5 - Vr)
            temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
            Cel = temp - 273.15
            Fah = Cel * 1.8 + 32
            print ('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))
            time.sleep(0.2)

    if __name__ == '__main__':
        init()
        try:
            loop()
        except KeyboardInterrupt:
            ADC0834.destroy()

**Explication du code**

.. code-block:: python

    import math

Il s'agit d'une biblioth√®que num√©rique qui d√©clare un ensemble de fonctions pour 
effectuer des calculs math√©matiques courants.

.. code-block:: python

    analogVal = ADC0834.getResult()

Cette fonction est utilis√©e pour lire la valeur du thermistor.

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)
    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
    Cel = temp - 273.15
    Fah = Cel * 1.8 + 32
    print ('Celsius: %.2f ¬∞C  Fahrenheit: %.2f ‚Ñâ' % (Cel, Fah))

Ces calculs permettent de convertir les valeurs du thermistor en degr√©s Celsius 
et Fahrenheit.

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)

Ces deux lignes de code calculent la r√©partition de la tension avec la valeur 
analogique lue afin d'obtenir Rt (la r√©sistance du thermistor).

.. code-block:: python

    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))

Ce code fait r√©f√©rence √† l'insertion de Rt dans la formule 
**T\ K\ =1/(ln(R\ T/R\ N)/B+1/T\ N)** pour obtenir la temp√©rature en Kelvin.

.. code-block:: python

    temp = temp - 273.15

Conversion de la temp√©rature en Kelvin en degr√©s Celsius.

.. code-block:: python

    Fah = Cel * 1.8 + 32

Conversion des degr√©s Celsius en degr√©s Fahrenheit.

.. code-block:: python

    print ('Celsius: %.2f ¬∞C  Fahrenheit: %.2f ‚Ñâ' % (Cel, Fah))

Affiche les degr√©s Celsius, les degr√©s Fahrenheit et leurs unit√©s √† l'√©cran.

Image du ph√©nom√®ne
-----------------------

.. image:: img/image203.jpeg