.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **Remises sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et tirages au sort** : Participez √† des concours et √† des promotions lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] pour nous rejoindre d√®s aujourd'hui !

1.3.4 Relais
============

Introduction
----------------

Dans cette le√ßon, nous allons apprendre √† utiliser un relais. C'est l'un des 
composants couramment utilis√©s dans les syst√®mes de contr√¥le automatique. 
Lorsque la tension, le courant, la temp√©rature ou la pression atteignent, 
d√©passent ou sont inf√©rieurs √† une valeur pr√©d√©termin√©e, le relais connecte ou 
interrompt le circuit pour contr√¥ler et prot√©ger les √©quipements.

Composants
-----------

.. image:: img/list_1.3.4.png

Principe
----------

**Diode**

Une diode est un composant √©lectronique √† deux bornes qui permet un flux de courant 
unidirectionnel. Elle offre une faible r√©sistance dans le sens du courant et une haute 
r√©sistance dans le sens oppos√©. Les diodes sont principalement utilis√©es pour √©viter 
les dommages aux composants, notamment en raison de la force √©lectromotrice dans les 
circuits polaris√©s.

.. image:: img/image344.png

Les deux bornes d'une diode sont polaris√©es : l'anode (p√¥le positif) et la cathode 
(p√¥le n√©gatif). La cathode est g√©n√©ralement en argent ou comporte une bande color√©e. 
Le courant dans une diode circule de l'anode √† la cathode. Ce comportement est similaire 
√† celui d'une soupape de non-retour. Si une tension plus √©lev√©e est appliqu√©e √† l'anode, 
le courant circule, c'est le biais direct. Si la tension plus √©lev√©e est appliqu√©e √† la 
cathode, le courant ne passe pas, c'est le biais inverse.

**Relais**

Un relais est un dispositif utilis√© pour √©tablir une connexion entre deux ou plusieurs 
points en r√©ponse √† un signal d'entr√©e. En d'autres termes, il assure une isolation entre 
le contr√¥leur et l'appareil, notamment lorsque des dispositifs fonctionnent en courant 
alternatif (AC) ou continu (DC). Les relais sont tr√®s utiles pour contr√¥ler de grandes 
quantit√©s de courant ou de tension √† l'aide de faibles signaux √©lectriques.

Il y a 5 parties dans chaque relais :

**√âlectroaimant** - Il est constitu√© d'un noyau en fer enroul√© de fils. Lorsque 
l'√©lectricit√© passe √† travers, il devient magn√©tique.

**Armature** - Une bande magn√©tique mobile appel√©e armature. Lorsque du courant 
circule, le champ magn√©tique attire l'armature, activant les contacts normalement 
ouverts (N/O) ou ferm√©s (N/C).

**Ressort** - Lorsque le courant ne passe pas dans l'√©lectroaimant, le ressort 
tire l'armature pour que le circuit soit interrompu.

**Jeu de contacts √©lectriques** :
- Normalement ouvert - connect√© lorsque le relais est activ√©, d√©connect√© lorsqu'il 
est inactif.
- Normalement ferm√© - non connect√© lorsque le relais est activ√©, connect√© lorsqu'il 
est inactif.

**Cadre moul√©** - Prot√©g√© par un bo√Ætier en plastique.

**Fonctionnement du relais**

Le principe de fonctionnement est simple. Lorsque le relais est aliment√©, le courant 
circule dans la bobine de commande, ce qui active l'√©lectroaimant. L'armature est alors 
attir√©e et connecte les contacts normalement ouverts, fermant ainsi le circuit. Lors de 
la rupture du circuit, le ressort ram√®ne l'armature vers les contacts normalement ferm√©s, 
interrompant le circuit. Ce processus permet de contr√¥ler l'√©tat d'un circuit de charge.

.. image:: img/image142.jpeg

Sch√©ma
---------

.. image:: img/image345.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image144.png
    :width: 800

Pour les utilisateurs du langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.3.4

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.4_Relay.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, la LED s'allumera. De plus, vous entendrez un ¬´ tic-tac 
¬ª d√ª √† l'ouverture du contact normalement ferm√© et √† la fermeture du contact 
normalement ouvert.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution ou si un message d'erreur appara√Æt : \"wiringPi.h : Aucun fichier ou r√©pertoire de ce type\", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #define RelayPin 0

    int main(void){
        if(wiringPiSetup() == -1){ //si l'initialisation de wiringPi √©choue, affichez un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(RelayPin, OUTPUT);   //d√©finir la sortie GPIO17(GPIO0)
        while(1){
            // Tick
            printf("Relay Open......\n");
            delay(100);
            digitalWrite(RelayPin, LOW);
            delay(1000);
            // Tock
            printf("......Relay Close\n");
            delay(100);
            digitalWrite(RelayPin, HIGH);
            delay(1000);
        }

        return 0;
    }

**Explication du Code**

.. code-block:: c

    digitalWrite(RelayPin, LOW);

Configurez le port I/O √† un niveau bas (0V), ce qui d√©sactive le transistor et 
la bobine n'est pas aliment√©e. Il n'y a donc pas de force √©lectromagn√©tique, le 
relais s'ouvre et la LED ne s'allume pas.

.. code-block:: c

    digitalWrite(RelayPin, HIGH);

Configurez le port I/O √† un niveau haut (5V) pour alimenter le transistor. La bobine 
du relais est aliment√©e, g√©n√©rant une force √©lectromagn√©tique, et le relais se ferme, 
allumant la LED.

Pour les utilisateurs de Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.4_Relay.py

Pendant l'ex√©cution du code, la LED s'allume. De plus, vous entendrez 
un ¬´ tic-tac ¬ª d√ª √† l'ouverture et √† la fermeture du relais.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code 
    ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code 
    source tel que ``davinci-kit-for-raspberry-pi/python``.

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    # D√©finir GPIO17 comme broche de contr√¥le
    relayPin = 17

    # D√©finir une fonction de configuration
    def setup():
        # Configurer le mode GPIO en num√©rotation BCM
        GPIO.setmode(GPIO.BCM)
        # Configurer le mode de relayPin en sortie,
        # avec un niveau initial √† High (3,3V)
        GPIO.setup(relayPin, GPIO.OUT, initial=GPIO.HIGH)

    # D√©finir une fonction principale pour le processus principal
    def main():
        while True:
            print ('Relay open...')
            # Tic
            GPIO.output(relayPin, GPIO.LOW)
            time.sleep(1)
            print ('...Relay close')
            # Tac
            GPIO.output(relayPin, GPIO.HIGH)
            time.sleep(1)

    # D√©finir une fonction destroy pour nettoyer apr√®s la fin du script
    def destroy():
        # √âteindre la LED
        GPIO.output(relayPin, GPIO.HIGH)
        # Lib√©rer les ressources
        GPIO.cleanup()

    # Si ce script est ex√©cut√© directement, ex√©cuter :
    if __name__ == '__main__':
        setup()
        try:
            main()
        # Lorsque 'Ctrl+C' est press√©, le programme enfant
        # destroy() sera ex√©cut√©.
        except KeyboardInterrupt:
            destroy()

**Explication du Code**

.. code-block:: python

    GPIO.output(relayPin, GPIO.LOW)

Configurez les broches du transistor en niveau bas pour ouvrir le relais, et la LED ne s'allume pas.

.. code-block:: python

    time.sleep(1)

Attendre 1 seconde.

.. code-block:: python

    GPIO.output(relayPin, GPIO.HIGH)

Configurez les broches du transistor en niveau haut pour activer le relais, et la LED s'allume.

Image du Ph√©nom√®ne
-----------------------

.. image:: img/image145.jpeg
