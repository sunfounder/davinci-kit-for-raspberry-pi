.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauchen Sie tiefer in Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten ein.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie nach dem Kauf auftretende Probleme und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Tutorials aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und Vorschauen.
    - **Spezielle Rabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und festlichen Aktionen teil.

    üëâ Bereit, mit uns zu entdecken und zu kreieren? Klicken Sie auf [|link_sf_facebook|] und treten Sie noch heute bei!

2.1.2 Schiebeschalter
==============================

Einf√ºhrung
------------

In diesem Projekt lernen wir, wie man einen Schiebeschalter verwendet. √úblicherweise wird der Schiebeschalter auf einer Leiterplatte (PCB) als Netzschalter verl√∂tet, aber hier m√ºssen wir ihn in das Steckbrett einstecken, wodurch er m√∂glicherweise nicht fest sitzt. Wir verwenden ihn auf dem Steckbrett, um seine Funktion zu zeigen.

Komponenten
-------------------

.. image:: ../img/list_2.1.2_slide_switch.png

Schaltplan
-----------------

Verbinden Sie den mittleren Pin des Schiebeschalters mit GPIO17 und zwei LEDs mit den Pins GPIO22 und GPIO27. Wenn Sie den Schalter bet√§tigen, sehen Sie, wie die beiden LEDs abwechselnd aufleuchten.

.. image:: ../img/image305.png

.. image:: ../img/image306.png

Experimentelle Vorgehensweise
-----------------------------------------

**Schritt 1:** Bauen Sie die Schaltung auf.

.. image:: ../img/image161.png

**Schritt 2**: Gehen Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**Schritt 3**: F√ºhren Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo node slide_switch.js

W√§hrend der Code l√§uft, verbinden Sie den Schalter nach links, dann leuchtet die gelbe LED auf; nach rechts, dann leuchtet die rote LED auf.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const slideSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

    slideSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });

**Code Erkl√§rung**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const slideSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

Importieren Sie das pigpio-Modul und erstellen Sie drei Objekte led1, led2 und slideSwitch, um die LEDs led1 und led2 ein- und auszuschalten, indem Sie den Pegel des slideSwitch-IO-Ports lesen.

.. code-block:: js

    slideSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });

Wenn sich der gelesene Pegel des slideSwitch-IO-Ports √§ndert,
schreiben Sie den gleichen Pegel auf led1 und den entgegengesetzten Pegel auf led2.

Ph√§nomenbild
------------------

.. image:: ../img/image162.jpeg
