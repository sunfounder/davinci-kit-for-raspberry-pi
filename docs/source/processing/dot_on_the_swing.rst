.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales lors des p√©riodes de f√™te.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Point sur le Balan√ßoire
===============================

Dans ce projet, 3 boutons sont connect√©s : l'un pour changer la taille du point, un autre pour changer la position et le dernier pour changer la couleur. Si vous appuyez sur les 3 boutons en m√™me temps, vous obtiendrez un point qui se balance et dont la couleur varie.

.. image:: img/dancing_dot.png

**C√¢blage**

.. image:: img/circuit_dancing_dot.png

**Code**

.. code-block:: arduino

    import processing.io.*;

    // D√©finir une instance de l'objet Dot
    Dot myDot;

    // D√©finir les broches qui seront lues lors de l'appui sur les boutons
    int[] pins = { 18, 23, 24 };

    void setup() {
        size(400, 400);
        // Changer le mode de couleur en HSB
        colorMode(HSB, 360, 100, 100);
        noStroke();

        for (int i = 0; i < pins.length; i++) {
            GPIO.pinMode(pins[i], GPIO.INPUT_PULLUP);
        }

        // Cr√©er un point au centre de l'√©cran 
        myDot = new Dot(width / 2, height / 2, 100, 255);
    }

    void draw() {
        background(0); 

        // Modifier les attributs du point en fonction des boutons press√©s
        if (GPIO.digitalRead(pins[0]) == GPIO.LOW) {myDot.setSize();} 
        if (GPIO.digitalRead(pins[1]) == GPIO.LOW) {myDot.setPosition();} 
        if (GPIO.digitalRead(pins[2]) == GPIO.LOW) {myDot.setColor();} 

        // Mettre √† jour l'√©tat du point
        myDot.update();
        // Et l'afficher √† l'√©cran
        myDot.show();
    }

    class Dot { 

        float initX;
        float initY;
        float currentX;
        float currentY;
        int positionRange = 60;

        float initSize;
        float currentSize;
        int sizeRange = 50;

        int initColor;
        int currentColor;
        int ColorRange = 80;

        float timer = 0.0;
        float speed = 0.06;

        Dot(float x, float y, float s, int c) {
            initX = x;
            initY = y;
            currentX = x;
            currentY = y;

            initSize = s;
            currentSize = s;

            initColor = c;
            currentColor = c;
        }

        void setSize() {
            currentSize = initSize + sizeRange * sin( timer );
        }

        void setPosition() {
            currentY = initY + positionRange * cos( timer *2);
        }

        void setColor() {
            currentColor = int(initColor + ColorRange * sin( timer ));
        }

        void update() {
            timer += speed;
        }

        void show() {
            fill(currentColor, 100, 100); 
            ellipse(currentX, currentY, currentSize, currentSize);
        }
    }

**Comment √ßa fonctionne ?**

Au lieu de dessiner le point directement, nous cr√©ons ici une classe ``Dot``.
Ensuite, nous d√©clarons un objet (dans ce cas, ``myDot``).

C'est un moyen simple de dessiner des points avec plusieurs propri√©t√©s identiques.
Par exemple, si nous ajoutons trois fonctions au point dans ce projet ‚Äî changer la taille, changer la position et changer la couleur ‚Äî alors chaque point que nous d√©clarons aura les m√™mes fonctions.
Nous pouvons utiliser le m√™me bouton pour leur faire accomplir la m√™me action, ou bien utiliser des boutons diff√©rents pour contr√¥ler chaque point s√©par√©ment.

Utiliser des **classes** rend votre programme plus propre, plus puissant et plus flexible.

`Class (computer programming) - Wikipedia <https://en.wikipedia.org/wiki/Class_(computer_programming)>`_

Regardons maintenant de plus pr√®s la classe ``Dot``.

.. code-block:: arduino

    Dot(float x, float y, float s, int c)

Lors de la d√©claration, elle n√©cessite quatre param√®tres : les coordonn√©es X et Y de la position, la taille et la couleur (ici d√©finie en mode `HSB color mode <https://en.wikipedia.org/wiki/HSL_and_HSV>`_).

Chaque param√®tre est assign√© √† deux ensembles de valeurs (valeur initiale et valeur actuelle).

.. code-block:: arduino

    float initX;
    float initY;
    float currentX;
    float currentY;
    int positionRange = 60;

    float initSize;
    float currentSize;
    int sizeRange = 50;

    int initColor;
    int currentColor;
    int ColorRange = 80;

En plus des valeurs initiales et actuelles, il existe un ensemble de valeurs de plage. La valeur initiale est utilis√©e pour d√©terminer l'√©tat initial du point (d√©termin√© par les param√®tres d'entr√©e), tandis que la valeur actuelle changera dans cette plage pour faire bouger le point.

Ainsi, √† l'exception de la valeur de l'axe X, les valeurs actuelles des autres trois param√®tres sont calcul√©es comme suit :

.. code-block:: arduino

    void setSize() {
        currentSize = initSize + sizeRange * sin( timer );
    }

    void setPosition() {
        currentY = initY + positionRange * cos( timer *2);
    }

    void setColor() {
        currentColor = int(initColor + ColorRange * sin( timer ));
    }


Si vous √™tes familier avec les fonctions trigonom√©triques, il ne devrait pas √™tre difficile de comprendre les notions de `sine and cosine <https://en.wikipedia.org/wiki/Sine>`_, qui produisent un changement p√©riodique et fluide (de -1 √† 1) de la valeur actuelle du point.

Nous devons √©galement ajouter une graine, ``timer``, pour g√©rer cette variation p√©riodique. Elle s'incr√©mente d'une valeur fixe dans la m√©thode ``update()`` et est appel√©e dans ``draw()``.

.. code-block:: arduino

    void update() {
        timer += speed;
    }

Enfin, le point est affich√© selon la valeur actuelle en utilisant la m√©thode ``show()``, qui est √©galement appel√©e dans ``draw()``.

.. code-block:: arduino

    void show() {
        fill(currentColor, 100, 100); 
        ellipse(currentX, currentY, currentSize, currentSize);
    }

**Et ensuite ?**

Apr√®s avoir ma√Ætris√© l'utilisation des classes, vous pouvez d√©j√† dessiner plusieurs points avec les m√™mes propri√©t√©s. Alors pourquoi ne pas essayer quelque chose de plus sophistiqu√© ? Par exemple, pourquoi ne pas dessiner un syst√®me binaire stable ou cr√©er un jeu de type ¬´ DUET ¬ª ?


Pour plus d'informations, consultez la `Processing Reference <https://processing.org/reference/>`_.
