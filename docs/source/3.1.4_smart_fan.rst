.. note::

    Â¡Hola! Bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Profundiza en el mundo de Raspberry Pi, Arduino y ESP32 junto con otros entusiastas.

    **Â¿Por quÃ© unirte?**

    - **Soporte experto**: Resuelve problemas posventa y desafÃ­os tÃ©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Accede a anuncios de nuevos productos y vistas previas exclusivas.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos mÃ¡s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones durante las festividades.

    ðŸ‘‰ Â¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y Ãºnete hoy mismo.

3.1.4 Ventilador Inteligente
=============================

IntroducciÃ³n
----------------

En este curso, usaremos motores, botones y termistores para crear un ventilador 
inteligente manual y automÃ¡tico, con velocidad de viento ajustable.


Componentes
----------------
.. image:: img/list_Smart_Fan.png
    :align: center

Diagrama EsquemÃ¡tico
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
============ ======== ======== ===

.. image:: img/Schematic_three_one4.png
    :width: 500
    :align: center

Procedimiento Experimental
-----------------------------

**Paso 1:** Construye el circuito.

.. image:: img/image245.png
   :alt: Smart Fan_bb
   :width: 800
   :align: center

.. note::
    El mÃ³dulo de alimentaciÃ³n puede utilizar una baterÃ­a de 9V con el 
    conector de baterÃ­a de 9V incluido en el kit. Inserta el capuchÃ³n 
    del mÃ³dulo de energÃ­a en las tiras de bus de 5V de la protoboard.

.. image:: img/image118.jpeg
   :alt: \_MG_2084
   :width: 2.80694in
   :height: 0.94375in
   :align: center

**Para Usuarios de Lenguaje C**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Paso 2**: Ingresa en la carpeta del cÃ³digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.4/

**Paso 3**: Compila el cÃ³digo.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.4_SmartFan.c -lwiringPi -lm

**Paso 4**: Ejecuta el archivo ejecutable anterior.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Al ejecutar el cÃ³digo, inicia el ventilador presionando el botÃ³n. Cada 
vez que presiones, se ajustarÃ¡ una velocidad hacia arriba o hacia abajo. 
Hay **5** niveles de velocidad: **0~4**. Al establecer el nivel de velocidad 
en el 4\ :sup:`to` y presionar el botÃ³n, el ventilador dejarÃ¡ de funcionar 
con velocidad de viento **0**.

.. note::

    Si no funciona despuÃ©s de ejecutarlo o aparece el mensaje de error: \"wiringPi.h: No such file or directory\", consulta :ref:`C code is not working?`.

Una vez que la temperatura sube o baja mÃ¡s de 2â„ƒ, la velocidad se ajusta 
automÃ¡ticamente a un nivel mÃ¡s rÃ¡pido o mÃ¡s lento.


**ExplicaciÃ³n del CÃ³digo**

.. code-block:: c

    intÂ temperture(){
    Â Â Â Â unsignedÂ charÂ analogVal;
    Â Â Â Â doubleÂ Vr,Â Rt,Â temp,Â cel,Â Fah;
    Â Â Â Â analogValÂ =Â get_ADC_Result(0);
    Â Â Â Â VrÂ =Â 5Â *Â (double)(analogVal)Â /Â 255;
    Â Â Â Â RtÂ =Â 10000Â *Â (double)(Vr)Â /Â (5Â -Â (double)(Vr));
    Â Â Â Â tempÂ =Â 1Â /Â (((log(Rt/10000))Â /Â 3950)+(1Â /Â (273.15Â +Â 25)));
    Â Â Â Â celÂ =Â tempÂ -Â 273.15;
    Â Â Â Â FahÂ =Â celÂ *Â 1.8Â +32;
    Â Â Â Â intÂ t=cel;
    Â Â Â Â returnÂ t;
    }

La funciÃ³n temperture() convierte los valores del termistor leÃ­dos por el 
ADC0834 en valores de temperatura. Consulta :ref:`2.2.2 Thermistor` para obtener mÃ¡s detalles.

.. code-block:: c

    intÂ motor(intÂ level){
    Â Â Â Â if(level==0){
    Â Â Â Â Â Â Â Â digitalWrite(MotorEnable,LOW);
    Â Â Â Â Â Â Â Â returnÂ 0;
    Â Â Â Â }
    Â Â Â Â ifÂ (level>=4){
    Â Â Â Â Â Â Â Â levelÂ =4;
    Â Â Â Â }
    Â Â Â Â digitalWrite(MotorEnable,HIGH);
    Â Â Â Â softPwmWrite(MotorPin1,Â level*25);
    Â Â Â Â returnÂ level;Â Â Â Â 
    }

Esta funciÃ³n controla la velocidad de rotaciÃ³n del motor. El rango de **nivel** 
es **0-4** (el nivel **0** detiene el motor). Cada ajuste de nivel representa un 
cambio del **25%** en la velocidad del viento.

.. code-block:: c

    intÂ main(void)
    {
    Â Â Â Â setup();
    Â Â Â Â intÂ currentState,lastState=0;
    Â Â Â Â intÂ levelÂ =Â 0;
    Â Â Â Â intÂ currentTemp,markTemp=0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â currentState=digitalRead(BtnPin);
    Â Â Â Â Â Â Â Â currentTemp=temperture();
    Â Â Â Â Â Â Â Â ifÂ (currentTemp<=0){continue;}
    Â Â Â Â Â Â Â Â ifÂ (currentState==1&&lastState==0){
    Â Â Â Â Â Â Â Â Â Â Â Â level=(level+1)%5;
    Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTemp;
    Â Â Â Â Â Â Â Â Â Â Â Â delay(500);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â Â Â Â Â ifÂ (level!=0){
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (currentTemp-markTemp<=-2){
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â level=level-1;
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTemp;
    Â Â Â Â Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (currentTemp-markTemp>=2){
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â level=level+1;
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTemp;
    Â Â Â Â Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â level=motor(level);
    Â Â Â Â }
    Â Â Â Â returnÂ 0;
    }

La funciÃ³n **main()** contiene todo el proceso del programa, como se muestra a continuaciÃ³n:

1) Leer constantemente el estado del botÃ³n y la temperatura actual.

2) Cada pulsaciÃ³n incrementa el nivel en **+1** y, al mismo tiempo, se actualiza 
la temperatura. El **nivel** varÃ­a entre **1~4**.

3) Cuando el ventilador estÃ¡ en funcionamiento (el nivel es **diferente de 0**), 
se realiza una detecciÃ³n de temperatura. Un cambio de **2â„ƒ\ +** provoca el aumento o disminuciÃ³n del nivel.

4) El motor ajusta su velocidad de rotaciÃ³n segÃºn el **nivel**.

**Para Usuarios de Python**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Paso 2**: Ingresar en la carpeta del cÃ³digo.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/python

**Paso 3**: Ejecutar.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 3.1.4_SmartFan.py

Al ejecutar el cÃ³digo, inicia el ventilador presionando el botÃ³n. Cada vez 
que presionas, se ajusta un nivel de velocidad hacia arriba o hacia abajo. 
Hay **5** niveles de velocidad: **0~4**. Cuando se ajusta al 4\ :sup:`to` 
nivel y se presiona el botÃ³n, el ventilador se detiene con velocidad de 
viento **0**.

Una vez que la temperatura sube o baja mÃ¡s de 2â„ƒ, la velocidad se ajusta 
automÃ¡ticamente a un nivel superior o inferior.

**CÃ³digo**

.. note::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el cÃ³digo a continuaciÃ³n. Sin embargo, antes de hacerlo, debes dirigirte a la ruta de cÃ³digo fuente, como ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time
    import ADC0834
    import math

    # Configurar pines
    MotorPin1   = 5
    MotorPin2   = 6
    MotorEnable = 13
    BtnPin   = 22

    def setup():
        global p_M1,p_M2
        ADC0834.setup()
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(MotorPin1, GPIO.OUT)
        GPIO.setup(MotorPin2, GPIO.OUT)
        p_M1=GPIO.PWM(MotorPin1,2000)
        p_M2=GPIO.PWM(MotorPin2,2000)
        p_M1.start(0)
        p_M2.start(0)
        GPIO.setup(MotorEnable, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(BtnPin, GPIO.IN)

    def temperature():
        analogVal = ADC0834.getResult()
        Vr = 5 * float(analogVal) / 255
        Rt = 10000 * Vr / (5 - Vr)
        temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
        Cel = temp - 273.15
        Fah = Cel * 1.8 + 32
        return Cel

    def motor(level):
        if level == 0:
            GPIO.output(MotorEnable, GPIO.LOW)
            return 0
        if level>=4:
            level = 4
        GPIO.output(MotorEnable, GPIO.HIGH)
        p_M1.ChangeDutyCycle(level*25)
        return level


    def main():
        lastState=0
        level=0
        markTemp = temperature()
        while True:
            currentState =GPIO.input(BtnPin)
            currentTemp=temperature()
            if currentState == 1 and lastState == 0:
                level=(level+1)%5
                markTemp = currentTemp
                time.sleep(0.5)
            lastState=currentState
            if level!=0:
                if currentTemp-markTemp <= -2:
                    level = level -1
                    markTemp=currentTemp            
                if currentTemp-markTemp >= 2:
                    level = level +1
                    markTemp=currentTemp             
            level = motor(level)
            

    def destroy():
        GPIO.output(MotorEnable, GPIO.LOW)
        p_M1.stop()
        p_M2.stop()
        GPIO.cleanup()    

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**ExplicaciÃ³n del CÃ³digo**

.. code-block:: python

    defÂ temperature():
    Â Â Â Â analogValÂ =Â ADC0834.getResult()
    Â Â Â Â VrÂ =Â 5Â *Â float(analogVal)Â /Â 255
    Â Â Â Â RtÂ =Â 10000Â *Â VrÂ /Â (5Â -Â Vr)
    Â Â Â Â tempÂ =Â 1/(((math.log(RtÂ /Â 10000))Â /Â 3950)Â +Â (1Â /Â (273.15+25)))
    Â Â Â Â CelÂ =Â tempÂ -Â 273.15
    Â Â Â Â FahÂ =Â CelÂ *Â 1.8Â +Â 32
    Â Â Â Â returnÂ Cel

La funciÃ³n **temperature()** convierte los valores del termistor leÃ­dos 
por **ADC0834** en valores de temperatura. Consulte :ref:`2.2.2 Termistor` 
para obtener mÃ¡s detalles.

.. code-block:: python

    defÂ motor(level):
    Â Â Â Â ifÂ levelÂ ==Â 0:
    Â Â Â Â Â Â Â Â GPIO.output(MotorEnable,Â GPIO.LOW)
    Â Â Â Â Â Â Â Â returnÂ 0
    Â Â Â Â ifÂ level>=4:
    Â Â Â Â Â Â Â Â levelÂ =Â 4
    Â Â Â Â GPIO.output(MotorEnable,Â GPIO.HIGH)
    Â Â Â Â p_M1.ChangeDutyCycle(level*25)
    Â Â Â Â returnÂ level

Esta funciÃ³n controla la velocidad de rotaciÃ³n del motor. El rango del **nivel** 
es **0-4** (nivel **0** detiene el motor). Cada ajuste de nivel representa un 
cambio de **25%** en la velocidad del ventilador.

.. code-block:: python

    defÂ main():
    Â Â Â Â lastState=0
    Â Â Â Â level=0
    Â Â Â Â markTempÂ =Â temperature()
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â currentStateÂ =GPIO.input(BtnPin)
    Â Â Â Â Â Â Â Â currentTemp=temperature()
    Â Â Â Â Â Â Â Â ifÂ currentStateÂ ==Â 1Â andÂ lastStateÂ ==Â 0:
    Â Â Â Â Â Â Â Â Â Â Â Â level=(level+1)%5
    Â Â Â Â Â Â Â Â Â Â Â Â markTempÂ =Â currentTemp
    Â Â Â Â Â Â Â Â Â Â Â Â time.sleep(0.5)
    Â Â Â Â Â Â Â Â lastState=currentState
    Â Â Â Â Â Â Â Â ifÂ level!=0:
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ currentTemp-markTempÂ <=Â -2:
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â levelÂ =Â levelÂ -1
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTempÂ Â Â Â Â Â Â Â Â Â Â Â 
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ currentTemp-markTempÂ >=Â 2:
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â levelÂ =Â levelÂ +1
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTempÂ Â Â Â Â Â Â Â Â Â Â Â Â 
    Â Â Â Â Â Â Â Â levelÂ =Â motor(level)


La funciÃ³n **main()** contiene el proceso completo del programa como se muestra:

1) Leer constantemente el estado del botÃ³n y la temperatura actual.

2) Cada pulsaciÃ³n incrementa el nivel en **+1** y al mismo tiempo, 
   se actualiza la temperatura. El **nivel** varÃ­a entre **1~4**.

3) Cuando el ventilador estÃ¡ en funcionamiento (el nivel es **diferente de 0**), 
   la temperatura se encuentra bajo monitoreo. Un cambio de **2â„ƒ+** provoca un aumento o disminuciÃ³n en el nivel.

4) El motor ajusta su velocidad de rotaciÃ³n segÃºn el **nivel**.

Imagen del FenÃ³meno
------------------------

.. image:: img/image246.png
   :align: center