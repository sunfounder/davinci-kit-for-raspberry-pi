.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions √† l'occasion des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.2.5 Module de Capteur Ultrasonique
=======================================

Introduction
---------------

Le capteur ultrasonique utilise des ultrasons pour d√©tecter avec pr√©cision des objets et mesurer les distances. Il √©met des ondes ultrasonores et les convertit en signaux √©lectroniques.

Composants
-------------

.. image:: img/list_2.2.5.png


Principe
-----------

**Ultrason**

Le module de t√©l√©m√©trie ultrasonique permet une mesure sans contact de 
2 cm √† 400 cm, avec une pr√©cision pouvant atteindre 3 mm. Il assure une 
stabilit√© du signal jusqu'√† 5 m, puis celui-ci s'affaiblit progressivement 
au-del√† de cette distance, jusqu'√† dispara√Ætre au niveau des 7 m.

Le module comprend des √©metteurs ultrasoniques, un r√©cepteur et un circuit de 
contr√¥le. Les principes de base sont les suivants :

1. Utiliser une bascule IO pour g√©n√©rer un signal de niveau haut pendant au 
moins 10 ¬µs.

2. Le module envoie automatiquement huit impulsions √† 40 kHz et d√©tecte s'il y 
a un retour de signal.

3. Si le signal est de retour, la dur√©e du niveau haut de la sortie IO correspond 
au temps √©coul√© entre l'√©mission de l'onde ultrasonique et sa r√©ception. La distance 
est calcul√©e selon la formule suivante : distance = (dur√©e du niveau haut x vitesse 
du son (340 m/s)) / 2.

.. image:: img/image217.png
    :width: 200


.. image:: img/image328.png
    :width: 500


Le sch√©ma de synchronisation est illustr√© ci-dessous. Il vous suffit de fournir une 
impulsion de 10 ¬µs pour l'entr√©e du d√©clencheur afin de d√©marrer la t√©l√©m√©trie. 
Ensuite, le module √©mettra une rafale d'ultrasons de 8 cycles √† 40 kHz et augmentera 
son √©cho. Vous pouvez calculer la distance en mesurant l'intervalle de temps entre 
l'envoi du signal de d√©clenchement et la r√©ception de l'√©cho.

Formule : us / 58 = centim√®tres ou us / 148 = pouces ; ou : distance = temps du niveau 
haut \* vitesse (340 m/s) / 2. Il est conseill√© d'utiliser un cycle de mesure sup√©rieur 
√† 60 ms pour √©viter les collisions entre le signal de d√©clenchement et le signal de retour.

.. image:: img/image218.png
    :width: 800



Sch√©ma de c√¢blage
--------------------

.. image:: img/image329.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image220.png
    :width: 800


**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.5/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.5_Ultrasonic.c -lwiringPi
**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Une fois le code ex√©cut√©, le module de capteur ultrasonique d√©tecte la distance 
entre l'obstacle situ√© en face de lui et le module lui-m√™me, puis la valeur de 
cette distance est affich√©e √† l'√©cran.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution ou s'il y a un message d'erreur 
    indiquant: \"wiringPi.h: Aucun fichier ou r√©pertoire de ce type ¬ª, veuillez 
    vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <sys/time.h>

    #define Trig    4
    #define Echo    5

    void ultraInit(void)
    {
        pinMode(Echo, INPUT);
        pinMode(Trig, OUTPUT);
    }

    float disMeasure(void)
    {
        struct timeval tv1;
        struct timeval tv2;
        long time1, time2;
        float dis;

        digitalWrite(Trig, LOW);
        delayMicroseconds(2);

        digitalWrite(Trig, HIGH);
        delayMicroseconds(10);      
        digitalWrite(Trig, LOW);
                                  
        while(!(digitalRead(Echo) == 1));   
        gettimeofday(&tv1, NULL);           

        while(!(digitalRead(Echo) == 0));   
        gettimeofday(&tv2, NULL);           

        time1 = tv1.tv_sec * 1000000 + tv1.tv_usec;   
        time2  = tv2.tv_sec * 1000000 + tv2.tv_usec;

        dis = (float)(time2 - time1) / 1000000 * 34000 / 2;  

        return dis;
    }

    int main(void)
    {
        float dis;
        if(wiringPiSetup() == -1){ // En cas d'√©chec d'initialisation de wiringPi, afficher un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }

        ultraInit();
        
        while(1){
            dis = disMeasure();
            printf("%0.2f cm\n\n",dis);
            delay(300);
        }

        return 0;
    }

**Explication du Code**

.. code-block:: c

    void ultraInit(void)
    {
        pinMode(Echo, INPUT);
        pinMode(Trig, OUTPUT);
    }

Initialise les broches du capteur ultrasonique ; en m√™me temps, d√©finit Echo 
comme entr√©e et Trig comme sortie.

.. code-block:: c

    float disMeasure(void){};

Cette fonction permet de mesurer la distance d√©tect√©e par le capteur ultrasonique 
en calculant le temps de retour de l'√©cho.

.. code-block:: c

    struct timeval tv1;
    struct timeval tv2;

`struct timeval` est une structure utilis√©e pour stocker l'heure actuelle. 
La structure compl√®te est la suivante :

.. code-block:: c

    struct timeval
    {
    __time_t tv_sec;        /* Secondes */
    __suseconds_t tv_usec;  /* Microsecondes */
    };

Ici, `tv_sec` repr√©sente les secondes √©coul√©es depuis l'√àre Unix lors de 
la cr√©ation de `struct timeval`. `tv_usec` correspond aux microsecondes, 
soit une fraction de seconde.

.. code-block:: c

    digitalWrite(Trig, HIGH);
    delayMicroseconds(10);     
    digitalWrite(Trig, LOW);

Envoie une impulsion ultrasonore de 10 ¬µs.

.. code-block:: c

    while(!(digitalRead(Echo) == 1));
    gettimeofday(&tv1, NULL);

Cette boucle vide est utilis√©e pour s'assurer qu'au moment de l'envoi du 
signal de d√©clenchement, il n'y a pas de signal d'√©cho parasite, puis pour 
obtenir l'heure actuelle.

.. code-block:: c

    while(!(digitalRead(Echo) == 0)); 
    gettimeofday(&tv2, NULL);

Cette boucle vide est utilis√©e pour s'assurer que l'√©tape suivante n'est 
effectu√©e que lorsque le signal d'√©cho est re√ßu, puis pour obtenir √† nouveau 
l'heure actuelle.

.. code-block:: c

    time1 = tv1.tv_sec * 1000000 + tv1.tv_usec;
    time2  = tv2.tv_sec * 1000000 + tv2.tv_usec;

Convertit le temps stock√© par `struct timeval` en microsecondes compl√®tes.

.. code-block:: c

    dis = (float)(time2 - time1) / 1000000 * 34000 / 2;  

La distance est calcul√©e √† partir de l'intervalle de temps et de la vitesse de 
propagation du son. La vitesse du son dans l'air est de 34000 cm/s.
