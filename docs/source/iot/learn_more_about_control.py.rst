.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez au c≈ìur des projets avec Raspberry Pi, Arduino et ESP32 aux c√¥t√©s d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Obtenez un acc√®s anticip√© aux nouvelles annonces de produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et tirages au sort** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t(e) √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _control_py:

Learn More about ``control.py``
====================================

Afin de mieux comprendre les projets √† venir, examinons le code exemple officiel fourni par Cloud4RPi.

.. note::

    Veuillez compl√©ter la section pr√©c√©dente :ref:`Quick Guide on Cloud4RPi` avant de consulter cette partie.

Ouvrez le fichier ``control.py``.

.. raw:: html

   <run></run>

.. code-block:: 

    cd cloud4rpi-raspberrypi-python
    sudo nano control.py

Cloud4RPi attribue un **token de p√©riph√©rique** pour chaque appareil, et vous devez renseigner la variable DEVICE_TOKEN avec le bon token pour connecter le p√©riph√©rique correspondant.

.. code-block:: python

    DEVICE_TOKEN = '556UfPaRw6r6rDKYfzx5Nd1jd'

``variables`` est un dictionnaire √† deux dimensions, et la valeur correspondant √† chacune de ses cl√©s est √©galement un dictionnaire.

Les cl√©s du dictionnaire ``variables`` sont : ``'Room Temp'``, ``'LED On'``, ``'CPU Temp'``, ``'STATUS'``, ``'Location'``, qui correspondent aux donn√©es affich√©es sur les widgets du tableau de bord de contr√¥le.

La valeur de chaque cl√© dans le dictionnaire ``variables`` est elle-m√™me un dictionnaire, dont les cl√©s sont identiques, o√π la valeur de la cl√© ``'bind'`` est une fonction capable de retourner le contenu transmis, et ``'type'`` est le type de donn√©es du contenu transmis (``'numeric'`` pour un type num√©rique, ``'string'`` pour une cha√Æne de caract√®res, ``'bool'`` pour un bool√©en, et ``'location'`` pour une liste contenant deux dictionnaires).

Gr√¢ce √† l'analyse du dictionnaire ``variables``, nous comprenons que Cloud4RPi lit les cl√©s du dictionnaire et affiche la valeur correspondante dans le tableau de bord. De toute √©vidence, nous ne pouvons pas modifier les cl√©s de ce dictionnaire, mais nous pouvons changer la valeur associ√©e √† une cl√© (la valeur de ``'bind'``) pour que les widgets affichent le contenu souhait√©.

Par exemple, si nous souhaitons envoyer des valeurs d'humidit√© √† Cloud4RPi, nous ne pouvons pas ajouter une nouvelle cl√© dans le dictionnaire ``variables``, mais nous pouvons r√©utiliser une cl√© existante, telle que ``'Room Temp'``, puis √©crire une fonction qui retourne la valeur d'humidit√© dans la cl√© ``'bind'`` correspondante.

.. code-block:: python

    variables = {
        'Room Temp': {
            'type': 'numeric' if ds_sensors else 'string',
            'bind': ds_sensors[0] if ds_sensors else sensor_not_connected
        },
        'LED On': {
            'type': 'bool',
            'value': False,
            'bind': led_control
        },
        'CPU Temp': {
            'type': 'numeric',
            'bind': rpi.cpu_temp
        },
        'STATUS': {
            'type': 'string',
            'bind': listen_for_events
        },
        'Location': {
            'type': 'location',
            'bind': get_location
        }

Le dictionnaire ``vdiagnostics`` stocke les informations sur le Raspberry Pi et est utilis√© pour v√©rifier et pr√©venir les mauvaises connexions.

.. code-block:: python

    vdiagnostics = {
        'CPU Temp': rpi.cpu_temp,
        'IP Address': rpi.ip_address,
        'Host': rpi.host_name,
        'Operating System': rpi.os_name,
        'Client Version:': cloud4rpi.__version__,
    }
