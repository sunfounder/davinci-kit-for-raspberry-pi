.. note::

    Ciao, benvenuto nella Community su Facebook per gli appassionati di SunFounder Raspberry Pi, Arduino e ESP32! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **PerchÃ© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con lâ€™aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci dei nuovi prodotti e anteprime esclusive.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti piÃ¹ recenti.
    - **Promozioni e Giveaway Festivi**: Partecipa a concorsi e promozioni in occasione delle festivitÃ .

    ðŸ‘‰ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

3.1.6 Controllo del Movimento
==================================

Introduzione
-----------------

In questa lezione, realizzeremo un semplice dispositivo di rilevamento e 
controllo del movimento. Lâ€™MPU6050 sarÃ  utilizzato come sensore e il motore 
passo-passo come dispositivo controllato. Montando lâ€™MPU6050 su un guanto, 
potrai controllare il motore passo-passo ruotando il polso.

Componenti
------------

.. image:: img/list_Motion_Control.png
    :align: center

Schema di Collegamento
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: img/Schematic_three_one6.png
   :align: center

Procedure Sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: img/image251.png
   :width: 800
   :align: center

**Passo 2**: Accedi alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.6/

**Passo 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.6_MotionControl.c -lwiringPi -lm

**Passo 4**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Quando il codice Ã¨ in esecuzione, se lâ€™angolo di inclinazione di **mpu6050** 
sullâ€™asse Y Ã¨ superiore a **45Â°**, il motore passo-passo ruota in senso antiorario; 
se Ã¨ inferiore a **-45Â°**, il motore ruota in senso orario.

.. note::

    Se non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`Il codice C non funziona?`.

**Spiegazione del Codice**

.. code-block:: c

    doubleÂ mpu6050(){
    Â Â Â Â acclXÂ =Â read_word_2c(0x3B);
    Â Â Â Â acclYÂ =Â read_word_2c(0x3D);
    Â Â Â Â acclZÂ =Â read_word_2c(0x3F);
    Â Â Â Â acclX_scaledÂ =Â acclXÂ /Â 16384.0;
    Â Â Â Â acclY_scaledÂ =Â acclYÂ /Â 16384.0;
    Â Â Â Â acclZ_scaledÂ =Â acclZÂ /Â 16384.0;
    Â Â Â Â doubleÂ angle=get_y_rotation(acclX_scaled,Â acclY_scaled,Â acclZ_scaled);
    Â Â Â Â returnÂ angle;
    }

La funzione mpu6050 calcola lâ€™angolo di inclinazione nella direzione dellâ€™asse Y.

.. code-block:: c

    voidÂ rotary(charÂ direction){
    Â Â Â Â if(directionÂ ==Â 'c'){
    Â Â Â Â Â Â Â Â for(intÂ j=0;j<4;j++){
    Â Â Â Â Â Â Â Â Â Â Â Â for(intÂ i=0;i<4;i++)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {digitalWrite(motorPin[i],0x99>>jÂ &Â (0x08>>i));}
                delayMicroseconds(stepSpeed);
            }        
        }
    Â Â Â Â elseÂ if(directionÂ =='a'){
    Â Â Â Â Â Â Â Â for(intÂ j=0;j<4;j++){
    Â Â Â Â Â Â Â Â Â Â Â Â for(intÂ i=0;i<4;i++)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {digitalWrite(motorPin[i],0x99<<jÂ &Â (0x80>>i));}
                delayMicroseconds(stepSpeed);
            }   
        }
    }

Se il **tasto** della direzione ricevuto Ã¨ **\'c\'**, il motore passo-passo 
ruota in senso orario; se il **tasto** Ã¨ **\'a\'**, il motore ruota in senso 
antiorario. Consulta :ref:`1.3.3 Motore Passo-Passo` per ulteriori dettagli 
sul calcolo della direzione di rotazione del motore passo-passo.

.. code-block:: c

    intÂ main()
    {
        setup();
    Â Â Â Â doubleÂ angle;
    Â Â Â Â while(1)Â {
    Â Â Â Â Â Â Â Â angleÂ =Â mpu6050();
    Â Â Â Â Â Â Â Â ifÂ (angleÂ >=45){rotary('a');}
    Â Â Â Â Â Â Â Â elseÂ ifÂ (angle<=-45){rotary('c');}
        }
    Â Â Â Â returnÂ 0;
    }

La funzione **main()** legge lâ€™angolo di inclinazione nella direzione dellâ€™asse 
Y da **mpu6050** e, se Ã¨ maggiore di **45Â°**, il motore passo-passo ruota in 
senso antiorario; se Ã¨ minore di **-45Â°**, il motore ruota in senso orario.

