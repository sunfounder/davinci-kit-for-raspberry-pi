.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l‚Äôunivers du Raspberry Pi, de l‚ÄôArduino et de l‚ÄôESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d‚Äôexperts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre et Partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d‚Äôun acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res exclusives.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions festives et √† des concours pour gagner des cadeaux.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

.. _py_pi5_welcome:

3.1.2 Bienvenue
===============================

Introduction
----------------

Dans ce projet, nous utiliserons un capteur PIR pour d√©tecter les mouvements des 
pi√©tons et utiliserons des servos, une LED et un buzzer pour simuler le fonctionnement 
d‚Äôune porte automatique de magasin. Lorsque le pi√©ton entre dans la zone de d√©tection 
du PIR, le voyant s‚Äôallume, la porte s‚Äôouvre et le buzzer joue une m√©lodie d‚Äôaccueil.


Composants n√©cessaires
------------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/4.1.8_welcome_list.png
    :width: 800
    :align: center

.. Il est plus pratique d‚Äôacheter un kit complet, voici le lien :

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Nom	
..         - ARTICLES DANS CE KIT
..         - LIEN
..     *   - Kit Raphael
..         - 337
..         - |link_Raphael_kit|

.. Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - INTRODUCTION AUX COMPOSANTS
..         - LIEN D'ACHAT

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`led`
..         - |link_led_buy|
..     *   - :ref:`pir`
..         - \-
..     *   - :ref:`servo`
..         - |link_servo_buy|
..     *   - :ref:`Buzzer`
..         - |link_passive_buzzer_buy|
..     *   - :ref:`transistor`
..         - |link_transistor_buy|


Sch√©ma de c√¢blage
---------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.8_welcome_schematic.png
   :align: center

Proc√©dure exp√©rimentale
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/4.1.8_welcome_circuit.png
    :align: center

**√âtape 2 :** Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le fichier.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.2_Welcome.py

Une fois le code ex√©cut√©, si le capteur PIR d√©tecte le passage de quelqu‚Äôun, 
la porte s‚Äôouvre automatiquement (simul√©e par le servo), le voyant s‚Äôallume et 
la m√©lodie de la sonnette retentit. Apr√®s la m√©lodie, le syst√®me fermera 
automatiquement la porte, √©teindra le voyant et attendra le passage de la 
prochaine personne.

Il y a deux potentiom√®tres sur le module PIR : l‚Äôun ajuste la sensibilit√© et 
l‚Äôautre la distance de d√©tection. Pour optimiser le fonctionnement du module PIR, 
tournez-les tous les deux dans le sens inverse des aiguilles d'une montre jusqu'√† la but√©e.

.. image:: ../python_pi5/img/4.1.8_PIR_TTE.png
    :width: 400
    :align: center

.. warning::

    Si un message d‚Äôerreur ``RuntimeError: Cannot determine SOC peripheral base address`` appara√Æt, veuillez consulter :ref:`faq_soc` 

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. 
    Mais avant cela, vous devez acc√©der au chemin source comme ``davinci-kit-for-raspberry-pi/python-pi5``. 
    Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from gpiozero import LED, MotionSensor, Servo, TonalBuzzer
   import time

   # Configuration des broches GPIO pour la LED, le capteur de mouvement (PIR) et le buzzer
   ledPin = LED(6)
   pirPin = MotionSensor(21)
   buzPin = TonalBuzzer(27)

   # Facteur de correction de la largeur d'impulsion du servo et calcul
   myCorrection = 0.45
   maxPW = (2.0 + myCorrection) / 1000  # Largeur d'impulsion maximale
   minPW = (1.0 - myCorrection) / 1000  # Largeur d'impulsion minimale

   # Initialisation du servo avec des largeurs d'impulsion personnalis√©es
   servoPin = Servo(25, min_pulse_width=minPW, max_pulse_width=maxPW)

   # M√©lodie musicale pour le buzzer, avec les notes et les dur√©es correspondantes
   tune = [('C#4', 0.2), ('D4', 0.2), (None, 0.2),
           ('Eb4', 0.2), ('E4', 0.2), (None, 0.6),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.6),
           ('Eb4', 0.2), ('E4', 0.2), (None, 0.2),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
           ('C4', 0.2), ('B4', 0.2), (None, 0.2),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
           ('B4', 0.2), ('Bb4', 0.5), (None, 0.6),
           ('A4', 0.2), ('G4', 0.2), ('E4', 0.2), 
           ('D4', 0.2), ('E4', 0.2)]

   def setAngle(angle):
       """
       Move the servo to a specified angle.
       :param angle: Angle in degrees (0-180).
       """
       value = float(angle / 180)  # Convertit l'angle en valeur servo
       servoPin.value = value      # D√©finit la position du servo
       time.sleep(0.001)           # Courte pause pour permettre le mouvement du servo

   def doorbell():
       """
       Play a musical tune using the buzzer.
       """
       for note, duration in tune:
           buzPin.play(note)       # Jouer la note
           time.sleep(float(duration))  # Dur√©e de la note
       buzPin.stop()               # Arr√™ter le buzzer apr√®s avoir jou√© la m√©lodie

   def closedoor():
       # √âteindre la LED et d√©placer le servo pour fermer la porte
       ledPin.off()
       for i in range(180, -1, -1):
           setAngle(i)             # D√©placer le servo de 180 √† 0 degr√©s
           time.sleep(0.001)       # Courte pause pour un mouvement fluide
       time.sleep(1)               # Attente apr√®s la fermeture de la porte

   def opendoor():
       # Allumer la LED, ouvrir la porte (d√©placer le servo), jouer la m√©lodie et refermer la porte
       ledPin.on()
       for i in range(0, 181):
           setAngle(i)             # D√©placer le servo de 0 √† 180 degr√©s
           time.sleep(0.001)       # Courte pause pour un mouvement fluide
       time.sleep(1)               # Attendre avant de jouer la m√©lodie
       doorbell()                  # Jouer la m√©lodie de la sonnette
       closedoor()                 # Fermer la porte apr√®s la m√©lodie

   def loop():
       # Boucle principale pour v√©rifier la d√©tection de mouvement et faire fonctionner la porte
       while True:
           if pirPin.motion_detected:
               opendoor()               # Ouvrir la porte si un mouvement est d√©tect√©
           time.sleep(0.1)              # Courte pause dans la boucle

   try:
       loop()
   except KeyboardInterrupt:
       # Nettoyer les GPIO en cas d'interruption par l'utilisateur (ex: Ctrl+C)
       buzPin.stop()
       ledPin.off()


**Explication du Code**

#. Le script commence par importer les modules n√©cessaires. La biblioth√®que ``gpiozero`` est utilis√©e pour interfacer la LED, le capteur de mouvement, le servo-moteur et le buzzer tonal. Le module ``time`` est utilis√© pour g√©rer les fonctions li√©es au temps.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, MotionSensor, Servo, TonalBuzzer
       import time

#. Initialisation des broches GPIO pour la LED, le capteur de mouvement PIR et le buzzer tonal.

   .. code-block:: python

       # Configuration des broches GPIO pour la LED, le capteur de mouvement (PIR) et le buzzer
       ledPin = LED(6)
       pirPin = MotionSensor(21)
       buzPin = TonalBuzzer(27)

#. Calcule les largeurs d'impulsion maximale et minimale pour le servo-moteur, en int√©grant un facteur de correction pour un positionnement pr√©cis.

   .. code-block:: python

       # Facteur de correction de la largeur d'impulsion du servo et calcul
       myCorrection = 0.45
       maxPW = (2.0 + myCorrection) / 1000  # Largeur d'impulsion maximale
       minPW = (1.0 - myCorrection) / 1000  # Largeur d'impulsion minimale

#. Initialise le servo-moteur sur la broche GPIO 25 avec des largeurs d'impulsion personnalis√©es pour un positionnement pr√©cis.

   .. code-block:: python

       # Initialisation du servo avec des largeurs d'impulsion personnalis√©es
       servoPin = Servo(25, min_pulse_width=minPW, max_pulse_width=maxPW)

#. La m√©lodie est d√©finie comme une s√©quence de notes (fr√©quences) et de dur√©es (en secondes).

   .. code-block:: python

       # M√©lodie musicale pour le buzzer, avec notes et dur√©es
       tune = [('C#4', 0.2), ('D4', 0.2), (None, 0.2),
               ('Eb4', 0.2), ('E4', 0.2), (None, 0.6),
               ('F#4', 0.2), ('G4', 0.2), (None, 0.6),
               ('Eb4', 0.2), ('E4', 0.2), (None, 0.2),
               ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
               ('C4', 0.2), ('B4', 0.2), (None, 0.2),
               ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
               ('B4', 0.2), ('Bb4', 0.5), (None, 0.6),
               ('A4', 0.2), ('G4', 0.2), ('E4', 0.2), 
               ('D4', 0.2), ('E4', 0.2)]

#. Fonction pour d√©placer le servo √† un angle sp√©cifi√©. Convertit l'angle en une valeur comprise entre 0 et 1 pour le positionnement du servo.

   .. code-block:: python

       def setAngle(angle):
           """
           Move the servo to a specified angle.
           :param angle: Angle in degrees (0-180).
           """
           value = float(angle / 180)  # Convertit l'angle en valeur servo
           servoPin.value = value      # D√©finit la position du servo
           time.sleep(0.001)           # Courte pause pour permettre le mouvement du servo

#. Fonction pour jouer une m√©lodie musicale √† l'aide du buzzer. It√®re √† travers la liste ``tune``, jouant chaque note pour sa dur√©e sp√©cifi√©e.

   .. code-block:: python

       def doorbell():
           """
           Play a musical tune using the buzzer.
           """
           for note, duration in tune:
               buzPin.play(note)       # Jouer la note
               time.sleep(float(duration))  # Dur√©e de la note
           buzPin.stop()               # Arr√™ter le buzzer apr√®s avoir jou√© la m√©lodie

#. Fonctions pour ouvrir et fermer la porte √† l'aide du servo-moteur. La fonction ``opendoor`` allume la LED, ouvre la porte, joue la m√©lodie, puis referme la porte.

   .. code-block:: python

       def closedoor():
           # √âteindre la LED et d√©placer le servo pour fermer la porte
           ledPin.off()
           for i in range(180, -1, -1):
               setAngle(i)             # D√©placer le servo de 180 √† 0 degr√©s
               time.sleep(0.001)       # Courte pause pour un mouvement fluide
           time.sleep(1)               # Attendre apr√®s la fermeture de la porte

       def opendoor():
           # Allumer la LED, ouvrir la porte (d√©placer le servo), jouer la m√©lodie et refermer la porte
           ledPin.on()
           for i in range(0, 181):
               setAngle(i)             # D√©placer le servo de 0 √† 180 degr√©s
               time.sleep(0.001)       # Courte pause pour un mouvement fluide
           time.sleep(1)               # Attendre avant de jouer la m√©lodie
           doorbell()                  # Jouer la m√©lodie de la sonnette
           closedoor()                 # Fermer la porte apr√®s la m√©lodie

#. Boucle principale qui v√©rifie en continu la d√©tection de mouvement. Lorsqu'un mouvement est d√©tect√©, elle d√©clenche la fonction ``opendoor``.

   .. code-block:: python

       def loop():
           # Boucle principale pour v√©rifier la d√©tection de mouvement et faire fonctionner la porte
           while True:
               if pirPin.motion_detected:
                   opendoor()               # Ouvrir la porte si un mouvement est d√©tect√©
               time.sleep(0.1)              # Courte pause dans la boucle

#. Ex√©cute la boucle principale et s'assure que le script peut √™tre arr√™t√© avec un signal clavier (Ctrl+C), d√©sactivant le buzzer et la LED pour une sortie propre.

   .. code-block:: python

       try:
           loop()
       except KeyboardInterrupt:
           # Nettoyer les GPIO en cas d'interruption par l'utilisateur (ex: Ctrl+C)
           buzPin.stop()
           ledPin.off()

