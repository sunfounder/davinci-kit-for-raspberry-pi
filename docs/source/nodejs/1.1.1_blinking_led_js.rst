.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauchen Sie tiefer in Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten ein.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie nach dem Kauf auftretende Probleme und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Tutorials aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und Vorschauen.
    - **Spezielle Rabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und festlichen Aktionen teil.

    üëâ Bereit, mit uns zu entdecken und zu kreieren? Klicken Sie auf [|link_sf_facebook|] und treten Sie noch heute bei!

1.1.1 Blinkende LED
=========================

Einf√ºhrung
-----------------

In diesem Projekt lernen wir, wie man eine blinkende LED durch Programmierung herstellt.
Durch Ihre Einstellungen kann Ihre LED eine Reihe von interessanten
Ph√§nomenen erzeugen. Also, los geht's.

Komponenten
------------------

.. image:: img/blinking_led_list.png
    :width: 800
    :align: center

Schaltplan
---------------------

In diesem Experiment verbinden Sie einen 220Œ© Widerstand mit der Anode (dem langen Bein
der LED), dann den Widerstand mit 3,3 V und die Kathode (das
kurze Bein) der LED mit GPIO17 des Raspberry Pi. Um eine LED einzuschalten,
m√ºssen wir GPIO17 auf niedriges (0V) Niveau setzen. Dies k√∂nnen wir
durch Programmierung erreichen.

.. image:: img/image48.png
    :width: 800
    :align: center

Experimentelle Vorgehensweise
-----------------------------

**Schritt 1:** Bauen Sie die Schaltung auf.

.. image:: img/image49.png
    :width: 800
    :align: center

**Schritt 2:** Gehen Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

   cd ~/davinci-kit-for-raspberry-pi/nodejs/

.. note::
    Wechseln Sie mit ``cd`` in das Verzeichnis des Codes in diesem Experiment.

**Schritt 3:** F√ºhren Sie den Code aus

.. raw:: html

   <run></run>

.. code-block::

   sudo node blink.js

.. note::
    Hier bedeutet sudo - superuser do, und python, dass die Datei mit Python ausgef√ºhrt wird.

Nach dem Ausf√ºhren des Codes sehen Sie, wie die LED blinkt.

**Schritt 4:** Wenn Sie die Datei blink.js bearbeiten m√∂chten,
dr√ºcken Sie ``Ctrl + C`` um die Ausf√ºhrung des Codes zu stoppen. Geben Sie dann den folgenden
Befehl ein, um blink.js zu √∂ffnen:

.. raw:: html

   <run></run>

.. code-block::

   nano blink.js

.. note::
    nano ist ein Texteditor-Tool. Der Befehl wird verwendet, um die
    Code-Datei blink.js mit diesem Tool zu √∂ffnen.

Dr√ºcken Sie ``Ctrl+X`` um den Editor zu verlassen. Wenn Sie den Code ge√§ndert haben, werden Sie
gefragt, ob die √Ñnderungen gespeichert werden sollen oder nicht. Geben Sie ``Y`` (speichern)
oder ``N`` (nicht speichern) ein.

Dr√ºcken Sie dann ``Enter`` um den Editor zu verlassen. Geben Sie erneut nano blink.js ein, um
die Wirkung der √Ñnderungen zu sehen.

**Code**

Der folgende Code zeigt das Programm:

.. code-block:: js

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   var led_state = 0;

   function blink_led(){
      led.digitalWrite(led_state);
      led_state = !led_state;
   }

   setInterval(blink_led,300);

Alternativ k√∂nnen Sie den Code als spezifischeres js-Pfeilfunktion schreiben:

.. code-block:: js

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   var led_state = 0;

   setInterval(() => {
      led.digitalWrite(led_state);
      led_state = !led_state;
   }, 300);


**Code Erkl√§rung**

.. code-block:: js

   const Gpio = require('pigpio').Gpio;

Importieren Sie den Gpio-Konstruktor aus dem pigpio-Paket auf diese Weise,
und definieren Sie dann eine Konstante ``Gpio`` um diesen Konstruktor darzustellen.

Mit einer Vielzahl von Konstruktoren k√∂nnen wir elektronische Ger√§te mit js steuern.
``pigpio`` kann verwendet werden, um schnelles GPIO, PWM, Servosteuerung, Zustands√§nderungsbenachrichtigung und Interrupt-Behandlung zu implementieren.

* `pigpio - github <https://github.com/fivdi/pigpio>`_

.. Eine Wrapper-Bibliothek f√ºr die pigpio C-Bibliothek, die schnelles GPIO, PWM, Servosteuerung, 
.. Zustands√§nderungsbenachrichtigung und Interrupt-Behandlung mit JS auf dem Raspberry Pi Zero, 
.. 1, 2, 3 oder 4 erm√∂glicht.

.. code-block:: js

   const led = new Gpio(17,{mode: Gpio.OUTPUT});

Das ``new`` Schl√ºsselwort wird verwendet, um instanzierte Objekte der Klasse zu konstruieren.

Schlie√üen Sie die LED an GPIO17 der T-f√∂rmigen Erweiterungskarte an,
setzen Sie den LedPin-Modus auf Ausgang und weisen Sie ihn der Konstanten ``led`` zu,
das hei√üt, ein GPIO17-Objekt ``led`` zu konstruieren, und dessen Modus ist der Ausgangsmodus.

Es gibt zwei M√∂glichkeiten, die IO-Pins auf dem Raspberry Pi zu nummerieren: 
BOARD-Nummer und BCM-Nummer. In unserem Projekt verwenden wir die BCM-Nummer. 
Sie m√ºssen jeden verwendeten Kanal als Eingang oder Ausgang einstellen.

.. code-block:: js

   function blink_led(){
      led.digitalWrite(led_state);
      led_state = !led_state;
   }

   setInterval(blink_led,300);

Die ``setInterval()`` Methode kann Funktionen oder Ausdr√ºcke mit einer angegebenen Periode (in Millisekunden) aufrufen.
Hier √§ndern wir den Betriebszustand der LED mit einer Periode von 300 ms.

*  `setInterval <https://developer.mozilla.org/en-US/docs/Web/API/setInterval>`_

Die Methode ``gpio.digitalWrite(level)`` setzt den GPIO-Pegel auf 1 oder 0.

.. code-block:: js

   var led_state = 0;

   setInterval(() => {
      led.digitalWrite(led_state);
      led_state = !led_state;
   }, 300);

Schreiben Sie den Code als Pfeilfunktion neu, um den Code k√ºrzer zu machen.

* `Arrow Functions <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions>`_

Ph√§nomenbild
-------------------------

.. image:: img/image54.jpeg
    :width: 800
    :align: center
