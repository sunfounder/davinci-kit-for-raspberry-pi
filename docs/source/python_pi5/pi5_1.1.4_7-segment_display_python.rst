.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques gr√¢ce √† notre communaut√© et notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des promotions sp√©ciales et √† des tirages au sort.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.1.4_py_pi5:

1.1.4 Affichage 7 segments
=============================

Introduction
-------------

Nous allons essayer de contr√¥ler un afficheur 7 segments pour afficher des chiffres 
de 0 √† 9 et des lettres de A √† F.

Composants n√©cessaires
--------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/1.1.4_7_segment_list.png

.. raw:: html

   <br/>

Sch√©ma de c√¢blage
--------------------

Connectez la broche ST_CP du 74HC595 au GPIO18 du Raspberry Pi, SH_CP au GPIO27, 
DS au GPIO17, et les sorties parall√®les aux 8 segments de l'afficheur 7 segments.

Les donn√©es sont entr√©es sur la broche DS du registre √† d√©calage lorsque SH_CP 
(l'entr√©e d'horloge du registre) est en mont√©e, et sont envoy√©es au registre de 
m√©moire lorsque ST_CP (l'entr√©e d'horloge de la m√©moire) est en mont√©e.

Vous pouvez ensuite contr√¥ler les √©tats de SH_CP et ST_CP via les GPIO du Raspberry Pi 
pour transformer l'entr√©e de donn√©es s√©rie en sortie de donn√©es parall√®les, afin 
d'√©conomiser les GPIO du Raspberry Pi et piloter l'afficheur.

============ ======== ===
T-Board Name physical BCM
GPIO17       Pin 11   17
GPIO18       Pin 12   18
GPIO27       Pin 13   27
============ ======== ===

.. image:: ../python_pi5/img/1.1.4_7_segment_schematic.png


Proc√©dure exp√©rimentale
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/1.1.4_7-Segment_circuit.png

**√âtape 2 :** Acc√©dez au dossier contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le programme.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.4_7-Segment.py

Apr√®s l'ex√©cution du code, vous verrez l'afficheur 7 segments afficher les chiffres de 0 √† 9, puis les lettres de A √† F.

.. warning::

    Si un message d'erreur appara√Æt tel que ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`. 

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, vous pouvez l'ex√©cuter directement pour observer le r√©sultat. Une fois v√©rifi√© qu'il n'y a pas de probl√®me, utilisez le bouton Copier pour copier le code modifi√©, puis ouvrez le code source dans le Terminal via la commande ``nano`` et collez-le.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import OutputDevice
   from time import sleep

   # Broches GPIO connect√©es au registre √† d√©calage 74HC595
   SDI = OutputDevice(17)   # Entr√©e de donn√©es s√©rie
   RCLK = OutputDevice(18)  # Entr√©e d'horloge de la m√©moire (registre)
   SRCLK = OutputDevice(27) # Horloge de d√©calage du registre

   # Codes hexad√©cimaux pour un afficheur 7 segments √† cathode commune
   segCode = [
       0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d,
       0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71
   ]

   def hc595_shift(data):
       # D√©cale 8 bits de donn√©es dans le 74HC595
       for bit in range(8):
           # D√©finit SDI √† haut ou bas selon le bit de donn√©e
           SDI.value = 0x80 & (data << bit)
           # D√©clenche l'horloge du registre de d√©calage
           SRCLK.on()
           sleep(0.001)
           SRCLK.off()
       # Verrouille les donn√©es en d√©clenchant l'horloge de m√©moire
       RCLK.on()
       sleep(0.001)
       RCLK.off()

   def display_all_on():
       # Fonction pour allumer tous les segments (afficheur 7 segments √† cathode commune)
       all_on_code = 0x3f
       hc595_shift(all_on_code)
       print("Displaying all segments on")

   try:
       while True:
           # Affiche chaque chiffre hexad√©cimal sur l'afficheur 7 segments
           for code in segCode:
               hc595_shift(code)  # Transf√®re le code dans le 74HC595
               # Affiche le code segment√©
               print(f"Displaying segCode[{segCode.index(code)}]: 0x{code:02X}")
               sleep(0.5)  # Pause entre chaque affichage

   except KeyboardInterrupt:
       # G√®re proprement l'interruption du script (ex. Ctrl+C)
       pass


**Explication du code**

#. Ce snippet importe les classes n√©cessaires au projet. ``OutputDevice`` de ``gpiozero`` est utilis√© pour contr√¥ler les composants mat√©riels connect√©s aux broches GPIO, et ``sleep`` de ``time`` est utilis√© pour ajouter des d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import OutputDevice
       from time import sleep

#. SDI, RCLK et SRCLK correspondent respectivement aux broches d'entr√©e de donn√©es s√©rie, d'horloge m√©moire et d'horloge de d√©calage du 74HC595.

   .. code-block:: python

       # Broches GPIO connect√©es au registre √† d√©calage 74HC595
       SDI = OutputDevice(17)   # Entr√©e de donn√©es s√©rie
       RCLK = OutputDevice(18)  # Entr√©e d'horloge de la m√©moire (registre)
       SRCLK = OutputDevice(27) # Horloge de d√©calage du registre

#. ``segCode`` est un tableau contenant les codes hexad√©cimaux pour chaque chiffre √† afficher sur l'afficheur 7 segments.

   .. code-block:: python

       # Codes hexad√©cimaux pour un afficheur 7 segments √† cathode commune
       segCode = [
           0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d,
           0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71
       ]

#. Cette fonction d√©cale 8 bits de donn√©es dans le 74HC595. Elle entre chaque bit dans ``SDI``, d√©clenche ``SRCLK`` pour d√©caler le bit, puis utilise ``RCLK`` pour verrouiller les donn√©es.

   .. code-block:: python

       def hc595_shift(data):
           # D√©cale 8 bits de donn√©es dans le 74HC595
           for bit in range(8):
               # D√©finit SDI √† haut ou bas selon le bit de donn√©e
               SDI.value = 0x80 & (data << bit)
               # D√©clenche l'horloge du registre de d√©calage
               SRCLK.on()
               sleep(0.001)
               SRCLK.off()
           # Verrouille les donn√©es en d√©clenchant l'horloge de m√©moire
           RCLK.on()
           sleep(0.001)
           RCLK.off()

#. Cette fonction allume tous les segments de l'afficheur en envoyant un code sp√©cifique √† ``hc595_shift``.

   .. code-block:: python

       def display_all_on():
           # Fonction pour allumer tous les segments (afficheur 7 segments √† cathode commune)
           all_on_code = 0x3f
           hc595_shift(all_on_code)
           print("Displaying all segments on")

#. La boucle principale envoie chaque code de ``segCode`` √† l'afficheur, avec un d√©lai entre chaque affichage.

   .. code-block:: python

       try:
           while True:
               # Affiche chaque chiffre hexad√©cimal sur l'afficheur 7 segments
               for code in segCode:
                   hc595_shift(code)  # Transf√®re le code dans le 74HC595
                   # Affiche le code segment√©
                   print(f"Displaying segCode[{segCode.index(code)}]: 0x{code:02X}")
                   sleep(0.5)  # Pause entre chaque affichage

#. Cette partie du code g√®re proprement l'interruption du script (ex. Ctrl+C).

   .. code-block:: python

       except KeyboardInterrupt:
           # G√®re proprement l'interruption du script (ex. Ctrl+C)
           pass

