.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **ExpertenunterstÃ¼tzung**: LÃ¶sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre FÃ¤higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie frÃ¼hzeitigen Zugang zu neuen ProduktankÃ¼ndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: GenieÃŸen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    ðŸ‘‰ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

3.1.11 Morsekode-Generator
=============================

EinfÃ¼hrung
-----------------

In dieser Lektion erstellen wir einen Morsekode-Generator, in den Sie eine Reihe englischer Buchstaben in den Raspberry Pi eingeben, damit er als Morsekode angezeigt wird.

Komponenten
---------------

.. image:: ../img/3.1.10.png
    :align: center

Schematische Darstellung
--------------------------------

============ ======== ======== ===
T-Karte Name physisch wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../img/Schematic_three_one11.png
   :align: center

Experimentelle Verfahren
----------------------------

Schritt 1: Bauen Sie die Schaltung auf. (Achten Sie auf die Pole des Summers: Der mit dem + Etikett ist der positive Pol und der andere der negative.)

.. image:: ../img/image269.png
   :alt: Morse_bb
   :width: 800

Schritt 2: Ã–ffnen Sie die Kodedatei.

.. raw:: html

   <run></run>

.. code-block::

    cd /home/pi/davinci-kit-for-raspberry-pi/c/3.1.11/

Schritt 3: Kompilieren Sie den Kode.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.11_MorseCodeGenerator.c -lwiringPi

Schritt 4: FÃ¼hren Sie die obige ausfÃ¼hrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Geben Sie nach dem AusfÃ¼hren des Programms eine Reihe von Zeichen ein, und der Summer und die LED senden die entsprechenden Morsekodesignale.

**Code ErklÃ¤rung**

.. code-block:: c

    structÂ MORSE{
    Â Â Â Â charÂ word;
    Â Â Â Â unsignedÂ charÂ *code;
    };

    structÂ MORSEÂ morseDict[]=
    {
    Â Â Â Â {'A',"01"},Â {'B',"1000"},Â {'C',"1010"},Â {'D',"100"},Â {'E',"0"},Â 
    Â Â Â Â {'F',"0010"},Â {'G',"110"},Â {'H',"0000"},Â {'I',"00"},Â {'J',"0111"},Â 
    Â Â Â Â {'K',"101"},Â {'L',"0100"},Â {'M',"11"},Â {'N',"10"},Â {'O',"111"},Â 
    Â Â Â Â {'P',"0110"},Â {'Q',"1101"},Â {'R',"010"},Â {'S',"000"},Â {'T',"1"},
    Â Â Â Â {'U',"001"},Â {'V',"0001"},Â {'W',"011"},Â {'X',"1001"},Â {'Y',"1011"},Â 
    Â Â Â Â {'Z',"1100"},{'1',"01111"},Â {'2',"00111"},Â {'3',"00011"},Â {'4',"00001"},Â 
    Â Â Â Â {'5',"00000"},{'6',"10000"},Â {'7',"11000"},Â {'8',"11100"},Â {'9',"11110"},
    Â Â Â Â {'0',"11111"},{'?',"001100"},Â {'/',"10010"},Â {',',"110011"},Â {'.',"010101"},
    Â Â Â Â {';',"101010"},{'!',"101011"},Â {'@',"011010"},Â {':',"111000"}
    };

Diese Struktur MORSE ist das WÃ¶rterbuch des Morsecodes und enthÃ¤lt die Zeichen A-Z, 
die Zahlen 0-9 und die Zeichen â€ž?â€œ â€ž/â€œ â€ž:â€œ â€œ â€œ â€ž,â€œ â€ž.â€œ â€ž;â€œ â€ž!â€œ â€ž@â€œ.

.. code-block:: c

    charÂ *lookup(charÂ key,structÂ MORSEÂ *dict,intÂ length)
    {
    Â Â Â Â forÂ (intÂ i=0;i<length;i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â if(dict[i].word==key){
    Â Â Â Â Â Â Â Â Â Â Â Â returnÂ dict[i].code;
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }Â Â Â Â 
    }

Die Funktion ``lookup()`` funktioniert durch â€žÃœberprÃ¼fen des WÃ¶rterbuchsâ€œ. 
Definieren Sie einen SchlÃ¼ssel, 
suchen Sie die gleichen WÃ¶rter wie den SchlÃ¼ssel in der Struktur morseDict und geben Sie die entsprechenden Informationen zurÃ¼ck - â€žkodeâ€œ des bestimmten Wortes.

.. code-block:: c

    voidÂ on(){
    Â Â Â Â digitalWrite(ALedPin,HIGH);
    Â Â Â Â digitalWrite(BeepPin,HIGH);Â Â Â Â Â 
    }

Erstellen Sie eine Funktion ``on()`` , um den Summer und die LED zu starten.

.. code-block:: c

    voidÂ off(){
    Â Â Â Â digitalWrite(ALedPin,LOW);
    Â Â Â Â digitalWrite(BeepPin,LOW);
    }

Die Funktion ``off()`` schaltet den Summer und die LED aus.

.. code-block:: c

    voidÂ beep(intÂ dt){
    Â Â Â Â on();
    Â Â Â Â delay(dt);
    Â Â Â Â off();
    Â Â Â Â delay(dt);
    }


Definieren Sie einen Funktionston ``beep()`` , 
damit der Summer und die LED in einem bestimmten Intervall von ``dt`` ertÃ¶nen und blinken.

.. code-block:: c

    voidÂ morsecode(charÂ *code){
    Â Â Â Â intÂ pauseÂ =Â 250;
    Â Â Â Â charÂ *pointÂ =Â NULL;
    Â Â Â Â intÂ lengthÂ =Â sizeof(morseDict)/sizeof(morseDict[0]);
    Â Â Â Â forÂ (intÂ i=0;i<strlen(code);i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â point=lookup(code[i],morseDict,length);
    Â Â Â Â Â Â Â Â forÂ (intÂ j=0;j<strlen(point);j++){
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (point[j]=='0')
    Â Â Â Â Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause/2);
    Â Â Â Â Â Â Â Â Â Â Â Â }elseÂ if(point[j]=='1')
    Â Â Â Â Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause);
    Â Â Â Â Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â Â Â Â Â delay(pause);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }
    }


Die Funktion ``morsecode()`` wird verwendet, um den Morsecode von Eingabezeichen zu verarbeiten, 
indem die â€ž1â€œ der Kode weiterhin TÃ¶ne oder Lichter aussendet und die â€ž0â€œ in KÃ¼rze TÃ¶ne oder 
Lichter aussendet, z. B. â€žSOSâ€œ eingibt und dort wird ein Signal sein, 
das drei kurze, drei lange und dann drei kurze Segmente **Â· Â· Â· - - - Â· Â· Â·** enthÃ¤lt.

.. code-block:: c

    intÂ toupper(intÂ c)
    {
    Â Â Â Â ifÂ ((cÂ >=Â 'a')Â &&Â (cÂ <=Â 'z'))
    Â Â Â Â Â Â Â Â returnÂ cÂ +Â ('A'Â -Â 'a');
    Â Â Â Â returnÂ c;
    }
    charÂ *strupr(charÂ *str)
    {
    Â Â Â Â charÂ *orign=str;
    Â Â Â Â forÂ (;Â *str!='\0';Â str++)
    Â Â Â Â Â Â Â Â *strÂ =Â toupper(*str);
    returnÂ orign;
    }

Vor dem Codieren mÃ¼ssen Sie die Buchstaben in GroÃŸbuchstaben vereinheitlichen.

.. code-block:: c

    voidÂ main(){
    Â Â Â Â setup();
    Â Â Â Â charÂ *code;
    Â Â Â Â intÂ length=8;
    Â Â Â Â codeÂ =Â (char*)malloc(sizeof(char)*length);
    Â Â Â Â whileÂ (1){
    Â Â Â Â Â Â Â Â printf("PleaseÂ inputÂ theÂ messenger:");
            delay(100);
    Â Â Â Â Â Â Â Â scanf("%s",code);
    Â Â Â Â Â Â Â Â code=strupr(code);
    Â Â Â Â Â Â Â Â printf("%s\n",code);
            delay(100);
    Â Â Â Â Â Â Â Â morsecode(code);
    Â Â Â Â }
    }

Wenn Sie die relevanten Zeichen mit der Tastatur eingeben, konvertiert
``code=strupr(code)`` die Eingabebuchstaben in ihre GroÃŸbuchstaben.

``printf()`` druckt dann den Klartext auf dem Computerbildschirm, und die Funktion
``morsecod()`` bewirkt, dass der Summer und die LED Morsecode ausgeben.

Beachten Sie, die LÃ¤nge des Eingabezeichens darf die
``length`` nicht Ã¼berschreiten(kann Ã¼berarbeitet werden).
