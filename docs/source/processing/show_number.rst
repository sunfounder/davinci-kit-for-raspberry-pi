.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d‚Äôexperts** : R√©solvez vos probl√®mes apr√®s-vente et relevez des d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et b√©n√©ficiez d‚Äôaper√ßus privil√©gi√©s.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions sp√©ciales et √† des tirages au sort.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

Show Number
=============================================

Dans cette le√ßon, nous utilisons Processing pour contr√¥ler un afficheur 7 segments 
afin d‚Äôafficher un chiffre de 0 √† 9 ainsi que les lettres de A √† F.

**C√¢blage**

.. image:: img/image125.png

**Code**

.. code-block:: arduino

    import processing.io.*;

    int SDI = 17;   // Entr√©e de donn√©es s√©rie
    int RCLK = 18;  // Entr√©e de l'horloge de m√©moire (STCP)
    int SRCLK = 27; // Entr√©e de l'horloge du registre de d√©calage (SHCP)

	int[] SegCode= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};

	void hc595_shift(int dat){
        int i;

	  for(i=0;i<8;i++){
		int n=(0x80 & (dat << i)); 
		if ( n==0){
                GPIO.digitalWrite(SDI, 0);
            } else {
                GPIO.digitalWrite(SDI, 1);
            }
            GPIO.digitalWrite(SRCLK, 1);
            delay(1);
            GPIO.digitalWrite(SRCLK, 0);
        }

        GPIO.digitalWrite(RCLK, 1);
        delay(1);
        GPIO.digitalWrite(RCLK, 0);
    }

    void setup() {
        size(400, 200);
        frameRate(10);
        
        GPIO.pinMode(SDI, GPIO.OUTPUT); 
        GPIO.pinMode(RCLK, GPIO.OUTPUT); 
        GPIO.pinMode(SRCLK, GPIO.OUTPUT); 
      
        GPIO.digitalWrite(SDI, 0);
        GPIO.digitalWrite(RCLK, 0);
        GPIO.digitalWrite(SRCLK, 0);
        
		fill(0,25,88);
		textAlign(CENTER,CENTER);
		textSize(height*0.8);
    }

    void draw() {

        background(255);
		int number = (frameCount%100)/10;
		text(number, width/2, height/2);
        hc595_shift(SegCode[number]);
    }

**Comment √ßa fonctionne ?**

Importez ``processing.io.*`` et utilisez la biblioth√®que de fonctions GPIO pour contr√¥ler les broches de l‚Äôafficheur num√©rique.

D√©finissez le tableau ``SegCode = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71}``, qui repr√©sente les codes des segments de 0 √† F en Hexad√©cimal (cathode commune).

La fonction ``setup()`` configure les trois broches SDI, RCLK et SRCLK comme sorties, et initialise les donn√©es √† 0.

La fonction ``hc595_shift(int dat)`` permet de transf√©rer les valeurs du tableau ``SegCode`` vers le circuit int√©gr√© 74HC595.

.. code::

	void hc595_shift(int dat){
        int i;

	  for(i=0;i<8;i++){
		int n=(0x80 & (dat << i));
		if ( n==0){
                GPIO.digitalWrite(SDI, 0);
            } else {
                GPIO.digitalWrite(SDI, 1);
            }
            GPIO.digitalWrite(SRCLK, 1);
            delay(1);
            GPIO.digitalWrite(SRCLK, 0);
        }

		GPIO.digitalWrite(RCLK, 1);
		delay(1);
		GPIO.digitalWrite(RCLK, 0);
	}
 
``n = (0x80 & (dat << i))`` signifie que ``dat`` est d√©cal√© de ``i`` bits vers la gauche, puis l'op√©ration ``&`` est effectu√©e avec 0x80.

La r√®gle de l'op√©rateur ``&`` est que le r√©sultat est 1 lorsque les deux bits compar√©s valent 1, sinon le r√©sultat est 0.

Par exemple, supposons ``dat = 0x3f`` et ``i = 2`` (0011 1111 << 2 devient 1111 1100), alors 1111 1100 & 1000 0000 (0x80) = 1000 0000.

Enfin, la valeur de ``dat`` est affect√©e bit par bit √† ``SDI`` (DS).

``digitalWrite(SRCLK, 1)`` : lorsque SRCLK g√©n√®re une impulsion montante (passage de 0 √† 1), les donn√©es sont transf√©r√©es du registre DS au registre de d√©calage ;

``digitalWrite(RCLK, 1)`` : lorsque RCLK g√©n√®re une impulsion montante (passage de 0 √† 1), les donn√©es sont transf√©r√©es du registre de d√©calage au registre de stockage.

.. code::

	fill(0,25,88);
	textAlign(CENTER,CENTER);
	textSize(height*0.8);

* ``fill()`` : D√©finit la couleur utilis√©e pour remplir les formes.
* ``textAlign(CENTER, CENTER)`` : D√©finit l'alignement du texte. Les param√®tres ``LEFT``, ``CENTER`` et ``RIGHT`` d√©terminent l'affichage du texte par rapport aux valeurs x et y pass√©es en param√®tres de la fonction ``text()``.
* ``textSize()`` : D√©finit la taille actuelle de la police. Cette taille sera appliqu√©e √† tous les appels ult√©rieurs de la fonction ``text()``. La taille de la police est mesur√©e en pixels.

Ces fonctions permettent de personnaliser le style du texte affich√© dans Processing.

.. code::

	void draw() {

		background(255);
		int number = (frameCount%100)/10;
		text(number, width/2, height/2);
		hc595_shift(SegCode[number]);
	}

La variable ``frameCount`` agit comme une base de temps, et est li√©e √† ``frameRate``.
Par d√©faut, ``frameRate`` est de 60, ce qui signifie que ``frameCount`` s'incr√©mente 60 fois par seconde.

Ainsi, nous pouvons utiliser Processing et l'afficheur 7 segments pour afficher simultan√©ment les chiffres de 0 √† 9 et les lettres de A √† F.

Pour plus d'informations, consultez la `Processing Reference <https://processing.org/reference/>`_.
