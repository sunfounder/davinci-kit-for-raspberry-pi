.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Aprovecha descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones especiales.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

Punto en el Oscilador
==============================

En este proyecto, conectaremos 3 botones: uno para cambiar el tama√±o del punto, otro para cambiar su posici√≥n y el √∫ltimo para cambiar su color. Si presionas los 3 botones al mismo tiempo, obtendr√°s un punto que oscila y cambia de color.

.. image:: img/dancing_dot.png

**Conexi√≥n**

.. image:: img/circuit_dancing_dot.png

**C√≥digo**

.. code-block:: arduino

    import processing.io.*;

    // Definir una instancia del objeto Dot
    Dot myDot;

    // Definir los pines que leer√°n las pulsaciones de los botones
    int[] pins = { 18, 23, 24 };

    void setup() {
        size(400, 400);
        // Cambiar el modo de color a HSB
        colorMode(HSB, 360, 100, 100);
        noStroke();

        for (int i = 0; i < pins.length; i++) {
            GPIO.pinMode(pins[i], GPIO.INPUT_PULLUP);
        }

        // Crear un punto en el centro de la pantalla 
        myDot = new Dot(width / 2, height / 2, 100, 255);
    }

    void draw() {
        background(0); 

        // Modificar atributos del punto seg√∫n los botones presionados
        if (GPIO.digitalRead(pins[0]) == GPIO.LOW) {myDot.setSize();} 
        if (GPIO.digitalRead(pins[1]) == GPIO.LOW) {myDot.setPosition();} 
        if (GPIO.digitalRead(pins[2]) == GPIO.LOW) {myDot.setColor();} 

        // Actualizar el estado del punto
        myDot.update();
        // Y dibujarlo en la pantalla
        myDot.show();
    }

    class Dot { 

        float initX;
        float initY;
        float currentX;
        float currentY;
        int positionRange = 60;

        float initSize;
        float currentSize;
        int sizeRange = 50;

        int initColor;
        int currentColor;
        int ColorRange = 80;

        float timer = 0.0;
        float speed = 0.06;

        Dot(float x, float y, float s, int c) {
            initX = x;
            initY = y;
            currentX = x;
            currentY = y;

            initSize = s;
            currentSize = s;

            initColor = c;
            currentColor = c;
        }

        void setSize() {
            currentSize = initSize + sizeRange * sin( timer );
        }

        void setPosition() {
            currentY = initY + positionRange * cos( timer *2);
        }

        void setColor() {
            currentColor = int(initColor + ColorRange * sin( timer ));
        }

        void update() {
            timer += speed;
        }

        void show() {
            fill(currentColor, 100, 100); 
            ellipse(currentX, currentY, currentSize, currentSize);
        }
    }

**¬øC√≥mo funciona?**

En lugar de dibujar el punto directamente, aqu√≠ creamos una clase ``Dot``.
Luego, declaramos el objeto (en este caso, ``myDot``).

Esta es una forma sencilla de dibujar puntos con m√∫ltiples propiedades id√©nticas. 
Por ejemplo, si agregamos tres funciones al punto en este proyecto - cambiar tama√±o, 
cambiar posici√≥n y cambiar color - cada punto que declaremos tendr√° la misma funcionalidad. 
Podemos usar el mismo bot√≥n para que realicen la misma acci√≥n o botones diferentes para controlar cada punto por separado.

Usar **clases** hace que tu c√≥digo sea m√°s limpio, poderoso y flexible.

`Class (computer programming) - Wikipedia <https://en.wikipedia.org/wiki/Class_(computer_programming)>`_

Veamos m√°s de cerca la clase ``Dot``.

.. code-block:: arduino

    Dot(float x, float y, float s, int c)

En la declaraci√≥n, se deben pasar cuatro par√°metros: las coordenadas X e Y de la posici√≥n, el tama√±o y el color (aqu√≠ se usa el `HSB color mode <https://en.wikipedia.org/wiki/HSL_and_HSV>`_).

Cada par√°metro se asignar√° a dos conjuntos de valores (valor inicial y valor actual).

.. code-block:: arduino

    float initX;
    float initY;
    float currentX;
    float currentY;
    int positionRange = 60;

    float initSize;
    float currentSize;
    int sizeRange = 50;

    int initColor;
    int currentColor;
    int ColorRange = 80;

Adem√°s del valor inicial y el valor actual, hay un conjunto de valores de rango. No es dif√≠cil entender que el valor inicial se usa para determinar el estado inicial del punto (definido por los par√°metros de entrada), mientras que el valor actual cambiar√° dentro del rango para hacer que el punto se mueva.

As√≠, excepto el valor X, los valores actuales de los otros tres par√°metros se calculan como sigue:

.. code-block:: arduino

    void setSize() {
        currentSize = initSize + sizeRange * sin( timer );
    }

    void setPosition() {
        currentY = initY + positionRange * cos( timer *2);
    }

    void setColor() {
        currentColor = int(initColor + ColorRange * sin( timer ));
    }


Si est√°s familiarizado con las funciones trigonom√©tricas, no te resultar√° dif√≠cil entender `sine and cosine <https://en.wikipedia.org/wiki/Sine>`_, que dan un cambio peri√≥dico y suave (de -1 a 1) en el valor actual del punto.

Tambi√©n necesitamos un temporizador, ``timer``, para la variaci√≥n peri√≥dica. Este se incrementa en el m√©todo ``update()``, llamado en ``draw()``.

.. code-block:: arduino

    void update() {
        timer += speed;
    }

Finalmente, el punto se muestra seg√∫n el valor actual mediante el m√©todo ``show()``, que tambi√©n se llama en ``draw()``.

.. code-block:: arduino

    void show() {
        fill(currentColor, 100, 100); 
        ellipse(currentX, currentY, currentSize, currentSize);
    }

**¬øAlgo m√°s?**

Al dominar el uso de clases, ya puedes dibujar m√∫ltiples puntos con las mismas propiedades, as√≠ que ¬øpor qu√© no intentar algo m√°s interesante?
Por ejemplo, podr√≠as dibujar un sistema binario estable, o crear un juego al estilo de 'DUET'.


Para m√°s detalles consulta `Processing Reference <https://processing.org/reference/>`_.
