.. note:: 

    Ciao, benvenuto nella community su Facebook degli appassionati di SunFounder Raspberry Pi, Arduino e ESP32! Approfondisci il mondo di Raspberry Pi, Arduino ed ESP32 insieme a altri appassionati.

    **Perch√© unirsi?**

    - **Supporto esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a promozioni e omaggi durante le festivit√†.

    üëâ Pronto per esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

2.2.2 Termistore
==================

Introduzione
---------------

Come il fotoresistore √® sensibile alla luce, il termistore √® un dispositivo 
elettronico sensibile alla temperatura, che pu√≤ essere utilizzato per realizzare 
funzioni di controllo della temperatura, come un allarme di calore.

Componenti
-------------

.. image:: img/list_2.2.2_thermistor.png

Principio
------------

Un termistore √® una resistenza termicamente sensibile che presenta un cambiamento 
preciso e prevedibile nella resistenza proporzionale a piccole variazioni di 
temperatura. La sua variazione di resistenza dipende dalla sua composizione unica. 
I termistori appartengono al gruppo dei componenti passivi. A differenza dei loro 
omologhi attivi, i dispositivi passivi non possono fornire guadagno di potenza o 
amplificazione a un circuito.

Esistono due tipi di termistori: coefficiente di temperatura negativo (NTC) e 
coefficiente di temperatura positivo (PTC), noti anche come NTC e PTC. La 
resistenza di un termistore PTC aumenta con la temperatura, mentre per l‚ÄôNTC √® 
il contrario. In questo esperimento utilizziamo un termistore NTC.

.. image:: img/image325.png

Il principio √® che la resistenza del termistore NTC varia con la temperatura 
dell‚Äôambiente esterno. Quando la temperatura aumenta, la resistenza del 
termistore diminuisce. I dati di tensione vengono poi convertiti in valori 
digitali tramite l‚Äôadattatore A/D, e la temperatura in gradi Celsius o Fahrenheit 
viene mostrata tramite programmazione.

In questo esperimento, si utilizza un termistore e una resistenza di pull-up da 
10k. Ogni termistore ha una resistenza normale, qui pari a 10k ohm, misurata a 
25 gradi Celsius.

La relazione tra resistenza e temperatura √® la seguente:

R\ :sub:`T` =R\ :sub:`N` exp\ :sup:`B(1/TK ‚Äì 1/TN)`

**R\ T** √® la resistenza del termistore NTC alla temperatura **T\ K**.

**R\ N** √® la resistenza del termistore NTC alla temperatura nominale **T\ N**. 
Qui, il valore numerico di **R\ N** √® 10k.

**T\ K** √® una temperatura Kelvin e l'unit√† √® K. Qui, il valore numerico di 
**T\ K**\ √® 273,15 + gradi Celsius.

**T\ N** √® una temperatura Kelvin nominale; anche l'unit√† √® K. Qui, il valore 
numerico di **T\ N** √® 273,15+25.

**B** (beta), la costante di materiale del termistore NTC, √® chiamata anche 
indice di sensibilit√† termica e ha un valore numerico di 3950.

**exp** √® l‚Äôabbreviazione di esponenziale, e la base √® il numero naturale e, 
che √® approssimativamente uguale a 2,7.

Converti questa formula
T\ :sub:`K`\ =1/(ln(R\ :sub:`T`/R\ :sub:`N`)/B+1/T\ :sub:`N`) per ottenere la 
temperatura Kelvin e sottraendo 273,15 ottieni la temperatura in gradi Celsius.

Questa relazione √® una formula empirica, accurata solo quando la temperatura e 
la resistenza sono entro il range efficace.

Schema elettrico
--------------------

.. image:: img/image323.png

.. image:: img/image324.png


Procedure sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: img/image202.png
    :width: 800

Per gli Utenti del Linguaggio C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.2/

**Passo 3:** Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.2_Thermistor.c -lwiringPi -lm

.. note::
    -lm serve per caricare la libreria matematica. Non ometterlo, altrimenti 
    comparir√† un errore.

**Passo 4:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Con il codice in esecuzione, il termistore rileva la temperatura ambientale 
che verr√† visualizzata sullo schermo una volta completato il calcolo.

.. note::

    Se il programma non funziona dopo l‚Äôesecuzione, o compare un errore del tipo: \"wiringPi.h: Nessun file o directory\", consulta :ref:`Il codice C non funziona?`.
**Codice**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <math.h>

    typedef unsigned char uchar;
    typedef unsigned int uint;

    #define     ADC_CS    0
    #define     ADC_CLK   1
    #define     ADC_DIO   2

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Bit di avvio
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Modalit√† single-end
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // ODD
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,odd);  delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Selezione
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,sel);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);

        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);

        for(i=0;i<8;i++)
        {
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);

            pinMode(ADC_DIO, INPUT);
            dat1=dat1<<1 | digitalRead(ADC_DIO);
        }

        for(i=0;i<8;i++)
        {
            dat2 = dat2 | ((uchar)(digitalRead(ADC_DIO))<<i);
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
        }

        digitalWrite(ADC_CS,1);
        pinMode(ADC_DIO, OUTPUT);
        return(dat1==dat2) ? dat1 : 0;
    }

    int main(void)
    {
        unsigned char analogVal;
        double Vr, Rt, temp, cel, Fah;
        if(wiringPiSetup() == -1){ // se l'inizializzazione di wiring fallisce, stampa un messaggio a schermo
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(ADC_CS,  OUTPUT);
        pinMode(ADC_CLK, OUTPUT);

        while(1){
            analogVal = get_ADC_Result(0);
            Vr = 5 * (double)(analogVal) / 255;
            Rt = 10000 * (double)(Vr) / (5 - (double)(Vr));
            temp = 1 / (((log(Rt/10000)) / 3950)+(1 / (273.15 + 25)));
            cel = temp - 273.15;
            Fah = cel * 1.8 +32;
            printf("Celsius: %.2f C  Fahrenheit: %.2f F\n", cel, Fah);
            delay(100);
        }
        return 0;
    }

**Spiegazione del Codice**

.. code-block:: c

    #include <math.h>

Questa √® una libreria numerica di C che dichiara una serie di funzioni per 
calcolare operazioni matematiche e trasformazioni comuni.

.. code-block:: c

    analogVal = get_ADC_Result(0);

Questa funzione viene utilizzata per leggere il valore del termistore.

.. code-block:: c

    Vr = 5 * (double)(analogVal) / 255;
    Rt = 10000 * (double)(Vr) / (5 - (double)(Vr));
    temp = 1 / (((log(Rt/10000)) / 3950)+(1 / (273.15 + 25)));
    cel = temp - 273.15;
    Fah = cel * 1.8 +32;
    printf("Celsius: %.2f C  Fahrenheit: %.2f F\n", cel, Fah);

Questi calcoli convertono i valori del termistore in gradi Celsius.

.. code-block:: c

    Vr = 5 * (double)(analogVal) / 255;
    Rt = 10000 * (double)(Vr) / (5 - (double)(Vr));

Queste due righe di codice calcolano la distribuzione della tensione con 
il valore letto da analog per ottenere Rt (resistenza del termistore).

.. code-block:: c

    temp = 1 / (((log(Rt/10000)) / 3950)+(1 / (273.15 + 25)));

Questo codice si riferisce alla sostituzione di Rt nella formula
**T\ K\ =1/(ln(R\ T/R\ N)/B+1/T\ N)** per ottenere la temperatura in Kelvin.

.. code-block:: c

    temp = temp - 273.15;

Converte la temperatura in Kelvin in gradi Celsius.

.. code-block:: c

    Fah = cel * 1.8 +32;

Converte i gradi Celsius in Fahrenheit.

.. code-block:: c

    printf("Celsius: %.2f C  Fahrenheit: %.2f F\n", cel, Fah);

Stampa i gradi centigradi, i gradi Fahrenheit e le loro unit√† sul display.

Per gli Utenti di Linguaggio Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**Passo 3:** Esegui il file eseguibile

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.2_Thermistor.py

Una volta eseguito il codice, il termistore rilever√† la temperatura
ambientale che verr√† stampata sullo schermo al termine del calcolo del programma.

**Codice**

.. note::

    Puoi **Modificare/Reimpostare/Copiare/Eseguire/Interrompere** il codice qui sotto. Prima di fare ci√≤, per√≤, devi accedere al percorso del codice sorgente come ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

   <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import ADC0834
    import time
    import math

    def init():
        ADC0834.setup()

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            Vr = 5 * float(analogVal) / 255
            Rt = 10000 * Vr / (5 - Vr)
            temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
            Cel = temp - 273.15
            Fah = Cel * 1.8 + 32
            print ('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))
            time.sleep(0.2)

    if __name__ == '__main__':
        init()
        try:
            loop()
        except KeyboardInterrupt:
            ADC0834.destroy()

**Spiegazione del Codice**

.. code-block:: python

    import math

Una libreria numerica che dichiara una serie di funzioni per calcolare
operazioni matematiche comuni e trasformazioni.

.. code-block:: python

    analogVal = ADC0834.getResult()

Questa funzione viene utilizzata per leggere il valore del termistore.

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)
    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
    Cel = temp - 273.15
    Fah = Cel * 1.8 + 32
    print ('Celsius: %.2f ¬∞C  Fahrenheit: %.2f ‚Ñâ' % (Cel, Fah))

Questi calcoli convertono i valori del termistore in gradi Celsius e
Fahrenheit.

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)

Queste due righe di codice calcolano la distribuzione della tensione
con il valore letto da analog per ottenere Rt (resistenza del termistore).

.. code-block:: python

    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))

Questo codice inserisce Rt nella formula
**T\ K\ =1/(ln(R\ T/R\ N)/B+1/T\ N)** per ottenere la temperatura in Kelvin.

.. code-block:: python

    temp = temp - 273.15

Converte la temperatura in Kelvin in gradi Celsius.

.. code-block:: python

    Fah = Cel * 1.8 + 32

Converte i gradi Celsius in gradi Fahrenheit.

.. code-block:: python

    print ('Celsius: %.2f ¬∞C  Fahrenheit: %.2f ‚Ñâ' % (Cel, Fah))

Stampa i gradi Celsius e Fahrenheit con le relative unit√† sul display.

Immagine del Fenomeno
--------------------------

.. image:: img/image203.jpeg
