.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, d'Arduino et d'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques gr√¢ce √† l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Obtenez un acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Afficheur √† 7 segments
=========================

Introduction
--------------

Dans ce projet, nous allons contr√¥ler un afficheur 7 segments pour afficher des chiffres de 0 √† 9 ainsi que les lettres de A √† F.

Composants
------------

.. image:: img/list_7_segment.png


Sch√©ma de c√¢blage
--------------------

Connectez la broche ST_CP du 74HC595 au GPIO18 du Raspberry Pi, SH_CP au GPIO27 
et DS au GPIO17. Les ports de sortie parall√®le sont connect√©s aux 8 segments de 
l'afficheur √† 7 segments. Les donn√©es d'entr√©e sont envoy√©es √† la broche DS du 
registre √† d√©calage lorsque SH_CP (l'entr√©e d'horloge du registre √† d√©calage) 
est sur front montant, et envoy√©es au registre de m√©moire lorsque ST_CP (l'entr√©e 
d'horloge du registre de m√©moire) est sur front montant. Ainsi, en contr√¥lant les 
√©tats de SH_CP et ST_CP via les GPIO du Raspberry Pi, vous pouvez transformer les 
donn√©es d'entr√©e s√©rie en sortie parall√®le, √©conomiser des GPIO et piloter l'afficheur.

.. image:: img/schematic_7_segment.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: img/image73.png


**√âtape 2 :** Acc√©der au dossier du code.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 3 :** Ex√©cuter le code.

.. raw:: html

    <run></run>

.. code-block::

    sudo node 7-segment_display.js

Apr√®s l'ex√©cution du code, vous verrez l'afficheur 7 segments afficher 0-9, puis A-F.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    const segCode = [0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71];

    const SDI = new Gpio(17, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(18, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(27, { mode: Gpio.OUTPUT });

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

    let index = -1;
    setInterval(() => {
        index = (index+1)%16;
        hc595_shift(segCode[index]);
    }, 1000);

**Explication du code**

.. code-block:: js

    const segCode = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71];

D√©finir un tableau de segments hexad√©cimaux (cathode commune) de 0 √† F.

.. code-block:: js

    const SDI = new Gpio(17, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(18, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(27, { mode: Gpio.OUTPUT });

Initialiser les broches 17, 18 et 27 en mode sortie, et les assigner respectivement aux constantes ``SDI``, ``RCLK`` et ``SRCLK``.

.. code-block:: js

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

Impl√©menter une fonction ``hc595_shift`` pour convertir les valeurs du tableau
 ``segCode`` en signaux √† afficher sur l'afficheur 7 segments.

.. code-block:: js

    let code = 0x80 & (dat << j);
    if (code != 0) {
        code = 1;
    }
    SDI.digitalWrite(code); 

Attribuer les donn√©es de ``dat`` √† SDI(DS) bit par bit.
Supposons que dat=0x3f (0011 1111), lorsqu'on d√©place ``j=2``, 0x3f se d√©place de 2 bits vers la gauche.
1111 1100 (0x3f << 2) & 1000 0000 (0x80) = 1000 0000, ce qui est vrai.
√Ä ce moment-l√†, 1 est √©crit dans SDI.

.. code-block:: js

    SRCLK.trigger(1,1);

G√©n√©rer une impulsion montante et d√©placer les donn√©es DS vers le registre √† d√©calage.

``trigger(pulseLen, level)``
    * pulseLen - pulse length in microseconds (1 - 100)
    * level - 0 or 1

Envoie une impulsion de d√©clenchement au GPIO.
Le GPIO est d√©fini √† ``level`` pendant ``pulseLen`` microsecondes, puis r√©initialis√© au niveau oppos√©.

.. code-block:: js

    RCLK.trigger(1,1);

G√©n√©rer une impulsion montante et d√©placer les donn√©es du registre de d√©calage au registre de m√©moire.

.. code-block:: js

    let index = -1;
    setInterval(() => {
        index = (index+1)%16;
        hc595_shift(segCode[index]);
    }, 1000);

Enfin, utilisez la fonction ``hc595_shift()`` pour convertir les valeurs de 
``segCode`` et les afficher √† travers l'afficheur num√©rique.

Image du r√©sultat
--------------------

.. image:: img/image74.jpeg

