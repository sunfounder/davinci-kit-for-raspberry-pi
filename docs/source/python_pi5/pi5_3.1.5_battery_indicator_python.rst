.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez au c≈ìur des projets Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Soyez inform√© en avant-premi√®re des nouvelles annonces de produits et d√©couvrez les coulisses.
    - **Remises sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† nos jeux-concours et √† nos promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pi5_btr_indicator:

3.1.5 Indicateur de Batterie
===============================

Introduction
---------------

Dans ce projet, nous allons r√©aliser un indicateur de batterie capable 
d'afficher visuellement le niveau de charge sur un Bargraph LED.

Composants n√©cessaires
--------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/4.1.11_battery_indicator_list.png
    :align: center

.. Il est possible d'acheter l'ensemble du kit, voici le lien : 

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Nom
..         - √âL√âMENTS DANS CE KIT
..         - LIEN
..     *   - Kit Raphael
..         - 337
..         - |link_Raphael_kit|

.. Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - PR√âSENTATION DES COMPOSANTS
..         - LIEN D'ACHAT

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`bar_graph`
..         - \-
..     *   - :ref:`adc0834`
..         - \-

Sch√©ma de c√¢blage
---------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO25       Pin 22   6        25
GPIO12       Pin 32   26       12
GPIO16       Pin 36   27       16
GPIO20       Pin 38   28       20
GPIO21       Pin 40   29       21
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
GPIO19       Pin 35   24       19
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.11_battery_indicator_schematic.png
   :align: center

Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/4.1.11_battery_indicator_circuit.png

**√âtape 2 :** Allez dans le r√©pertoire du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.5_BatteryIndicator_zero.py

Apr√®s l'ex√©cution du programme, connectez s√©par√©ment le troisi√®me pin de l'ADC0834 
et le GND √† deux fils, puis reliez-les aux deux bornes de la batterie. Vous verrez 
que les LED correspondantes sur le Bargraph LED s'allument pour indiquer le niveau 
de charge (plage de mesure : 0-5V).

.. warning::

    En cas d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez vous r√©f√©rer √† :ref:`faq_soc`

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre dans le chemin source du code comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   import ADC0834
   import time

   # Liste des broches GPIO auxquelles les LEDs sont connect√©es
   ledPins = [25, 12, 16, 20, 21, 5, 6, 13, 19, 26]
   # Initialisation des objets LED pour chaque broche dans la liste
   leds = [LED(pin) for pin in ledPins]

   # Configuration du module ADC0834
   ADC0834.setup()

   def LedBarGraph(value):
       # √âteint toutes les LEDs
       for i in range(10):
           leds[i].off()
       # Allume les LEDs jusqu'√† la valeur sp√©cifi√©e
       for i in range(value):
           leds[i].on()

   try:
       # Boucle principale pour mettre √† jour en continu le Bargraph LED
       while True:
           # Lecture de la valeur analogique depuis l'ADC0834
           analogVal = ADC0834.getResult()
           # Conversion de la valeur analogique en niveau du Bargraph LED
           LedBarGraph(int(analogVal/25))
   except KeyboardInterrupt: 
       # √âteint toutes les LEDs lorsque le programme est interrompu
       for i in range(10):
           leds[i].off()



**Explication du Code**

#. Cette section importe les biblioth√®ques n√©cessaires. La biblioth√®que ``gpiozero`` est utilis√©e pour contr√¥ler les LED, ``ADC0834`` pour l'interface avec le module ADC, et ``time`` pour les op√©rations li√©es au temps.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED
       import ADC0834
       import time

#. D√©finit les broches GPIO auxquelles les LED sont connect√©es et initialise un tableau d'objets LED pour chaque broche, facilitant ainsi le contr√¥le individuel de chaque LED.

   .. code-block:: python

       # Liste des broches GPIO auxquelles les LED sont connect√©es
       ledPins = [25, 12, 16, 20, 21, 5, 6, 13, 19, 26]
       # Initialise les objets LED pour chaque broche de la liste
       leds = [LED(pin) for pin in ledPins]

#. Initialise le module ADC0834 pour la conversion analogique-num√©rique.

   .. code-block:: python

       # Configuration du module ADC0834
       ADC0834.setup()

#. Cette fonction √©teint toutes les LED, puis allume un nombre de LED correspondant √† la valeur d'entr√©e, cr√©ant ainsi une repr√©sentation graphique sous forme de barres.

   .. code-block:: python

       def LedBarGraph(value):
           # √âteint toutes les LED
           for i in range(10):
               leds[i].off()
           # Allume les LED jusqu'√† la valeur sp√©cifi√©e
           for i in range(value):
               leds[i].on()

#. Lit en continu la valeur analogique depuis l'ADC0834 et met √† jour le bargraph LED en cons√©quence. La valeur analogique est mise √† l'√©chelle pour correspondre √† une plage de 0 √† 10 pour les 10 LED.

   .. code-block:: python

       try:
           # Boucle principale pour mettre √† jour en continu le bargraph LED
           while True:
               # Lit la valeur analogique depuis l'ADC0834
               analogVal = ADC0834.getResult()
               # Convertit la valeur analogique en niveau pour le bargraph LED
               LedBarGraph(int(analogVal/25))

#. S'assure que toutes les LED sont √©teintes lorsque le programme est interrompu (par exemple, en appuyant sur Ctrl+C).

   .. code-block:: python

       except KeyboardInterrupt: 
           # √âteint toutes les LED lorsque le programme est interrompu
           for i in range(10):
               leds[i].off()