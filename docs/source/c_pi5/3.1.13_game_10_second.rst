.. note::

    Â¡Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Ãšnete para profundizar en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros aficionados.

    **Â¿Por quÃ© unirse?**

    - **Soporte Experto**: Resuelve problemas post-venta y desafÃ­os tÃ©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Accede anticipadamente a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos mÃ¡s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones especiales.

    ðŸ‘‰ Â¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y Ãºnete hoy mismo.

3.1.13 JUEGOâ€“ 10 Segundos
==============================

IntroducciÃ³n
-------------------

En esta lecciÃ³n, haremos un dispositivo de juego para desafiar tu concentraciÃ³n. 
Ata el interruptor de inclinaciÃ³n a un palo para hacer una varita mÃ¡gica. Agita 
la varita y el display de 4 dÃ­gitos comenzarÃ¡ a contar. Al agitarla nuevamente, 
el conteo se detendrÃ¡. Si logras mantener el conteo en **10.00**, Â¡ganas! Puedes 
jugar con tus amigos para ver quiÃ©n es el maestro del tiempo.

Componentes
----------------

.. image:: img/list_GAME_10_Second.png
    :align: center

Diagrama EsquemÃ¡tico
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: img/Schematic_three_one13.png
   :align: center

Procedimientos Experimentales
-------------------------------

**Paso 1**: Ensambla el circuito.

.. image:: img/image277.png
   :alt: 10 second_bb
   :width: 800

**Paso 2**: Accede a la carpeta del cÃ³digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.13/

**Paso 3**: Compila el cÃ³digo.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.13_GAME_10Second.c -lwiringPi

**Paso 4**: Ejecuta el archivo.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Agita la varita para que el display de 4 dÃ­gitos comience a contar; 
agÃ­tala de nuevo para detener el conteo. Si logras que el contador 
marque **10.00**, ganas. AgÃ­tala una vez mÃ¡s para iniciar otra ronda.

.. note::

    Si no funciona despuÃ©s de ejecutar el cÃ³digo o aparece un mensaje de error como: \"wiringPi.h: No such file or directory\", consulta :ref:`c code is not working?`.

**ExplicaciÃ³n del CÃ³digo**

.. code-block:: c

    voidÂ stateChange(){
    Â Â Â Â ifÂ (gameStateÂ ==Â 0){
    Â Â Â Â Â Â Â Â counterÂ =Â 0;
            delay(1000);
            ualarm(10000,10000); 
        }else{
            alarm(0);
            delay(1000);
        }
    Â Â Â Â gameStateÂ =Â (gameStateÂ +Â 1)%2;
    }

El juego se divide en dos modos:

gameState=0 es el modo \"inicio\", donde se mide el tiempo y se muestra 
en el display de segmentos, y se ingresa al modo \"mostrar\" al agitar 
el interruptor de inclinaciÃ³n.

gameState=1 es el modo \"mostrar\", que detiene la mediciÃ³n y muestra el 
tiempo en el display. Al agitar nuevamente el interruptor de inclinaciÃ³n, 
el cronÃ³metro se reinicia y el juego comienza de nuevo.

.. code-block:: c

    voidÂ loop(){
    Â Â Â Â intÂ currentStateÂ =0;
    Â Â Â Â intÂ lastState=0;
        while(1){
            display();
            currentState=digitalRead(sensorPin);
            if((currentState==0)&&(lastState==1)){
                stateChange();
            }
            lastState=currentState;
        }
    }

Loop() es la funciÃ³n principal. Primero, el tiempo se muestra en el display de 
4 dÃ­gitos y se lee el valor del interruptor de inclinaciÃ³n. Si el estado del 
interruptor cambia, se llama a stateChange().

