.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder pour les passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur de l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez des d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

1.1.1 LED Clignotante
=========================

Introduction
-----------------

Dans cette le√ßon, nous allons apprendre √† programmer une LED clignotante. 
Gr√¢ce √† vos r√©glages, la LED peut produire une s√©rie d'effets int√©ressants. 
Alors, c'est parti !

Composants
------------------

.. image:: img/blinking_led_list.png
    :width: 800
    :align: center

.. note::
    Pour mener √† bien cette exp√©rience, vous devez disposer de votre propre Raspberry Pi, 
    d'une carte TF et d'une alimentation compatible Raspberry Pi.

Principe
-----------

**Plaque d'essai (Breadboard)**

Une plaque d'essai est une base de construction utilis√©e pour le prototypage de 
circuits √©lectroniques. Elle permet de construire et de tester rapidement des 
circuits avant la finalisation de tout design. Elle contient de nombreux trous 
dans lesquels vous pouvez ins√©rer les composants mentionn√©s pr√©c√©demment, comme 
des circuits int√©gr√©s, des r√©sistances et des fils de connexion. La plaque d'essai 
permet d'ajouter et de retirer facilement les composants.

L'image montre la structure interne d'une plaque d'essai compl√®te. Bien que ces trous 
paraissent ind√©pendants les uns des autres, ils sont en r√©alit√© reli√©s entre eux par 
des bandes m√©talliques.

.. image:: img/image41.png

**LED**

Une LED (diode √©lectroluminescente) est un type de diode. Elle s'allume uniquement si 
sa patte longue est connect√©e √† la borne positive et sa patte courte √† la borne n√©gative.

.. |image42| image:: img/image42.png

.. |image43| image:: img/image43.png

|image42|\ |image43|

La LED ne doit pas √™tre connect√©e directement √† une source d'alimentation car cela 
pourrait l'endommager. Une r√©sistance de 160Œ© ou plus (pour une alimentation en 5V) 
doit √™tre connect√©e en s√©rie dans le circuit de la LED.

**R√©sistance**

Une r√©sistance est un composant √©lectronique qui limite le courant dans un circuit. 
Une r√©sistance fixe est un type de r√©sistance dont la valeur ne peut pas √™tre modifi√©e, 
contrairement √† un potentiom√®tre ou une r√©sistance variable.

Dans ce kit, nous utilisons des r√©sistances fixes. Elles sont essentielles dans le 
circuit pour prot√©ger les composants connect√©s. Les images suivantes montrent une 
r√©sistance de 220Œ© ainsi que deux symboles couramment utilis√©s dans les sch√©mas 
√©lectroniques. Œ© est l'unit√© de mesure de la r√©sistance, et les unit√©s sup√©rieures 
incluent KŒ©, MŒ©, etc. Leur relation est la suivante : 1 MŒ© = 1000 KŒ©, 1 KŒ© = 1000 Œ©. 
En g√©n√©ral, la valeur de la r√©sistance est indiqu√©e dessus. Si vous voyez ces symboles 
dans un sch√©ma, cela signifie qu'il y a une r√©sistance.

.. image:: img/image44.png

.. |image45| image:: img/image45.png

.. |image46| image:: img/image46.png

|image45|\ |image46|

Lorsque vous utilisez une r√©sistance, il est important de conna√Ætre sa valeur. Voici 
deux m√©thodes : observer les bandes de couleur sur la r√©sistance ou utiliser un multim√®tre 
pour mesurer sa valeur. Nous vous recommandons la premi√®re m√©thode, car elle est 
plus pratique et rapide.

.. image:: img/image47.jpeg

Sch√©ma de c√¢blage
---------------------

Dans cette exp√©rience, connectez une r√©sistance de 220Œ© √† l'anode (la longue patte de la LED), 
puis reliez la r√©sistance √† 3,3 V, et connectez la cathode (la patte courte) de la LED au 
GPIO17 du Raspberry Pi. Ainsi, pour allumer la LED, nous devons configurer le GPIO17 √† un 
niveau bas (0V). Nous pouvons obtenir ce r√©sultat par programmation.

.. note::

    **Pin11** correspond au 11√®me pin du Raspberry Pi, de gauche √† droite, et ses num√©ros correspondants **wiringPi** et **BCM** sont indiqu√©s dans le tableau ci-dessous.

Dans les contenus en langage C, nous utilisons GPIO0 comme √©quivalent de 0 dans wiringPi. 
Dans les contenus en langage Python, BCM 17 correspond √† 17 dans la colonne BCM du tableau. 
En m√™me temps, ils correspondent tous deux au 11√®me pin sur le Raspberry Pi, soit le Pin 11.

============ ======== ======== ====
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ====

.. image:: img/image48.png
    :width: 800
    :align: center

Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image49.png
    :width: 800
    :align: center

**√âtape 2 :** Acc√©dez au dossier du code.

1) Si vous utilisez un √©cran, suivez les √©tapes suivantes.

Allez √† **~/** et trouvez le dossier **davinci-kit-for-raspberry-pi**.

Trouvez le dossier **C**, faites un clic droit et s√©lectionnez **Ouvrir dans le terminal**.

.. image:: img/image50.png
    :width: 800
    :align: center

Ensuite, une fen√™tre s'ouvrira comme illustr√© ci-dessous. Vous avez maintenant acc√©d√© au chemin du code **1.1.1_BlinkingLed.c**.

.. image:: img/image51.png
    :width: 800
    :align: center

Dans les le√ßons suivantes, nous utiliserons des commandes pour acc√©der au fichier de 
code au lieu de faire un clic droit. Mais vous pouvez choisir la m√©thode qui vous 
convient le mieux.

2) Si vous vous connectez au Raspberry Pi √† distance, utilisez la commande ``cd`` pour changer de r√©pertoire :

.. raw:: html

   <run></run>

.. code-block::

   cd ~/davinci-kit-for-raspberry-pi/c/1.1.1/

.. note::
    Changer le r√©pertoire pour acc√©der au chemin du code de cette exp√©rience via la commande cd.

Dans tous les cas, vous √™tes maintenant dans le dossier C. Les proc√©dures suivantes, 
bas√©es sur ces deux m√©thodes, sont identiques. Continuons.

**√âtape 3 :** Compiler le code

.. raw:: html

   <run></run>

.. code-block::

   gcc 1.1.1_BlinkingLed.c -o BlinkingLed -lwiringPi

.. note::
    gcc est le *GNU Compiler Collection*. Ici, il est utilis√© pour compiler le 
    fichier en C *1_BlinkingLed.c* et g√©n√©rer un fichier ex√©cutable.

Dans la commande, ``-o`` signifie "output" (le caract√®re suivant imm√©diatement
 ``-o`` est le nom du fichier g√©n√©r√© apr√®s la compilation, et un ex√©cutable nomm√© 
 ``BlinkingLed`` sera cr√©√© ici) et ``-lwiringPi`` indique de charger la biblioth√®que 
 wiringPi (``l`` est l'abr√©viation de library).

**√âtape 4 :** Ex√©cuter le fichier ex√©cutable g√©n√©r√© √† l‚Äô√©tape pr√©c√©dente.

.. raw:: html

   <run></run>

.. code-block::

   sudo ./BlinkingLed

.. note::

   Pour contr√¥ler le GPIO, vous devez ex√©cuter le programme avec la commande 
   sudo (*superuser do*). La commande ``./`` indique le r√©pertoire actuel. La 
   commande compl√®te permet de lancer ``BlinkingLed`` dans le r√©pertoire actuel.

.. image:: img/image52.png
    :width: 800
    :align: center

Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.

.. note::

   Si cela ne fonctionne pas apr√®s l'ex√©cution ou s'il y a un message d'erreur : ¬´ wiringPi.h: Aucun fichier ou dossier de ce type ¬ª, veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

Si vous souhaitez modifier le fichier de code ``1.1.1_BlinkingLed.c``, appuyez sur
 ``Ctrl + C`` pour arr√™ter l'ex√©cution du code. Ensuite, tapez la commande suivante 
 pour l'ouvrir :

.. raw:: html

   <run></run>

.. code-block::

   nano 1.1.1_BlinkingLed.c

.. note::
    nano est un √©diteur de texte. Cette commande est utilis√©e pour ouvrir le 
    fichier de code ``1.1.1_BlinkingLed.c`` avec cet outil.

Appuyez sur ``Ctrl+X`` pour quitter. Si vous avez modifi√© le code, une invite vous 
demandera si vous souhaitez enregistrer les modifications ou non. Tapez ``Y`` 
(enregistrer) ou ``N`` (ne pas enregistrer). Ensuite, appuyez sur ``Entr√©e`` pour quitter. 
R√©p√©tez les **√âtapes 3** et **4** pour voir l'effet apr√®s modification.

.. image:: img/image53.png
    :width: 800
    :align: center

**Code**

Le programme est le suivant :

.. code-block:: c

   #include <wiringPi.h>  
   #include <stdio.h>
   #define LedPin      0
   int main(void)
   {
      // Si l'initialisation de wiringPi √©choue, afficher un message √† l'√©cran
      if(wiringPiSetup() == -1){
         printf("setup wiringPi failed !");
         return 1;
      }
      pinMode(LedPin, OUTPUT); // D√©finir LedPin comme sortie pour y √©crire des valeurs.
      while(1){
         // LED allum√©e
         digitalWrite(LedPin, LOW);
         printf("...LED on\n");
         delay(500);
         // LED √©teinte
         digitalWrite(LedPin, HIGH);
         printf("LED off...\n");
         delay(500);
      }
      return 0;
   }

**Explication du Code**

.. code-block:: c

   include <wiringPi.h>

La biblioth√®que de gestion mat√©rielle est con√ßue pour le langage C du Raspberry Pi. 
L'ajout de cette biblioth√®que facilite l'initialisation mat√©rielle ainsi que la gestion 
des sorties I/O, PWM, etc.

.. code-block:: c

   #include <stdio.h>

Biblioth√®que standard d'E/S. La fonction printf, utilis√©e pour afficher les donn√©es 
√† l'√©cran, est fournie par cette biblioth√®que. De nombreuses autres fonctions de 
traitement y sont √©galement disponibles pour des explorations suppl√©mentaires.

.. code-block:: c

   #define LedPin 0

Le GPIO17 de la carte d'extension T correspond au GPIO0 dans wiringPi. On assigne 
GPIO0 √† LedPin, ce qui signifie que LedPin repr√©sente GPIO0 dans le code.

.. code-block:: c

    if(wiringPiSetup() == -1){
        printf("setup wiringPi failed !");
        return 1;

Cette commande initialise wiringPi et suppose que le programme appelant utilise le 
sch√©ma de num√©rotation de pins de wiringPi.

Cette fonction doit √™tre appel√©e avec les privil√®ges root. En cas d'√©chec de 
l'initialisation, un message est imprim√© √† l'√©cran. La fonction "return" est 
utilis√©e pour sortir de la fonction en cours. Utiliser return dans la fonction 
main() terminera le programme.

.. code-block:: c

   pinMode(LedPin, OUTPUT);

D√©finir LedPin comme sortie pour y √©crire des valeurs.

.. code-block:: c

   digitalWrite(LedPin, LOW);

D√©finir GPIO0 √† 0V (niveau bas). √âtant donn√© que la cathode de la LED est connect√©e 
√† GPIO0, la LED s'allume si GPIO0 est d√©fini sur bas. √Ä l'inverse, si GPIO0 est d√©fini 
sur un niveau haut, ``digitalWrite (LedPin, HIGH)`` : la LED s'√©teindra.

.. code-block:: c

   printf("...LED¬†off\n");

La fonction printf est une fonction de biblioth√®que standard et son prototype se 
trouve dans le fichier d'en-t√™te "stdio.h". La forme g√©n√©rale de l'appel est : 
``printf(" cha√Æne de contr√¥le de format ", colonnes de la table de sortie)``. La 
cha√Æne de contr√¥le de format sert √† sp√©cifier le format de sortie, elle est divis√©e 
en cha√Æne de format et cha√Æne non format√©e. La cha√Æne de format commence par '%' suivie 
de caract√®res de format, comme '%d' pour une sortie d'entier d√©cimal. Les cha√Ænes non 
format√©es sont imprim√©es telles quelles. Ce qui est utilis√© ici est une cha√Æne non 
format√©e, suivie de "\n", un caract√®re de nouvelle ligne repr√©sentant un saut de ligne 
automatique apr√®s l'impression d'une cha√Æne.

.. code-block:: c

   delay(500);

Le d√©lai de 500 ms maintient l'√©tat HIGH ou LOW actuel pendant 500ms.

Il s'agit d'une fonction qui suspend le programme pendant un certain temps. 
Et la vitesse d'ex√©cution du programme est d√©termin√©e par notre mat√©riel. Ici, 
nous allumons ou √©teignons la LED. Sans la fonction de d√©lai, le programme s'ex√©cuterait 
tr√®s rapidement en boucle continue. La fonction delay nous aide donc √† √©crire et √† d√©boguer 
le programme.

.. code-block:: c

   return 0;

G√©n√©ralement plac√©e √† la fin de la fonction principale, elle indique que la fonction 
renvoie 0 apr√®s une ex√©cution r√©ussie.

