.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et Partagez** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

3.1.2 Bienvenue
===================

Introduction
--------------

Dans ce projet, nous allons utiliser un capteur PIR pour d√©tecter le mouvement 
des pi√©tons, et utiliser des servomoteurs, une LED et un buzzer pour simuler le 
fonctionnement d'une porte automatique de magasin. Lorsqu'un pi√©ton appara√Æt dans 
le champ de d√©tection du capteur PIR, le voyant s'allume, la porte s'ouvre, et le 
buzzer joue un son de bienvenue.

Composants
------------

.. image:: img/list_Welcome.png
    :align: center


Sch√©ma de c√¢blage
--------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: img/Schematic_three_one2.png
   :align: center


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image239.png    
    :width: 800
    :align: center

**√âtape 2 :** Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.2/

**√âtape 3 :** Compilez.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.2_Welcome.c -lwiringPi

**√âtape 4 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Apr√®s l'ex√©cution du code, si le capteur PIR d√©tecte une personne passant √† proximit√©, 
la porte s'ouvrira automatiquement (simul√©e par le servomoteur), le voyant s'allumera 
et le buzzer jouera une m√©lodie de bienvenue. Une fois la m√©lodie jou√©e, le syst√®me 
fermera automatiquement la porte et √©teindra le voyant, en attente du prochain passage 
d'une personne.

Il y a deux potentiom√®tres sur le module PIR : l'un pour ajuster la sensibilit√© et l'autre 
pour r√©gler la distance de d√©tection. Pour un fonctionnement optimal du module PIR, tournez 
les deux potentiom√®tres compl√®tement dans le sens antihoraire.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur 
    indiquant : ¬´ wiringPi.h : Aucun fichier ou r√©pertoire de ce type ¬ª, veuillez 
    vous r√©f√©rer √† :ref:`C code is not working?`.

**Explication du Code**

.. code-block:: c

    void setAngle(int pin, int angle){    // Cr√©e une fonction pour contr√¥ler l'angle du servomoteur.
        if(angle < 0)
            angle = 0;
        if(angle > 180)
            angle = 180;
        softPwmWrite(pin,Map(angle, 0, 180, 5, 25));   
    } 

Cr√©ez une fonction `setAngle` pour d√©finir l'angle du servomoteur de 0 √† 180 degr√©s.

.. code-block:: c

    void doorbell(){
    for(int i=0;i<sizeof(song)/4;i++){
            softToneWrite(BuzPin, song[i]); 
            delay(beat[i] * 250);
        }

Cr√©ez une fonction `doorbell` pour faire jouer de la musique au buzzer.

.. code-block:: c

    void closedoor(){
        digitalWrite(ledPin, LOW);   // √âteindre la LED
        for(int i=180; i>-1; i--){  // Faire tourner le servomoteur de l'angle maximum √† l'angle minimum
            setAngle(servoPin, i);
            delay(1);
        }
    }

Cr√©ez la fonction `closedoor` pour simuler la fermeture de la porte, √©teindre la LED et faire pivoter le servomoteur de 180 degr√©s √† 0 degr√©.

.. code-block:: c

    void opendoor(){
        digitalWrite(ledPin, HIGH);   // Allumer la LED
        for(int i=0;i<181;i++){  // Faire tourner le servomoteur de l'angle minimum √† l'angle maximum
            setAngle(servoPin,i);
            delay(1);
        }
        doorbell();
        closedoor();
    }

La fonction `opendoor()` comprend plusieurs √©tapes : allumer le voyant, faire 
pivoter le servomoteur (simulant l'ouverture de la porte), jouer la m√©lodie de 
bienvenue, et appeler la fonction `closedoor()` apr√®s la lecture de la m√©lodie.

.. code-block:: c

    int main(void)
    {
        if(wiringPiSetup() == -1){ // En cas d'√©chec d'initialisation de wiringPi, afficher un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }
        if(softToneCreate(BuzPin) == -1){
            printf("setup softTone failed !");
            return 1;
    ......

Dans la fonction `main()`, initialisez la biblioth√®que `wiringPi` et configurez 
`softTone`, puis d√©finissez `ledPin` en mode sortie et `pirPin` en mode entr√©e. 
Si le capteur PIR d√©tecte une personne passant √† proximit√©, la fonction `opendoor` 
sera appel√©e pour simuler l'ouverture de la porte.

