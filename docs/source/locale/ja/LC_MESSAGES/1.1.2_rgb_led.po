# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-19 18:22+0800\n"
"PO-Revision-Date: 2021-08-06 11:02+0800\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../1.1.2_rgb_led.rst:2
msgid "1.1.2 RGB LED"
msgstr "1.1.2 RGB LED"

#: ../1.1.2_rgb_led.rst:5
msgid "Introduction"
msgstr "前書き"

#: ../1.1.2_rgb_led.rst:7
msgid ""
"In this lesson, we will use it to control an RGB LED to flash various "
"kinds of colors."
msgstr "このレッスンでは、これを使用してRGB LEDを制御し、さまざまな種類の色を点滅させる。"

#: ../1.1.2_rgb_led.rst:11
msgid "Components"
msgstr "部品"

#: ../1.1.2_rgb_led.rst:17
msgid "Principle"
msgstr "原理"

#: ../1.1.2_rgb_led.rst:19
msgid "**PWM**"
msgstr "**PWM**"

#: ../1.1.2_rgb_led.rst:21
 
msgid ""
"Pulse Width Modulation, or PWM, is a technique for getting analog results"
" with digital means. Digital control is used to create a square wave, a "
"signal switched between on and off. This on-off pattern can simulate "
"voltages in between full on (5 Volts) and off (0 Volts) by changing the "
"portion of the time the signal spends on versus the time that the signal "
"spends off. The duration of \\\"on time\\\" is called pulse width. To get"
" varying analog values, you change, or modulate, that width. If you "
"repeat this on-off pattern fast enough with some device, an LED for "
"example, the result would be like this: the signal is a steady voltage "
"between 0 and 5v controlling the brightness of the LED."
msgstr "パルス幅変調（PWM）は、デジタル手段でアナログ結果を取得するための技術である。デジタル制御は、オンとオフを切り替える信号である方形波を作成するために使用される。このオン/オフパターンは、信号がオンになる時間と信号がオフになる時間の部分を変更することにより、完全にオン（5ボルト）である時と完全にオフ（0ボルト）である時の間の電圧をシミュレートできる。「オンタイム」の期間はパルス幅と呼ばれる。さまざまなアナログ値を取得するには、その幅を変更または変調できる。このオン/オフパターンを何らかのデバイス、たとえばLEDで十分に速く繰り返すと、結果は次のようになる：信号はLEDの輝度を制御する0〜5vの安定した電圧である。"

#: ../1.1.2_rgb_led.rst:32
msgid "**Duty Cycle**"
msgstr "**デューティサイクル**"

#: ../1.1.2_rgb_led.rst:34
msgid ""
"A duty cycle is the percentage of one period in which a signal is active."
" A period is the time it takes for a signal to complete an on-and-off "
"cycle. As a formula, a duty cycle may be expressed as:"
msgstr "デューティサイクルは、信号が有効である1周期の割合である。期間とは、信号がオンとオフのサイクルを完了するのにかかる時間である。式として、デューティサイクルは次のように表示される："

#: ../1.1.2_rgb_led.rst:43
msgid ""
"Where **D** is the duty cycle, **T** is the time the signal is active, "
"and **P** is the total period of the signal. Thus, a 60% duty cycle means"
" the signal is on 60% of the time but off 40% of the time. The \\\"on "
"time\\\" for a 60% duty cycle could be a fraction of a second, a day, or "
"even a week, depending on the length of the period."
msgstr ""
"ここで、**D** はデューティサイクル、**T** は信号がアクティブな時間、**P** は信号の合計周期です。 "
"したがって、60％のデューティサイクルは、信号が60％の時間オンであるが、40％の時間オフであることを意味します。 "
"60％のデューティサイクルの「定刻」は、期間の長さに応じて、数分の1秒、1日、または1週間になることもあります。"

#: ../1.1.2_rgb_led.rst:54
msgid "**RGB LED**"
msgstr "**RGB LED**"

#: ../1.1.2_rgb_led.rst:60
msgid ""
"The three primary colors of the RGB LED can be mixed into various colors "
"by brightness. The brightness of LED can be adjusted with PWM. Raspberry "
"Pi has only one channel for hardware PWM output, but it needs three "
"channels to control the RGB LED, which means it is difficult to control "
"the RGB LED with the hardware PWM of Raspberry Pi. Fortunately, the "
"softPwm library simulates PWM (softPwm) by programming. You only need to "
"include the header file softPwm.h (for C language users), and then call "
"the API it provides to easily control the RGB LED by multi-channel PWM "
"output, so as to display all kinds of color."
msgstr ""
"RGB LEDの3つの原色は、輝度によってさまざまな色に混ぜることができる。LEDの輝度はPWMで調整可能である。Raspberry "
"PiにはハードウェアPWM出力用のチャネルが1つしかないが、RGB LEDを制御するには3つのチャネルが必要である。つまり、Raspberry "
"PiのハードウェアPWMでRGB "
"LEDを制御することは困難である。幸いなことに、softPwmライブラリはプログラミングによってPWM（softPwm）をシミュレートする。ヘッダーファイルsoftPwm.h（ØC言語ユーザー向け）をインクルードし、提供されるAPIを呼び出して、マルチチャネルPWM出力によってRGB"
" LEDを簡単に制御するだけで、あらゆる種類の色を表示できる。"

#: ../1.1.2_rgb_led.rst:71
msgid "Schematic Diagram"
msgstr "回路図"

#: ../1.1.2_rgb_led.rst:73
msgid ""
"After connecting the pins of R, G, and B to a current limiting resistor, "
"connect them to the GPIO17, GPIO18, and GPIO27 respectively. The longest "
"pin (GND) of the LED connects to the GND of the Raspberry Pi. When the "
"three pins are given different PWM values, the RGB LED will display "
"different colors."
msgstr ""
"R、G、およびBのピンを電流制限抵抗器に接続した後、それぞれGPIO17、GPIO18、およびGPIO27に接続してください。LEDの最も長いピン（GND）は、Raspberry"
" Piの接地に接続する。3つのピンに異なるPWM値が与えられると、RGB LEDは異なる色を表示する。"

#: ../1.1.2_rgb_led.rst:80
msgid "T-Board Name"
msgstr "Tボード名"

#: ../1.1.2_rgb_led.rst:80
msgid "physical"
msgstr "physical"

#: ../1.1.2_rgb_led.rst:80
msgid "wiringPi"
msgstr "wiringPi"

#: ../1.1.2_rgb_led.rst:80
msgid "BCM"
msgstr "BCM"

#: ../1.1.2_rgb_led.rst:81
msgid "GPIO17"
msgstr "GPIO17"

#: ../1.1.2_rgb_led.rst:81
msgid "Pin 11"
msgstr "Pin 11"

#: ../1.1.2_rgb_led.rst:81
msgid "0"
msgstr "0"

#: ../1.1.2_rgb_led.rst:81
msgid "17"
msgstr "17"

#: ../1.1.2_rgb_led.rst:82
msgid "GPIO18"
msgstr "GPIO18"

#: ../1.1.2_rgb_led.rst:82
msgid "Pin 12"
msgstr "Pin 12"

#: ../1.1.2_rgb_led.rst:82
msgid "1"
msgstr "1"

#: ../1.1.2_rgb_led.rst:82
msgid "18"
msgstr "18"

#: ../1.1.2_rgb_led.rst:83
msgid "GPIO27"
msgstr "GPIO27"

#: ../1.1.2_rgb_led.rst:83
msgid "Pin 13"
msgstr "Pin 13"

#: ../1.1.2_rgb_led.rst:83
msgid "2"
msgstr "2"

#: ../1.1.2_rgb_led.rst:83
msgid "27"
msgstr "27"

#: ../1.1.2_rgb_led.rst:89
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../1.1.2_rgb_led.rst:91
msgid "**Step 1:** Build the circuit."
msgstr "**ステップ1:** 回路を作る。"

#: ../1.1.2_rgb_led.rst:98
msgid "For C Language Users"
msgstr "C言語ユーザー向け"

#: ../1.1.2_rgb_led.rst:100
msgid "**Step 2:** Go to the folder of the code."
msgstr "**ステップ2:** コードのフォルダーに入る。"

#: ../1.1.2_rgb_led.rst:110
msgid "**Step 3:** Compile the code."
msgstr "**ステップ3:** コードをコンパイルする。"

#: ../1.1.2_rgb_led.rst:122
 
msgid ""
"When the instruction \\\"gcc\\\" is executed, if \\\"-o\\\" is not "
"called, then the executable file is named \\\"a.out\\\"."
msgstr "命令「gcc」が実行されるときに「-o」が呼び出されない場合、EXEファイルは「a.out」と命名する。"

#: ../1.1.2_rgb_led.rst:124
msgid "**Step 4:** Run the executable file."
msgstr "**ステップ4:** EXEファイルを実行する。"

#: ../1.1.2_rgb_led.rst:135 ../1.1.2_rgb_led.rst:281
msgid ""
"After the code runs, you will see that RGB displays red, green, blue, "
"yellow, pink, and cyan."
msgstr "コードを実行すると、RGBが赤、緑、青、黄色、ピンク、およびシアンを表示する。"

#: ../1.1.2_rgb_led.rst:140
msgid ""
"If it does not work after running, please refer to :ref:`C code is not "
"working?`"
msgstr "実行後に機能しない場合は、:ref:`C code is not working?` を参照してください。"

#: ../1.1.2_rgb_led.rst:142 ../1.1.2_rgb_led.rst:284
msgid "**Code**"
msgstr "**コード**"

#: ../1.1.2_rgb_led.rst:197 ../1.1.2_rgb_led.rst:377
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../1.1.2_rgb_led.rst:203
msgid "Library used for realizing the pwm function of the software."
msgstr "ソフトウェアのpwm機能を実現するために使用されるライブラリ。"

#: ../1.1.2_rgb_led.rst:213
msgid ""
"The function is to use software to create a PWM pin, set its period "
"between 0x100us-100x100us."
msgstr "この機能は、ソフトウェアを使用してPWMピンを作成し、その周期を0x100us〜100x100usに設定することである。"

#: ../1.1.2_rgb_led.rst:216
msgid ""
"The prototype of the function softPwmCreate(LedPinRed, 0, 100) is as "
"follows:"
msgstr "関数softPwmCreate（LedPinRed、0、100）のプロトタイプは次のとおりである："

#: ../1.1.2_rgb_led.rst:223 ../1.1.2_rgb_led.rst:246
msgid "**Parameter pin:** Any GPIO pin of Raspberry Pi can be set as a PWM pin."
msgstr "**パラメータピン:** ラズベリーパイの任意のGPIOピンは、PWMピンとして設定することができます。"

#: ../1.1.2_rgb_led.rst:224
msgid ""
"**Parameter initialValue:** The initial pulse width is that initialValue "
"times100us."
msgstr "**Parameter initialValue:** 初期パルス幅はinitialValueに100usを掛けたものである。"

#: ../1.1.2_rgb_led.rst:225
msgid "**Parameter pwmRange:** the period of PWM is that pwmRange times100us."
msgstr "**Parameter pwmRange:** PWMの周期は、pwmRangeに100usを掛けたものである。"

#: ../1.1.2_rgb_led.rst:235
msgid ""
"This function is to set the colors of the LED. Using RGB, the formal "
"parameter **r_val** represents the luminance of the red one, **g_val** of"
" the green one, **b_val** of the blue one."
msgstr ""
"この機能はLEDの色を設定する。RGBを使用すると、仮パラメータは赤の輝度の **r_val** 、緑の輝度の **g_val** 、青の輝度の "
"**b_val** を表す。"

#: ../1.1.2_rgb_led.rst:239
msgid ""
"The prototype of the function softPwmWrite(LedPinBlue, b_val) is as "
"follows："
msgstr "関数softPwmWrite(LedPinBlue, b_val)のプロトタイプは次のとおりである："

#: ../1.1.2_rgb_led.rst:247
msgid ""
"**Parameter Value:** The pulse width of PWM is value times 100us. Note "
"that value can only be less than pwmRange defined previously, if it is "
"larger than pwmRange, the value will be given a fixed value, pwmRange."
msgstr ""
"**パラメータ値:** PWMのパルス幅は、値の100usの倍数です。値は、以前に定義された pwmRange より小さく、pwmRange "
"より大きい場合、値には固定値 pwmRange が与えられることに注意してください。"

#: ../1.1.2_rgb_led.rst:253
msgid ""
"Call the function defined before. Write 0xff into LedPinRed and 0x00 into"
" LedPinGreen and LedPinBlue. Only the Red LED lights up after running "
"this code. If you want to light up LEDs in other colors, just modify the "
"parameters."
msgstr "前に定義した関数を呼び出す。LedPinRedに0xffを、LedPinGreenとLedPinBlueに0x00を書き込む。このコードを実行すると、赤色のLEDのみが点灯する。他の色のLEDを点灯させる場合は、パラメーターを変更するだけである。"

#: ../1.1.2_rgb_led.rst:259
msgid "For Python Language Users"
msgstr "Python言語ユーザー向け"

#: ../1.1.2_rgb_led.rst:261
msgid "**Step 2:** Open the code file."
msgstr "**ステップ2:** コードファイルを開く。"

#: ../1.1.2_rgb_led.rst:271
msgid "**Step 3:** Run."
msgstr "**ステップ3:** 実行する。"

#: ../1.1.2_rgb_led.rst:288
 
msgid ""
"You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, "
"you need to go to  source code path like ``davinci-kit-for-raspberry-"
"pi/python``."
msgstr ""
"以下のコードを **変更/リセット/コピー/実行/停止** できます。 ただし、その前に、 ``davinci-kit-for-raspberry-pi/python`` のようなソースコードパスに移動する必要があります。"

#: ../1.1.2_rgb_led.rst:389
msgid ""
"Call the GPIO.PWM( )function to define Red, Green and Blue as PWM pins "
"and set the frequency of PWM pins to 2000Hz, then Use the Start() "
"function to set the initial duty cycle to zero."
msgstr ""
"GPIO.PWM() 関数を呼び出して、赤、緑、青をPWMピンとして定義し、PWMピンの周波数を2000Hzに設定してから、Start() "
"関数を使用して初期デューティサイクルをゼロに設定する。"

#: ../1.1.2_rgb_led.rst:398
msgid ""
"Define a MAP function for mapping values. For instance, x=50, in_min=0, "
"in_max=255, out_min=0, out_max=100. After the map function mapping, it "
"returns (50-0) \\* (100-0)/(255-0) +0=19.6, meaning that 50 in 0-255 "
"equals 19.6 in 0-100."
msgstr ""
"値をマッピングするためのMAP関数を定義する。たとえば、x = 50、in_min = 0、in_max = 255、out_min = "
"0、out_max = 100。マップ関数のマッピング後、（50-0）*（100-0）/（255-0）+ 0 = "
"19.6を戻す。つまり、0-255の50は0-100の19.6に相当する。"

#: ../1.1.2_rgb_led.rst:410
msgid ""
"Configures the three LEDs’ luminance with the inputted color value, "
"assign the first two values of the hexadecimal to R_val, the middle two "
"assigned to G_val, the last two values to B_val. For instance, if "
"color=0xFF00FF, R_val=（0xFF00FF & 0xFF0000）>> 16 = 0xFF, G_val = 0x00, "
"B_val=0xFF."
msgstr ""
"入力されたカラー値で三つのLEDの輝度を構成し、16進数の最初の二つの値をR_valに割り当て、中央の二つをG_valに割り当て、最後の二つの値をB_valに割り当てる。たとえば、color"
" = 0xFF00FF、R_val =（0xFF00FF＆0xFF0000）>> 16 = 0xFF、G_val = 0x00、B_val = "
"0xFFの場合。"

#: ../1.1.2_rgb_led.rst:422
msgid ""
"Use map function to map the R,G,B value among 0~255 into PWM duty cycle "
"range 0-100."
msgstr "マップ機能を使用して、0〜255のR、G、B値をPWMデューティサイクル範囲0〜100にマップする。"

#: ../1.1.2_rgb_led.rst:431
msgid ""
"Assign the mapped duty cycle value to the corresponding PWM channel to "
"change the luminance."
msgstr "マッピングされたデューティサイクルを対応するPWMチャネルに割り当てて、輝度を変更する。"

#: ../1.1.2_rgb_led.rst:440
msgid ""
"Assign every item in the COLOR list to the color respectively and change "
"the color of the RGB LED via the setColor() function."
msgstr "COLORリストのすべてのアイテムをそれぞれ色に割り当て、setColor() 関数を介してRGB LEDの色を変更する。"

#: ../1.1.2_rgb_led.rst:444
msgid "Phenomenon Picture"
msgstr "現象画像"

#~ msgid ""
#~ "If it does not work after running,"
#~ " please refer to :ref:`C code is "
#~ "not working?`."
#~ msgstr ""

