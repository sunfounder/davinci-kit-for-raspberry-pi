.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. √önete a otros apasionados para profundizar en el mundo de Raspberry Pi, Arduino y ESP32.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Acceso exclusivo**: Obt√©n primicias sobre nuevos lanzamientos de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

1.3.2 Servo
==============

Introducci√≥n
----------------

En esta lecci√≥n, aprenderemos a hacer que el servo gire.

Componentes
-------------

.. image:: img/list_1.3.2.png

Principio
------------

**Servo**

Un servo generalmente est√° compuesto por las siguientes partes: carcasa, 
eje, sistema de engranajes, potenci√≥metro, motor de corriente continua y una placa integrada.

.. image:: img/image121.png

Funciona de la siguiente manera: el microcontrolador env√≠a se√±ales PWM 
al servo, y la placa integrada dentro del servo recibe estas se√±ales a 
trav√©s del pin de se√±al, controlando el motor interno para que gire. 
Como resultado, el motor acciona el sistema de engranajes y luego mueve 
el eje despu√©s de la desaceleraci√≥n. El eje y el potenci√≥metro del servo 
est√°n conectados entre s√≠. Cuando el eje gira, acciona el potenci√≥metro, 
el cual env√≠a una se√±al de voltaje a la placa integrada. Entonces, la placa 
determina la direcci√≥n y velocidad de rotaci√≥n en funci√≥n de la posici√≥n 
actual, permiti√©ndole detenerse exactamente en la posici√≥n definida y mantenerse ah√≠.

.. image:: img/image122.png

El √°ngulo est√° determinado por la duraci√≥n de un pulso que se aplica al cable de 
control. A esto se le llama Modulaci√≥n de Ancho de Pulso (PWM). El servo espera 
recibir un pulso cada 20 ms. La longitud del pulso determinar√° cu√°nto gira el 
motor. Por ejemplo, un pulso de 1.5 ms har√° que el motor gire a la posici√≥n de 
90 grados (posici√≥n neutra).

Cuando se env√≠a un pulso de menos de 1.5 ms al servo, √©ste rota y mantiene su 
eje de salida un cierto n√∫mero de grados en sentido antihorario desde el punto 
neutro. Cuando el pulso es mayor a 1.5 ms, ocurre lo contrario. El ancho m√≠nimo 
y m√°ximo del pulso que permitir√° al servo girar a una posici√≥n v√°lida depende de 
cada servo. Generalmente, el pulso m√≠nimo ser√° de aproximadamente 0.5 ms y el 
m√°ximo ser√° de 2.5 ms.

.. image:: img/image123.jpeg

Diagrama Esquem√°tico
-----------------------

.. image:: img/image337.png


Procedimiento Experimental
------------------------------

**Paso 1:** Construye el circuito.

.. image:: img/image125.png
    :width: 800

Para Usuarios de Lenguaje C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Paso 2**: Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.3.2

**Paso 3**: Compila el c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.2_Servo.c -lwiringPi

**Paso 4**: Ejecuta el archivo compilado.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Despu√©s de ejecutar el programa, el servo girar√° de 0 grados a 180 grados, 
y luego de 180 grados a 0 grados, en un ciclo continuo.

.. note::

    Si no funciona despu√©s de ejecutarlo, o aparece un mensaje de error: \"wiringPi.h: No such file or directory", consulta :ref:`C code is not working?`.

**C√≥digo**

.. code-block:: c

    #include <wiringPi.h>
    #include <softPwm.h>
    #include <stdio.h>

    #define ServoPin    1       //define el servo en GPIO1
    long Map(long value,long fromLow,long fromHigh,long toLow,long toHigh){
        return (toHigh-toLow)*(value-fromLow) / (fromHigh-fromLow) + toLow;
    }
    void setAngle(int pin, int angle){    //Crear una funci√≥n para controlar el √°ngulo del servo.
        if(angle < 0)
            angle = 0;
        if(angle > 180)
            angle = 180;
        softPwmWrite(pin,Map(angle, 0, 180, 5, 25));   
    } 

    int main(void)
    {
        int i;
        if(wiringPiSetup() == -1){ //si la inicializaci√≥n de wiring falla, muestra un mensaje en pantalla
            printf("setup wiringPi failed !");
            return 1; 
        }
        softPwmCreate(ServoPin, 0, 200);       //inicializar el pin PWM del servo
        while(1){
            for(i=0;i<181;i++){     // Let servo rotate from 0 to 180.            	setAngle(ServoPin,i);
                delay(2);
            }
            delay(1000);
            for(i=181;i>-1;i--){        // Let servo rotate from 180 to 0.            	setAngle(ServoPin,i);
                delay(2);
            }
            delay(1000);
        }
        return 0;
    }
**Explicaci√≥n del C√≥digo**

.. code-block:: c

    long Map(long value,long fromLow,long fromHigh,long toLow,long toHigh){
        return (toHigh-toLow)*(value-fromLow) / (fromHigh-fromLow) + toLow;
    }

Crea una funci√≥n Map() para mapear el valor en el siguiente c√≥digo.

.. code-block:: c

    void setAngle(int pin, int angle){    //Crea una funci√≥n para controlar el √°ngulo del servo.
        if(angle < 0)
            angle = 0;
        if(angle > 180)
            angle = 180;
        softPwmWrite(pin,Map(angle, 0, 180, 5, 25));   
    } 

Crea una funci√≥n, setAngle(), para escribir el √°ngulo en el servo.

.. code-block:: c

    softPwmWrite(pin,Map(angle,0,180,5,25));  

Esta funci√≥n puede cambiar el ciclo de trabajo del PWM.

Para hacer que el servo gire de 0 a 180¬∞, el ancho de pulso debe variar
dentro del rango de 0.5ms a 2.5ms cuando el per√≠odo es de 20ms; en la
funci√≥n, softPwmCreate(), hemos establecido que el per√≠odo es
200x100us=20ms, por lo que necesitamos mapear 0 a 180 a 5x100us a 25x100us.

El prototipo de esta funci√≥n se muestra a continuaci√≥n.

.. code-block:: 

    int softPwmCreateÔºàint pinÔºåint initialValueÔºåint pwmRangeÔºâ;


**Par√°metro pin:** Cualquier pin GPIO de Raspberry Pi se puede configurar como pin PWM.

**Par√°metro initialValue:** El ancho de pulso inicial es el valor de initialValue
multiplicado por 100us.

**Par√°metro pwmRange:** El per√≠odo de PWM es el valor de pwmRange multiplicado por 100us.

Para Usuarios de Lenguaje Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Paso 2**: Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**Paso 3**: Ejecuta el archivo.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.2_Servo.py

Despu√©s de ejecutar el programa, el servo girar√° de 0 grados 
a 180 grados, y luego de 180 grados a 0 grados, en un ciclo continuo.

**C√≥digo**

.. note::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Antes de eso, necesitas dirigirte a la ruta del c√≥digo fuente como ``davinci-kit-for-raspberry-pi/python``. 
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    SERVO_MIN_PULSE = 500
    SERVO_MAX_PULSE = 2500

    ServoPin = 18

    def map(value, inMin, inMax, outMin, outMax):
        return (outMax - outMin) * (value - inMin) / (inMax - inMin) + outMin

    def setup():
        global p
        GPIO.setmode(GPIO.BCM)       # Numerar los GPIOs seg√∫n BCM
        GPIO.setup(ServoPin, GPIO.OUT)   # Configurar el modo de salida de ServoPin
        GPIO.output(ServoPin, GPIO.LOW)  # Poner ServoPin en bajo
        p = GPIO.PWM(ServoPin, 50)     # Configurar frecuencia en 50Hz
        p.start(0)                     # Ciclo de trabajo = 0
        
    def setAngle(angle):      # hacer que el servo gire a un √°ngulo espec√≠fico (0-180 grados) 
        angle = max(0, min(180, angle))
        pulse_width = map(angle, 0, 180, SERVO_MIN_PULSE, SERVO_MAX_PULSE)
        pwm = map(pulse_width, 0, 20000, 0, 100)
        p.ChangeDutyCycle(pwm)#mapear el √°ngulo al ciclo de trabajo y enviarlo
        
    def loop():
        while True:
            for i in range(0, 181, 5):   #hacer que el servo gire de 0 a 180 grados
                setAngle(i)     # Escribir en el servo
                time.sleep(0.002)
            time.sleep(1)
            for i in range(180, -1, -5): #hacer que el servo gire de 180 a 0 grados
                setAngle(i)
                time.sleep(0.001)
            time.sleep(1)

    def destroy():
        p.stop()
        GPIO.cleanup()

    if __name__ == '__main__':     #El programa comienza aqu√≠
        setup()
        try:
            loop()
        except KeyboardInterrupt:  # Cuando se presiona 'Ctrl+C', se ejecutar√° destroy().
            destroy()

**Explicaci√≥n del C√≥digo**

.. code-block:: python

    p = GPIO.PWM(ServoPin, 50)     # configurar la frecuencia en 50Hz
    p.start(0)                     # Ciclo de trabajo = 0

Configura el pin ServoPin como pin PWM, luego la frecuencia a 50Hz, y el per√≠odo a 20ms.

p.start(0): Ejecuta la funci√≥n PWM y establece el valor inicial en 0.

.. code-block:: python

    def setAngle(angle):      # hacer que el servo gire a un √°ngulo espec√≠fico (0-180 grados) 
        angle = max(0, min(180, angle))
        pulse_width = map(angle, 0, 180, SERVO_MIN_PULSE, SERVO_MAX_PULSE)
        pwm = map(pulse_width, 0, 20000, 0, 100)
        p.ChangeDutyCycle(pwm)#mapear el √°ngulo al ciclo de trabajo y enviarlo
    
Crea una funci√≥n, setAngle(), para escribir el √°ngulo que var√≠a de 0 a 180 en el servo.

.. code-block:: python

    angle = max(0, min(180, angle))

Este c√≥digo se usa para limitar el √°ngulo dentro del rango de 0 a 180¬∞.

La funci√≥n min() devuelve el m√≠nimo de los valores de entrada. 
Si 180 < √°ngulo, devuelve 180; si no, devuelve √°ngulo.

El m√©todo max() devuelve el elemento m√°ximo en un iterable o el mayor de 
dos o m√°s par√°metros. Si 0 > √°ngulo, devuelve 0; si no, devuelve √°ngulo.

.. code-block:: python

    pulse_width = map(angle, 0, 180, SERVO_MIN_PULSE, SERVO_MAX_PULSE)
    pwm = map(pulse_width, 0, 20000, 0, 100)
    p.ChangeDutyCycle(pwm)

Para ajustar un rango de 0 a 180¬∞ en el servo, el ancho de pulso del servo
se configura entre 0.5ms (500us) y 2.5ms (2500us).

El per√≠odo de PWM es 20ms (20000us), por lo que el ciclo de trabajo de PWM es
(500/20000)% - (2500/20000)%, y el rango de 0 a 180 se asigna a 2.5 a
12.5.

Imagen de Fen√≥meno
------------------------

.. image:: img/image126.jpeg
