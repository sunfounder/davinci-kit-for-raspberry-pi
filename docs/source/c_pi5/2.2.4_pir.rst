.. note::

    ¬°Hola! Bienvenidos a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto con otros apasionados.

    **¬øPor qu√© unirse?**

    - **Soporte de Expertos**: Soluciona problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones especiales en d√≠as festivos.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

2.2.4 PIR
===========

Introducci√≥n
-------------

En este proyecto, construiremos un dispositivo utilizando sensores 
piroel√©ctricos de infrarrojos para detectar el cuerpo humano. Cuando 
alguien se acerque al LED, este se encender√° autom√°ticamente; de lo 
contrario, permanecer√° apagado. Este sensor de movimiento por infrarrojos 
es capaz de detectar la radiaci√≥n infrarroja emitida por personas y animales.

Componentes
-------------

.. image:: img/list_2.2.4_pir.png


Principio
------------

El sensor PIR detecta la radiaci√≥n de calor infrarrojo, que se usa para 
detectar la presencia de organismos que emiten este tipo de radiaci√≥n.

El sensor PIR est√° dividido en dos ranuras conectadas a un amplificador 
diferencial. Cuando un objeto est√°tico se encuentra frente al sensor, 
ambas ranuras reciben la misma cantidad de radiaci√≥n y la salida es cero. 
En cambio, si un objeto en movimiento est√° frente al sensor, una de las 
ranuras recibe m√°s radiaci√≥n que la otra, lo que provoca que la salida 
oscile entre niveles altos y bajos. Este cambio en la salida es consecuencia 
de la detecci√≥n de movimiento.

.. image:: img/image211.png
    :width: 200




Despu√©s de conectar el m√≥dulo de detecci√≥n, hay un per√≠odo de inicializaci√≥n 
de un minuto. Durante este tiempo, el m√≥dulo emitir√° se√±ales entre 0 y 3 veces 
a intervalos. Luego, el m√≥dulo entrar√° en modo de espera. Mant√©n alejadas las 
fuentes de interferencia, como la luz y otros elementos, para evitar falsos 
positivos debido a se√±ales externas. Es mejor utilizar el m√≥dulo en ausencia 
de corrientes de aire, ya que el viento tambi√©n puede afectar el sensor.

.. image:: img/image212.png
    :width: 400



**Ajuste de Distancia**


Girando el potenci√≥metro de ajuste de distancia en el sentido de las agujas del 
reloj, aumenta el rango de detecci√≥n, con una distancia m√°xima de aproximadamente 
0 a 7 metros. Si se gira en sentido contrario, el rango se reduce, con una distancia 
m√≠nima de detecci√≥n de alrededor de 0 a 3 metros.

**Ajuste de Retardo**

Girando el potenci√≥metro de ajuste de retardo en sentido horario, se 
incrementa el tiempo de retardo de detecci√≥n, con un m√°ximo de hasta 
300 segundos. En cambio, si se gira en sentido antihorario, el retardo 
disminuye, con un m√≠nimo de 5 segundos.

Dos modos de disparo (se eligen mediante el puente de configuraci√≥n):


-  **H:** **Modo de disparo repetible**, despu√©s de detectar a una persona, 
el m√≥dulo mantiene la salida en nivel alto. Durante el per√≠odo de retardo, 
si alguien entra en el rango de detecci√≥n, la salida continuar√° en nivel alto.
  
-  **L:** **Modo de disparo no repetible**, la salida se mantiene en nivel alto 
solo mientras detecta a una persona. Despu√©s del retardo, cambia autom√°ticamente 
de alto a bajo.



Diagrama de Circuito
-------------------------

.. image:: img/image327.png


Procedimientos Experimentales
---------------------------------

**Paso 1:** Construye el circuito.

.. image:: img/image214.png
    :width: 800

**Paso 2:** Accede a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.4/

**Paso 3:** Compila el c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.4_PIR.c -lwiringPi

**Paso 4:** Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Despu√©s de ejecutar el c√≥digo, el PIR detectar√° el entorno y har√° que el LED 
RGB se ilumine en amarillo si detecta a alguien pasando. El m√≥dulo PIR tiene 
dos potenci√≥metros: uno para ajustar la sensibilidad y otro para la distancia 
de detecci√≥n. Para un mejor funcionamiento, g√≠ralos en sentido antihorario 
hasta el final.

.. image:: img/PIR_TTE.png

.. note::

    Si no funciona tras ejecutar el c√≥digo, o aparece el mensaje de error: \"wiringPi.h: No such file or directory", consulta :ref:`C code is not working?`.


**C√≥digo**

.. code-block:: c

    #include <wiringPi.h>
    #include <softPwm.h>
    #include <stdio.h>
    #define uchar unsigned char

    #define pirPin    0     //el pir se conecta a GPIO0
    #define redPin    1
    #define greenPin  2
    #define bluePin   3

    void ledInit(void){
        softPwmCreate(redPin,  0, 100);
        softPwmCreate(greenPin,0, 100);
        softPwmCreate(bluePin, 0, 100);
    }
    void ledColorSet(uchar r_val, uchar g_val, uchar b_val){
        softPwmWrite(redPin,   r_val);
        softPwmWrite(greenPin, g_val);
        softPwmWrite(bluePin,  b_val);
    }
    int main(void)
    {
        int pir_val;
        if(wiringPiSetup() == -1){ //si inicializar wiring falla, imprime mensaje en pantalla
            printf("setup wiringPi failed !");
            return 1;
        }
        ledInit();
        pinMode(pirPin, INPUT);
        while(1){
        pir_val = digitalRead(pirPin);
            if(pir_val== 1){ //si la lectura de pir es nivel ALTO
                ledColorSet(0xff,0xff,0x00); 
            }
            else {
            ledColorSet(0x00,0x00,0xff); 
            }
        }
        return 0;
    }

**Explicaci√≥n del C√≥digo**

.. code-block:: c

    void ledInit(void);
    void ledColorSet(uchar r_val, uchar g_val, uchar b_val);

Estas funciones configuran el color del LED RGB. Consulta :ref:`1.1.2 LED RGB` para m√°s detalles.

.. code-block:: c

    int main(void)
    {
        int pir_val;
        //‚Ä¶‚Ä¶ 
        pinMode(pirPin, INPUT);
        while(1){
        pir_val = digitalRead(pirPin);
            if(pir_val== 1){ //si la lectura de pir es nivel ALTO
                ledColorSet(0xff,0xff,0x00); 
            }
            else {
            ledColorSet(0x00,0x00,0xff); 
            }
        }
        return 0;
    }

Cuando el PIR detecta el espectro infrarrojo humano, el LED RGB emite luz 
amarilla; de lo contrario, emite luz azul.
