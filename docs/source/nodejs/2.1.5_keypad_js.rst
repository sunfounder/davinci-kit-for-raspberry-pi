.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des conseils et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d‚Äôun acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.1.5 Clavier matriciel
=========================

Introduction
---------------

Un clavier matriciel est un ensemble rectangulaire de boutons. Dans ce projet, 
nous allons l'utiliser pour saisir des caract√®res.

Composants
-------------

.. image:: ../img/list_2.1.5_keypad.png



Sch√©ma de c√¢blage
-------------------

.. image:: ../img/image315.png


.. image:: ../img/image316.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image186.png

**√âtape 2 :** Ouvrir le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo node keypad.js

Une fois le code ex√©cut√©, les valeurs des touches enfonc√©es sur le 
clavier (valeur des touches) seront affich√©es √† l‚Äô√©cran.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    var rowsPins = [18,23,24,25];
    var colsPins = [10,6,27,17];
    var keys = ["1","2","3","A",
            "4","5","6","B",
            "7","8","9","C",
            "*","0","#","D"];      

    for(let i=0;i<rowsPins.length;i++){
        rowsPins[i] = new Gpio(rowsPins[i],{mode: Gpio.OUTPUT})
    }
    for(let i=0;i<colsPins.length;i++){
        colsPins[i] = new Gpio(colsPins[i],{
            mode: Gpio.INPUT,
            pullUpDown: Gpio.PUD_DOWN,
            edge: Gpio.RISING_EDGE
        })
    }

    var last_key_pressed = 0;

    var col=-1;
    for(let i=0;i<colsPins.length;i++){
        colsPins[i].on('interrupt',()=>{
            col=i;
            pressed_keys=keys[row*colsPins.length+col];
            if(last_key_pressed!=pressed_keys){
                console.log(`${pressed_keys}`);
            }
            last_key_pressed = pressed_keys;
        });
    }

    var row=-1;
    setInterval(() => {
        row=(row+1)%rowsPins.length;
        for(let i=0;i<rowsPins.length;i++){
            rowsPins[i].digitalWrite(0);
        }
        rowsPins[row].digitalWrite(1);
    }, 10);

**Explication du code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    var rowsPins = [18,23,24,25];
    var colsPins = [10,6,27,17];
    var keys = ["1","2","3","A",
            "4","5","6","B",
            "7","8","9","C",
            "*","0","#","D"];      

    for(let i=0;i<rowsPins.length;i++){
        rowsPins[i] = new Gpio(rowsPins[i],{mode: Gpio.OUTPUT})
    }
    for(let i=0;i<colsPins.length;i++){
        colsPins[i] = new Gpio(colsPins[i],{
            mode: Gpio.INPUT,
            pullUpDown: Gpio.PUD_DOWN,
            edge: Gpio.RISING_EDGE
        })
    }

D√©clarez deux ensembles de broches et une matrice en fonction du style du clavier.

Quatre broches correspondent aux lignes du clavier, d√©finies en mode OUTPUT ;
Les quatre autres broches correspondent aux colonnes, d√©finies en mode INPUT, et configur√©es pour d√©clencher une interruption sur front montant.

Le principe permettant au microcontr√¥leur de d√©tecter la touche enfonc√©e est le suivant :
Les quatre broches des lignes fournissent un signal haut √† tour de r√¥le. Si une touche est enfonc√©e,
la broche de colonne correspondante d√©tectera ce signal haut et d√©clenchera l'interruption de front montant.

Par exemple, si j'appuie sur la touche **3**, lorsque les broches des 2e, 3e et 4e lignes envoient un signal haut, il n‚Äôy a aucun effet.
Lorsque la broche de la premi√®re ligne envoie le signal haut, la broche de la 3e colonne d√©tecte le signal et d√©clenche l'interruption. √Ä ce moment, les broches de la 1re, 2e et 4e colonnes ne d√©clenchent aucun √©v√©nement.

Ainsi, le microcontr√¥leur peut d√©terminer que la touche enfonc√©e est en position (1, 3), ce qui correspond √† la touche **3**.

.. image:: ../img/image187.png


.. code-block:: js

    var row=-1;
    setInterval(() => {
        row=(row+1)%rowsPins.length;
        for(let i=0;i<rowsPins.length;i++){
            rowsPins[i].digitalWrite(0);
        }
        rowsPins[row].digitalWrite(1);
    }, 10);

Les quatre broches des lignes sont p√©riodiquement activ√©es en haut, et la variable ``row`` est utilis√©e pour localiser la broche de ligne actuellement activ√©e.

.. code-block:: js

    var col=-1;
    for(let i=0;i<colsPins.length;i++){
        colsPins[i].on('interrupt',()=>{
            col=i;
            // pressed_keys=keys[row*colsPins.length+col];
            // if(last_key_pressed!=pressed_keys){
            //     console.log(`${pressed_keys}`);
            // }
            // last_key_pressed = pressed_keys;
        });
    }

D√©finissez des fonctions d‚Äôinterruption pour les quatre broches des colonnes, 
et la variable ``col`` est utilis√©e pour identifier les broches de colonne qui d√©clenchent l'interruption sur front montant.

.. code-block:: js

    pressed_keys=keys[row*colsPins.length+col];
    if(last_key_pressed!=pressed_keys){
        console.log(`${pressed_keys}`);
    }
    last_key_pressed = pressed_keys;

Ce morceau de code permet de r√©cup√©rer la valeur sp√©cifique de la touche press√©e √† partir de la matrice ``keys`` selon les valeurs de ``row`` et ``col``.
√Ä chaque nouvelle valeur d√©tect√©e, celle-ci est imprim√©e.

Image du r√©sultat
--------------------

.. image:: ../img/image188.jpeg

