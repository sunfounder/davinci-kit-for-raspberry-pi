.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques gr√¢ce √† notre communaut√© et notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des promotions sp√©ciales et √† des tirages au sort.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.1.3_py_pi5:

1.1.3 Graphique √† LED
=========================

Introduction
---------------

Dans ce projet, nous allons allumer s√©quentiellement les lumi√®res sur le graphique √† LED.

Composants n√©cessaires
-------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/1.1.3_led_bar_list.png

.. raw:: html

   <br/>

Sch√©ma de c√¢blage
-----------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SPICE0       Pin 24   10       8
SPICE1       Pin 26   11       7
GPIO12       Pin 32   26       12
GPIO16       Pin 36   27       16
GPIO20       Pin 38   28       22
GPIO21       Pin 40   29       21
============ ======== ======== ===

.. image:: ../python_pi5/img/1.1.3_LedBarGraph_schematic.png

Proc√©dure exp√©rimentale
----------------------------

**√âtape 1** : Construisez le circuit.

.. note::

    Faites attention au sens de connexion. Si vous branchez √† l'envers, la LED ne s'allumera pas.

.. image:: ../python_pi5/img/1.1.3_LedBarGraph_circuit.png

**√âtape 2** : Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3** : Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.3_LedBarGraph.py

Apr√®s l'ex√©cution du code, vous verrez les LED du graphique √† LED s'allumer et s'√©teindre de mani√®re s√©quentielle.

.. warning::

    Si un message d'erreur appara√Æt tel que ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`. 

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, vous pouvez l'ex√©cuter directement pour observer le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   from time import sleep

   # D√©finir les broches GPIO o√π les LED sont connect√©es
   led_pins = [18, 23, 24, 25, 8, 7, 12, 16, 20, 21]

   # Cr√©er des objets LED pour chaque broche
   leds = [LED(pin) for pin in led_pins]

   def odd_led_bar_graph():
       # Allumer s√©quentiellement les LED impaires (index 0, 2, 4, etc.)
       for i in range(5):
           j = i * 2  # Calculer l'index impair
           leds[j].on()  # Allumer la LED impaire
           sleep(0.3)    # Attendre pour effet visuel
           leds[j].off() # √âteindre la LED

   def even_led_bar_graph():
       # Allumer s√©quentiellement les LED paires (index 1, 3, 5, etc.)
       for i in range(5):
           j = i * 2 + 1  # Calculer l'index pair
           leds[j].on()   # Allumer la LED paire
           sleep(0.3)     # Attendre pour effet visuel
           leds[j].off()  # √âteindre la LED

   def all_led_bar_graph():
       # Allumer s√©quentiellement toutes les LED une par une
       for led in leds:
           led.on()       # Allumer la LED
           sleep(0.3)     # Attendre pour effet visuel
           led.off()      # √âteindre la LED

   def turn_off_all_leds():
       # √âteindre toutes les LED √† la fois
       for led in leds:
           led.off()

   try:
       # Boucle principale pour parcourir les motifs de LED
       while True:
           odd_led_bar_graph()   # Activer les LED impaires
           sleep(0.3)            # Pause entre les motifs
           even_led_bar_graph()  # Activer les LED paires
           sleep(0.3)            # Pause entre les motifs
           all_led_bar_graph()   # Activer toutes les LED
           sleep(0.3)            # Pause avant de recommencer

   except KeyboardInterrupt:
       # G√©rer l'interruption (Ctrl+C) proprement
       turn_off_all_leds()      # Assurez-vous que toutes les LED sont √©teintes √† la sortie
       pass


**Explication du code**

#. Ces lignes importent les classes et fonctions n√©cessaires. ``LED`` de ``gpiozero`` pour le contr√¥le des LED et ``sleep`` de ``time`` pour les d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED
       from time import sleep

#. La liste ``led_pins`` contient les num√©ros de broche GPIO. ``leds`` est une liste d'objets ``LED``, chacun correspondant √† une broche de ``led_pins``.

   .. code-block:: python

       # D√©finir les broches GPIO o√π les LED sont connect√©es
       led_pins = [18, 23, 24, 25, 8, 7, 12, 16, 20, 21]

       # Cr√©er des objets LED pour chaque broche
       leds = [LED(pin) for pin in led_pins]

#. Faire en sorte que les LED impaires s'allument tour √† tour.

   .. code-block:: python

       def odd_led_bar_graph():
           # Allumer s√©quentiellement les LED impaires (index 0, 2, 4, etc.)
           for i in range(5):
               j = i * 2  # Calculer l'index impair
               leds[j].on()  # Allumer la LED impaire
               sleep(0.3)    # Attendre pour effet visuel
               leds[j].off() # √âteindre la LED

#. Faire en sorte que les LED paires s'allument tour √† tour.

   .. code-block:: python

       def even_led_bar_graph():
           # Allumer s√©quentiellement les LED paires (index 1, 3, 5, etc.)
           for i in range(5):
               j = i * 2 + 1  # Calculer l'index pair
               leds[j].on()   # Allumer la LED paire
               sleep(0.3)     # Attendre pour effet visuel
               leds[j].off()  # √âteindre la LED

#. Faire en sorte que toutes les LED s'allument tour √† tour.

   .. code-block:: python

       def all_led_bar_graph():
           # Allumer s√©quentiellement toutes les LED une par une
           for led in leds:
               led.on()       # Allumer la LED
               sleep(0.3)     # Attendre pour effet visuel
               led.off()      # √âteindre la LED

#. La boucle ``while True`` parcourt continuellement les motifs de LED. Le bloc ``except`` g√®re une interruption clavier (Ctrl+C) et s'assure que toutes les LED sont √©teintes √† la sortie.

   .. code-block:: python

       try:
           # Boucle principale pour parcourir les motifs de LED
           while True:
               odd_led_bar_graph()   # Activer les LED impaires
               sleep(0.3)            # Pause entre les motifs
               even_led_bar_graph()  # Activer les LED paires
               sleep(0.3)            # Pause entre les motifs
               all_led_bar_graph()   # Activer toutes les LED
               sleep(0.3)            # Pause avant de recommencer

       except KeyboardInterrupt:
           # G√©rer l'interruption (Ctrl+C) proprement
           turn_off_all_leds()      # Assurez-vous que toutes les LED sont √©teintes √† la sortie
           pass



