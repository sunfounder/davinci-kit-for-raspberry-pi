.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques gr√¢ce √† l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Obtenez un acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

1.1.1 LED Clignotante
========================

Introduction
--------------

Dans ce projet, nous allons apprendre √† cr√©er un effet de LED clignotante par 
programmation. En fonction de vos param√®tres, la LED pourra produire une s√©rie 
de ph√©nom√®nes int√©ressants. Alors, lancez-vous !

Composants
--------------

.. image:: img/blinking_led_list.png
    :width: 800
    :align: center

Sch√©ma de c√¢blage
--------------------

Dans cette exp√©rience, connectez une r√©sistance de 220Œ© √† l‚Äôanode (la broche longue 
de la LED), puis reliez la r√©sistance au 3,3 V, et connectez la cathode (la broche courte) 
de la LED au GPIO17 du Raspberry Pi. Par cons√©quent, pour allumer une LED, nous devons 
r√©gler le GPIO17 √† un niveau bas (0 V). Nous pouvons obtenir cet effet en programmant.

.. image:: img/image48.png
    :width: 800
    :align: center

Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: img/image49.png
    :width: 800
    :align: center

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

   cd ~/davinci-kit-for-raspberry-pi/nodejs/

.. note::
    Acc√©dez au r√©pertoire du code de cette exp√©rience avec la commande ``cd``.

**√âtape 3 :** Ex√©cuter le code

.. raw:: html

   <run></run>

.. code-block::

   sudo node blink.js

.. note::
    Ici, sudo signifie "superuser do", et node indique que le fichier est ex√©cut√© avec Node.js.

Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.

**√âtape 4 :** Si vous souhaitez modifier le fichier de code blink.js, 
appuyez sur ``Ctrl + C`` pour arr√™ter l'ex√©cution du code. Ensuite, 
tapez la commande suivante pour ouvrir blink.js :

.. raw:: html

   <run></run>

.. code-block::

   nano blink.js

.. note::
    nano est un √©diteur de texte. Cette commande est utilis√©e pour ouvrir le 
    fichier de code blink.js avec cet √©diteur.

Appuyez sur ``Ctrl + X`` pour quitter. Si vous avez modifi√© le code, un message 
vous demandera si vous souhaitez enregistrer les modifications. Tapez ``Y`` 
(enregistrer) ou ``N`` (ne pas enregistrer).

Appuyez ensuite sur ``Entr√©e`` pour quitter. Tapez √† nouveau nano blink.js pour 
observer les effets apr√®s modification.

**Code**

Voici le code du programme :

.. code-block:: js

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   var led_state = 0;

   function blink_led(){
      led.digitalWrite(led_state);
      led_state = !led_state;
   }

   setInterval(blink_led,300);

Vous pouvez √©galement √©crire le code sous forme de fonction fl√©ch√©e, plus sp√©cifique √† JavaScript :

.. code-block:: js

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   var led_state = 0;

   setInterval(() => {
      led.digitalWrite(led_state);
      led_state = !led_state;
   }, 300);

**Explication du code**

.. code-block:: js

   const Gpio = require('pigpio').Gpio;

Importer le constructeur Gpio du package pigpio de cette mani√®re, 
puis d√©finir une constante ``Gpio`` pour repr√©senter ce constructeur.

Avec ce constructeur, nous pouvons utiliser JavaScript pour contr√¥ler 
les appareils √©lectroniques. ``pigpio`` peut √™tre utilis√© pour impl√©menter 
un contr√¥le rapide des GPIO, PWM, servomoteurs, notifications de changement 
d‚Äô√©tat et gestion des interruptions.

* `pigpio - github <https://github.com/fivdi/pigpio>`_

.. A wrapper for the pigpio C library to enable fast GPIO, PWM, servo control, 
.. state change notification and interrupt handling with JS on the Raspberry Pi Zero, 
.. 1, 2, 3 or 4.

.. code-block:: js

   const led = new Gpio(17, {mode: Gpio.OUTPUT});

Le mot-cl√© ``new`` est utilis√© pour construire des objets instanci√©s de la classe.

Connectez la LED au GPIO17 de la carte d'extension en T, d√©finissez le mode de ``led`` 
en sortie et assignez-le √† la constante ``led`` ; c‚Äôest-√†-dire que nous construisons un 
objet GPIO17 ``led``, et son mode est d√©fini comme √©tant en sortie.

Il existe deux fa√ßons de num√©roter les broches IO sur le Raspberry Pi : la num√©rotation 
BOARD et la num√©rotation BCM. Dans notre projet, nous utilisons la num√©rotation BCM. 
Vous devez d√©finir chaque canal utilis√© comme entr√©e ou sortie.

.. code-block:: js

   function blink_led(){
      led.digitalWrite(led_state);
      led_state = !led_state;
   }

   setInterval(blink_led, 300);

La m√©thode ``setInterval()`` permet d‚Äôappeler des fonctions ou de calculer des expressions √† une p√©riode sp√©cifi√©e (en millisecondes).
Ici, nous changeons l'√©tat de la LED avec une p√©riode de 300 ms.

*  `setInerval <https://developer.mozilla.org/en-US/docs/Web/API/setInterval>`_

La m√©thode ``gpio.digitalWrite(level)`` d√©finit le niveau GPIO √† 1 ou 0.

.. code-block:: js


   var led_state = 0;

   setInterval(() => {
      led.digitalWrite(led_state);
      led_state = !led_state;
   }, 300);

R√©√©crivez le code en tant que fonction fl√©ch√©e pour le rendre plus concis.

* `Arrow Functions <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions>`_

Image du r√©sultat
--------------------

.. image:: img/image54.jpeg
    :width: 800
    :align: center