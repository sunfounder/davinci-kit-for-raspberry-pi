.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez vos d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pi5_ultrasonic:

2.2.5 Module Capteur Ultrasonique
=====================================

Introduction
---------------

Le capteur ultrasonique utilise des ultrasons pour d√©tecter des objets et mesurer 
des distances avec pr√©cision. Il √©met des ondes ultrasoniques et les convertit en 
signaux √©lectroniques.

Composants n√©cessaires
------------------------

Pour ce projet, nous avons besoin des composants suivants. 

.. image:: ../python_pi5/img/2.2.5_ultrasonic_list.png

.. raw:: html

   <br/>


Sch√©ma de c√¢blage
--------------------

.. image:: ../python_pi5/img/2.2.5_ultrasonic_schematic.png


Proc√©dure exp√©rimentale
----------------------------

**√âtape 1 :** Montez le circuit.

.. image:: ../python_pi5/img/2.2.5_ultrasonic_circuit.png

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.5_Ultrasonic.py

Lorsque le code s'ex√©cute, le module de capteur ultrasonique d√©tecte la distance 
entre l'obstacle devant lui et le module. La valeur de la distance est ensuite 
affich√©e √† l'√©cran.

.. warning::

    En cas de message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code, comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import DistanceSensor
   from time import sleep

   # Initialiser le capteur de distance avec la biblioth√®que GPIO Zero
   # Le pin Trigger est connect√© √† GPIO 23, le pin Echo √† GPIO 24
   sensor = DistanceSensor(echo=24, trigger=23)

   try:
       # Boucle principale pour mesurer et afficher la distance en continu
       while True:
           dis = sensor.distance * 100  # Mesurer la distance et la convertir de m√®tres en centim√®tres
           print('Distance: {:.2f} cm'.format(dis))  # Afficher la distance avec une pr√©cision de deux d√©cimales
           sleep(0.3)  # Attendre 0,3 seconde avant la prochaine mesure

   except KeyboardInterrupt:
       # G√©rer l'interruption clavier (Ctrl+C) pour quitter la boucle proprement
       pass


**Explication du code**

#. Importe la classe ``DistanceSensor`` de la biblioth√®que ``gpiozero`` pour la mesure de distance, ainsi que la fonction ``sleep`` du module ``time`` pour introduire des pauses.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import DistanceSensor
       from time import sleep

#. Initialise le capteur de distance ultrasonique avec le pin Echo connect√© √† GPIO 24 et le pin Trigger √† GPIO 23.

   .. code-block:: python

       # Initialiser le capteur de distance avec la biblioth√®que GPIO Zero
       # Le pin Trigger est connect√© √† GPIO 23, le pin Echo √† GPIO 24
       sensor = DistanceSensor(echo=24, trigger=23)

#. La boucle principale mesure en continu la distance, la convertit de m√®tres en centim√®tres et l'affiche avec deux d√©cimales de pr√©cision. Ensuite, il attend 0,3 seconde avant de refaire une mesure. L'instruction ``KeyboardInterrupt`` (comme Ctrl+C) permet une sortie propre du script.

   .. code-block:: python

       try:
           # Boucle principale pour mesurer et afficher la distance en continu
           while True:
               dis = sensor.distance * 100  # Mesurer la distance et la convertir de m√®tres en centim√®tres
               print('Distance: {:.2f} cm'.format(dis))  # Afficher la distance avec une pr√©cision de deux d√©cimales
               sleep(0.3)  # Attendre 0,3 seconde avant la prochaine mesure

       except KeyboardInterrupt:
           # G√©rer l'interruption clavier (Ctrl+C) pour quitter la boucle proprement
           pass
