.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour enrichir vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.2.2_py_pi5:

1.2.2 Buzzer passif
=======================

Introduction
--------------

Dans ce projet, nous allons apprendre √† faire jouer de la musique √† un buzzer passif.

Composants requis
--------------------

Dans ce projet, nous aurons besoin des composants suivants :

.. image:: ../python_pi5/img/1.2.2_passive_buzzer_list.png

.. raw:: html

   <br/>

Sch√©ma de c√¢blage
--------------------

Dans cette exp√©rience, un buzzer passif, un transistor PNP et une r√©sistance de 1kŒ© sont 
utilis√©s entre la base du transistor et le GPIO pour prot√©ger le transistor.

Lorsque le GPIO17 re√ßoit diff√©rentes fr√©quences, le buzzer √©met diff√©rents sons ; ainsi, 
le buzzer peut jouer de la musique.

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ===

.. image:: ../python_pi5/img/1.2.2_passive_buzzer_schematic.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit (le buzzer passif poss√®de une carte de circuit imprim√© verte √† l'arri√®re).

.. image:: ../python_pi5/img/1.2.2_PassiveBuzzer_circuit.png

**√âtape 2 :** Changez de r√©pertoire.
.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le script.
.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.2.2_PassiveBuzzer.py

Lorsque le script s'ex√©cute, le buzzer joue un morceau de musique.

.. warning::

    Si le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address`` appara√Æt, consultez :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. 
    Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source comme 
    ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification du code, vous 
    pouvez l'ex√©cuter directement pour observer le r√©sultat.
.. raw:: html

    <run></run>
.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import TonalBuzzer
   from time import sleep

   # Initialiser un objet TonalBuzzer connect√© au GPIO 17
   tb = TonalBuzzer(17)

   def play(tune):
       """
       Play a musical tune using the buzzer.
       :param tune: List of tuples (note, duration), where each tuple represents a note and its duration.
       """
       for note, duration in tune:
           print(note)  # Output the current note being played
           tb.play(note)  # Play the note on the buzzer
           sleep(float(duration))  # Delay for the duration of the note
       tb.stop()  # Stop playing after the tune is complete

   # Define a musical tune as a sequence of notes and durations
   tune = [('C#4', 0.2), ('D4', 0.2), (None, 0.2),
           ('Eb4', 0.2), ('E4', 0.2), (None, 0.6),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.6),
           ('Eb4', 0.2), ('E4', 0.2), (None, 0.2),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
           ('C4', 0.2), ('B4', 0.2), (None, 0.2),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
           ('B4', 0.2), ('Bb4', 0.5), (None, 0.6),
           ('A4', 0.2), ('G4', 0.2), ('E4', 0.2), 
           ('D4', 0.2), ('E4', 0.2)]

   try:
       play(tune)  # Execute the play function to start playing the tune

   except KeyboardInterrupt:
       # Handle KeyboardInterrupt for graceful termination
       pass



**Explication du code**

1. Ces lignes importent la classe ``TonalBuzzer`` de la biblioth√®que ``gpiozero`` pour le contr√¥le du buzzer ainsi que la fonction ``sleep`` du module ``time`` pour g√©rer les d√©lais.
    
   .. code-block:: python  

       #!/usr/bin/env python3
       from gpiozero import TonalBuzzer
       from time import sleep

2. Cette ligne initialise un objet ``TonalBuzzer`` sur le GPIO 17.
    
   .. code-block:: python
       
       # Initialiser un objet TonalBuzzer connect√© au GPIO 17
       tb = TonalBuzzer(17)

3. La fonction ``play`` parcourt une liste de tuples repr√©sentant des notes de musique et leur dur√©e. Chaque note est jou√©e pour la dur√©e sp√©cifi√©e, puis le buzzer s'arr√™te √† la fin de la m√©lodie.
    
   .. code-block:: python  

       def play(tune):
           """
           Play a musical tune using the buzzer.
           :param tune: List of tuples (note, duration), where each tuple represents a note and its duration.
           """
           for note, duration in tune:
               print(note)  # Affiche la note en cours de lecture
               tb.play(note)  # Joue la note sur le buzzer
               sleep(float(duration))  # Pause pour la dur√©e de la note
           tb.stop()  # Arr√™te la lecture une fois le morceau termin√©

4. La m√©lodie est d√©finie comme une s√©quence de notes (fr√©quences) et de dur√©es (en secondes).
    
   .. code-block:: python

       # D√©finir une m√©lodie comme une s√©quence de notes et de dur√©es
       tune = [('C#4', 0.2), ('D4', 0.2), (None, 0.2),
           ('Eb4', 0.2), ('E4', 0.2), (None, 0.6),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.6),
           ('Eb4', 0.2), ('E4', 0.2), (None, 0.2),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
           ('C4', 0.2), ('B4', 0.2), (None, 0.2),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
           ('B4', 0.2), ('Bb4', 0.5), (None, 0.6),
           ('A4', 0.2), ('G4', 0.2), ('E4', 0.2), 
           ('D4', 0.2), ('E4', 0.2)]

5. La fonction ``play(tune)`` est appel√©e dans un bloc ``try``. Une interruption clavier (comme Ctrl+C) permet de stopper le programme proprement.
    
   .. code-block:: python  
       
       try:
           play(tune)  # Lance la lecture de la m√©lodie

       except KeyboardInterrupt:
           # G√©rer l'interruption clavier pour une terminaison propre
           pass
