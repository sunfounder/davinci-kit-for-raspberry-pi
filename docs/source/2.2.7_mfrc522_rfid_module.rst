.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

2.2.7 MFRC522 RFID-Modul
==========================

Einf√ºhrung
---------------

Radio Frequency Identification (RFID) bezieht sich auf Technologien, die die drahtlose Kommunikation zwischen einem Objekt (oder Tag) und einem Abfrageger√§t (oder Leseger√§t) verwenden, um solche Objekte automatisch zu verfolgen und zu identifizieren.

Einige der h√§ufigsten Anwendungen f√ºr diese Technologie sind Lieferketten f√ºr den Einzelhandel, milit√§rische Lieferketten, automatisierte Zahlungsmethoden, Gep√§ckverfolgung und -verwaltung, Dokumentenverfolgung und pharmazeutische Verwaltung, um nur einige zu nennen.

In diesem Projekt werden wir RFID zum Lesen und Schreiben verwenden.

Komponenten
-----------------

.. image:: media/list_2.2.7.png


Prinzip
---------

**RFID**

Radio Frequency Identification (RFID) bezieht sich auf Technologien, bei denen eine drahtlose Kommunikation zwischen einem Objekt (oder Tag) und einem Abfrageger√§t (oder Leseger√§t) verwendet wird, um solche Objekte automatisch zu verfolgen und zu identifizieren. Die Tag-√úbertragungsreichweite ist auf mehrere Meter vom Leseger√§t begrenzt. Eine klare Sichtlinie zwischen Leseger√§t und Etikett ist nicht unbedingt erforderlich.

Die meisten Etikette enthalten mindestens eine integrierte Schaltung (IC) und eine Antenne. Der Mikrochip speichert Informationen und ist f√ºr die Verwaltung der Hochfrequenzkommunikation mit dem Leseger√§t verantwortlich. Passive Etiketts haben keine unabh√§ngige Energiequelle und sind auf ein externes elektromagnetisches Signal angewiesen, das vom Leseger√§t bereitgestellt wird, um ihren Betrieb zu betreiben. Aktive Etiketts enthalten eine unabh√§ngige Energiequelle, z. B. eine Batterie. Dann k√∂nnen sie eine erh√∂hte Verarbeitung, √úbertragungsf√§higkeit und Reichweite aufweisen.

.. image:: media/image230.png


**MFRC522**

MFRC522 ist eine Art integrierter Lese- und Schreibkartenchip. Es wird √ºblicherweise im Radio bei 13,56 MHz verwendet. Es wurde von der NXP Company eingef√ºhrt und ist ein ber√ºhrungsloser, kosteng√ºnstiger und kleiner Niederspannungs-Kartenchip, der die beste Wahl f√ºr intelligente Instrumente und tragbare Handheld-Ger√§te darstellt.

Der MF RC522 verwendet ein fortschrittliches Modulations- und Demodulationskonzept, das in allen Arten von passiven kontaktlosen Kommunikationsmethoden und -protokollen mit 13,56 MHz vollst√§ndig dargestellt wird. Dar√ºber hinaus unterst√ºtzt es den schnellen CRYPTO1-Verschl√ºsselungsalgorithmus zur √úberpr√ºfung von MIFARE-Produkten. Der MFRC522 unterst√ºtzt auch die ber√ºhrungslose Hochgeschwindigkeitskommunikation der MIFARE-Serie mit einer bidirektionalen Daten√ºbertragungsrate von bis zu 424 kbit/s. Als neues Mitglied der hochintegrierten 13,56-MHz-Lesekartenserie ist der MF RC522 dem vorhandenen MF RC500 und MF RC530 sehr √§hnlich, es gibt jedoch auch gro√üe Unterschiede. Es kommuniziert mit dem Host-Computer √ºber die serielle Art und Weise, die weniger Verkabelung erfordert. Sie k√∂nnen zwischen SPI-, I2C- und seriellem UART-Modus (√§hnlich wie RS232) w√§hlen, um die Verbindung zu reduzieren, Platz auf der Leiterplatte zu sparen (kleinere Gr√∂√üe) und Kosten zu senken.

Schematische Darstellung
-------------------------------------------

.. image:: media/image331.png


Experimentelle Verfahren
--------------------------------

Schritt 1: Bauen Sie die Schaltung auf.

.. image:: media/image232.png
    :width: 800



Schritt 2: SPI einrichten (weitere Informationen finden Sie in Anhang. Wenn Sie :ref:`spi_configuration`  haben, √ºberspringen Sie diesen Schritt.)

F√ºr Benutzer in C-Sprache
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 3: Gehen Sie zum Ordner der Kode.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.7/

Schritt 4: Kompilieren Sie die Kode.

.. raw:: html

   <run></run>

.. code-block:: 

    make read
    make write

.. note::
    Es gibt zwei Beispiele, mit denen Sie die Karten-ID lesen oder schreiben k√∂nnen. Sie k√∂nnen je nach Bedarf eines davon ausw√§hlen.

Schritt 5: F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./read

.. raw:: html

   <run></run>
   
.. code-block:: 

    sudo ./write

**Code Erkl√§rung**

.. code-block:: c

    InitRc522();

Mit dieser Funktion wird das RFID RC522-Modul initialisiert.

.. code-block:: c

    uint8_t read_card_data();

Diese Funktion wird zum Lesen der Daten der Karte verwendet. Wenn der Lesevorgang erfolgreich ist, wird ‚Äû1‚Äú zur√ºckgegeben.

.. code-block:: c

    uint8_t write_card_data(uint8_t *data);

Diese Funktion wird verwendet, um die Daten der Karte zu schreiben und gibt ‚Äû1‚Äú zur√ºck, wenn das Schreiben erfolgreich war. ``*data`` sind die Informationen, die auf die Karte geschrieben werden.

F√ºr Python-Sprachbenutzer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Schritt 2**: Aktivierung der virtuellen Umgebung.

.. note::
    
    * Bevor Sie die Aktivierung durchf√ºhren, m√ºssen Sie sicherstellen, dass Sie eine virtuelle Umgebung erstellt haben. Bitte beachten Sie: :ref:`create_virtual`.

    * Jedes Mal, wenn Sie den Raspberry Pi neu starten oder ein neues Terminal √∂ffnen, m√ºssen Sie erneut den folgenden Befehl ausf√ºhren, um die virtuelle Umgebung zu aktivieren.

.. raw:: html

    <run></run>

.. code-block:: shell

    source myenv/bin/activate

Nachdem die virtuelle Umgebung aktiviert ist, sehen Sie den Umgebungsnamen vor dem Befehlszeilen-Prompt, was darauf hinweist, dass Sie innerhalb der virtuellen Umgebung arbeiten.


**Schritt 3**: Installation der Bibliotheken.

Die ``spidev``-Bibliothek hilft bei der Handhabung von Interaktionen mit SPI und ist ein Schl√ºsselelement dieses Tutorials, da wir sie f√ºr den Raspberry Pi ben√∂tigen, um mit dem RFID RC522 zu interagieren.

F√ºhren Sie den folgenden Befehl aus, um ``spidev`` √ºber ``pip`` auf Ihrem Raspberry Pi zu installieren.

.. raw:: html

    <run></run>
 
.. code-block::

    sudo pip3 install spidev


Fahren Sie mit der Installation der MFRC522-Bibliothek fort. Die MFRC522-Bibliothek enth√§lt zwei Dateien: ``MFRC522.py`` und ``SimpleMFRC522.py``.

Dabei ist ``MFRC522.py`` die Realisierung der RFID-RC522-Schnittstelle, diese Bibliothek √ºbernimmt alle schweren Arbeiten bei der Kommunikation mit RFID √ºber die SPI-Schnittstelle des Pi.

``SimpleMFRC522.py`` nimmt die Datei ``MFRC522.py`` und vereinfacht sie erheblich, indem sie es Ihnen erm√∂glicht, nur mit einigen Funktionen anstatt mit einigen Funktionen umzugehen.

.. raw:: html

    <run></run>
 
.. code-block::

    sudo pip3 install mfrc522


**Schritt 4**: Beenden der virtuellen Umgebung.

Wenn Sie Ihre Arbeit abgeschlossen haben und die virtuelle Umgebung verlassen m√∂chten, f√ºhren Sie einfach folgenden Befehl aus:

.. raw:: html

    <run></run>

.. code-block:: shell

    deactivate

Damit kehren Sie zur globalen Python-Umgebung des Systems zur√ºck.



**Schritt 5**: Gehen Sie zum Ordner der Kode.

.. raw:: html

    <run></run>
 
.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/2.2.7

**Schritt 6**: F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.7_read.py

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.7_write.py

.. note::

    * Nach dem Ausf√ºhren von ``2.2.7_read.py`` werden die ``id`` und der ``text`` Ihrer Karte in der Shell ausgegeben.
    * Nachdem Sie ``2.2.7_write.py`` ausgef√ºhrt haben, m√ºssen Sie zuerst eine Nachricht schreiben, zur Best√§tigung ``Enter`` dr√ºcken und schlie√ülich Ihre Karte auf das MFRC522 RFID-Modul legen, um das Schreiben abzuschlie√üen.

**code**


.. note::

    Sie k√∂nnen den folgenden Code **√Ñndern/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen** . Zuvor m√ºssen Sie jedoch zu einem Quellcodepfad wie ``davinci-kit-for-raspberry-pi/python`` gehen.
     
.. raw:: html

    <run></run>

.. code-block:: python

    # read
    import time
    from mfrc522 import SimpleMFRC522
    import RPi.GPIO as GPIO

    reader = SimpleMFRC522()

    def main():
        while True:
            print("Reading...Please place the card...")
            id, text = reader.read()
            print("ID: %s\nText: %s" % (id,text))
            time.sleep(3)
            
    def destroy():
        GPIO.cleanup()
        
    if __name__ == '__main__':
        try:
            main()
        # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()

    
.. raw:: html

    <run></run>
        
.. code-block:: python

    # write
    from mfrc522 import SimpleMFRC522
    import RPi.GPIO as GPIO

    reader = SimpleMFRC522()

    def main():
        while True:
            text = input('Please write new data:')
            print("Please place the card to complete writing")
            reader.write(text)
            print("Data writing is complete")
            
    def destroy():
        GPIO.cleanup()
        
    if __name__ == '__main__':
        try:
            main()
        # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()

**Code Erkl√§rung**

.. code-block:: python

    reader = SimpleMFRC522()

Instanziieren Sie die Klasse ``SimpleMFRC522()`` .

.. code-block:: python

    reader.read()

Diese Funktion dient zum Auslesen von Kartendaten. Wenn das Lesen erfolgreich ist, werden ID und Text zur√ºckgegeben.

.. code-block:: python

    reader.write(text)

Diese Funktion wird verwendet, um Informationen auf die Karte zu schreiben. Dr√ºcken Sie die Taste ``Enter`` , um das Schreiben zu beenden. ``Text`` ist die Information, die auf die Karte geschrieben werden soll.

Ph√§nomen Bild
------------------

.. image:: media/image233.jpeg