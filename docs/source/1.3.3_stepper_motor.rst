.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _py_step_motor:

1.3.3 Schrittmotor
====================

Einf√ºhrung
------------

Schrittmotoren k√∂nnen aufgrund ihres einzigartigen Designs ohne R√ºckkopplungsmechanismen mit hoher Genauigkeit gesteuert werden. Die Welle eines Schrittmachers, der mit einer Reihe von Magneten montiert ist, wird von einer Reihe elektromagnetischer Spulen gesteuert, die in einer bestimmten Reihenfolge positiv und negativ geladen werden und diese in kleinen ‚ÄûSchritten‚Äú pr√§zise vorw√§rts oder r√ºckw√§rts bewegen.

Komponenten
--------------------

.. image:: media/list_1.3.3.png


Prinzip
-------------

**Schrittmotor**

Es gibt zwei Typen von Steppern, Unipolare und Bipolare, und es ist sehr wichtig zu wissen, mit welchem Typ Sie arbeiten. In diesem Experiment verwenden wir einen unipolaren Stepper.

Der Schrittmotor ist ein Vierphasenmotor, der eine Gleichstromversorgung mit Unipolarit√§t verwendet. Solange Sie alle Phasenwicklungen des Motors durch eine geeignete Zeitfolge elektrifizieren, k√∂nnen Sie ihn Schritt f√ºr Schritt drehen lassen. Das schematische Diagramm eines vierphasigen reaktiven Schrittmotors:

.. image:: media/image129.png


In der Abbildung befindet sich in der Mitte des Motors ein Rotor - ein zahnradf√∂rmiger Permanentmagnet. Um den Rotor herum sind 0 bis 5 Z√§hne. Dann weiter drau√üen gibt es 8 Magnetpole, wobei jeweils zwei gegen√ºberliegende durch Spulenwicklung verbunden sind. Sie bilden also vier Paare von A nach D, was als Phase bezeichnet wird. Es verf√ºgt √ºber vier Anschlusskabel, die mit den Schaltern SA, SB, SC und SD verbunden werden k√∂nnen. Daher sind die vier Phasen in der Schaltung parallel und die zwei Magnetpole in einer Phase sind in Reihe geschaltet.

**So funktioniert ein 4-Phasen-Schrittmotor:**

Wenn der Schalter SB eingeschaltet ist, sind die Schalter SA, SC und SD ausgeschaltet, und die B-Phasen-Magnetpole sind auf die Z√§hne 0 und 3 des Rotors ausgerichtet. Gleichzeitig erzeugen Zahn 1 und 4 versetzte Z√§hne mit C- und D-Phasenpolen. Zahn 2 und 5 erzeugen versetzte Z√§hne mit D- und A-Phasenpolen. Wenn der Schalter SC eingeschaltet ist, die Schalter SB, SA und SD ausgeschaltet sind, dreht sich der Rotor unter dem Magnetfeld der C-Phasenwicklung und dem zwischen Zahn 1 und 4. Dann richten sich Zahn 1 und 4 an den Magnetpolen der C-Phasenwicklung aus. W√§hrend Zahn 0 und 3 versetzte Z√§hne mit A- und B-Phasenpolen erzeugen, erzeugen Zahn 2 und 5 versetzte Z√§hne mit den Magnetpolen von A- und D-Phasenpolen. Die √§hnliche Situation geht weiter und weiter. Schalten Sie die Phasen A, B, C und D nacheinander ein, und der Rotor dreht sich in der Reihenfolge A, B, C und D.

.. image:: media/image130.png


Der Vierphasen-Schrittmotor verf√ºgt √ºber drei Betriebsarten: einfach vierstufig, doppelt vierstufig und achtstufig. Der Schrittwinkel f√ºr den einzelnen vierstufigen und den doppelten vierstufigen ist gleich, aber das Antriebsmoment f√ºr den einzelnen vierstufigen ist kleiner. Der Schrittwinkel des Achtstufens ist halb so gro√ü wie der des Einzel-Vier-Stufen- und des Doppel-Vier-Stufen-Winkels. Somit kann der achtstufige Betriebsmodus ein hohes Antriebsmoment beibehalten und die Steuergenauigkeit verbessern.

Der von uns verwendete Stator des Schrittmotors hat 32 Magnetpole, sodass ein Kreis 32 Schritte ben√∂tigt. Die Abtriebswelle des Schrittmotors ist mit einem Untersetzungsgetriebesatz verbunden, und das Untersetzungsverh√§ltnis betr√§gt 1/64. Die endg√ºltige Abtriebswelle dreht also einen Kreis, der einen Schritt von 32 * 64 = 2048 erfordert.

**ULN2003**

Um den Motor in die Schaltung einzubringen, muss eine Treiberplatine verwendet werden. Stepper Motor Driver-ULN2003 ist eine 7-Kanal-Inverterschaltung. Das hei√üt, wenn der Eingangspin auf High-Pegel ist, ist der Ausgangspin von ULN2003 auf Low-Pegel und umgekehrt. Wenn wir IN1 High-Pegel und IN2, IN3 und IN4 Low-Pegel liefern, dann ist das Ausgangsende OUT1 auf Low-Pegel und alle anderen Ausgangsenden auf High-Pegel. Die interne Struktur des Chips ist wie folgt dargestellt.

.. image:: media/image338.png


Der Schrittmotortreiber, der aus dem ULN2003-Chip und 4 LEDs besteht, ist wie folgt dargestellt. Auf der Platine fungieren IN1, IN2, IN3 und IN4 als Eingang und die vier LEDs A, B, C, D sind die Anzeigen des Eingangspins. Zus√§tzlich sind OUT1, OUT2, OUT3 und OUT4 mit SA, SB, SC und SD am Schrittmotortreiber verbunden. Wenn der Wert von IN1 auf einen hohen Niveau eingestellt ist, leuchtet A auf; Schalter SA ist eingeschaltet und der Schrittmotor dreht sich einen Schritt. Der √§hnliche Fall wiederholt sich immer weiter. Geben Sie dem Schrittmotor daher einfach eine bestimmte Zeitfolge, er dreht sich Schritt f√ºr Schritt. Der ULN2003 wird hier verwendet, um bestimmte Zeitabl√§ufe f√ºr den Schrittmotor bereitzustellen.

.. image:: media/image132.png


Schematische Darstellung
---------------------------


.. image:: media/image339.png


Experimentelle Verfahren
---------------------------------

Schritt 1: Bauen Sie die Schaltung auf.

.. image:: media/image134.png
    :width: 800


F√ºr Benutzer in C-Sprache
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: Gehen Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.3.3/

Schritt 3: Kompilieren Sie den Code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.3_StepperMotor.c -lwiringPi

Schritt 4: F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

W√§hrend der Code l√§uft, dreht sich der Schrittmotor entsprechend Ihrer Eingabe ‚Äöa‚Äò oder ‚Äöc‚Äò im oder gegen den Uhrzeigersinn.

**Code**

.. code-block:: c

    #include <stdio.h>
    #include <wiringPi.h>

    const int motorPin[] = {1, 4, 5, 6};
    int rolePerMinute = 15;
    int stepsPerRevolution = 2048;
    int stepSpeed = 0;

    void rotary(char direction){
        if(direction == 'c'){
            for(int j=0;j<4;j++){
                for(int i=0;i<4;i++)
                    {digitalWrite(motorPin[i],0x99>>j & (0x08>>i));}
                delayMicroseconds(stepSpeed);
            }        
        }
        else if(direction =='a'){
            for(int j=0;j<4;j++){
                for(int i=0;i<4;i++)
                    {digitalWrite(motorPin[i],0x99<<j & (0x80>>i));}
                delayMicroseconds(stepSpeed);
            }   
        }
    }

    void loop()
    {
        char direction = '0';
        while (1)
        {       
            printf("select motor direction a=anticlockwise, c=clockwise: ");
            delay(100);
            direction=getchar();
            if (direction == 'c')
            {
                printf("motor running clockwise\n");
                delay(100);
                break;
            }
            else if (direction == 'a')
            {
                printf("motor running anti-clockwise\n");
                delay(100);
                break;
            }
            else
            {
                printf("input error, please try again!\n");
                delay(100);
            }
        }
        while(1)
        {
            rotary(direction);
        }
    }

    void main(void)
    {
        if (wiringPiSetup() == -1)
        {
            printf("setup wiringPi failed !");
            return;
        }
        for (int i = 0; i < 4; i++)
        {
            pinMode(motorPin[i], OUTPUT);
        }
        stepSpeed = (60000000 / rolePerMinute) / stepsPerRevolution;
        loop();
    }

**Code Erkl√§rung**

.. code-block:: c

    int rolePerMinute = 15;
    int stepsPerRevolution = 2048;
    int stepSpeed = 0;

**rolePerMinute:** Umdrehungen pro Minute sollte die Drehzahl des in diesem Kit verwendeten Schrittmotors 0 bis 17 betragen.

**stepPerRevolution:** Die Anzahl der Schritte f√ºr jede Umdrehung und der in diesem Kit verwendete Schrittmotor ben√∂tigen 2048 Schritte pro Umdrehung.

**stepSpeed:** Die f√ºr jeden Schritt verwendete Zeit. In ``main()`` weisen wir ihnen die folgenden Werte zu: „Äå(60000000 / rolePerMinute) / stepPerRevolution„Äç (60.000.000 us = 1 Minute)

.. code-block:: c

    void loop()
    {
        char direction = '0';
        while (1)
        {       
            printf("select motor direction a=anticlockwise, c=clockwise: ");
            direction=getchar();
            if (direction == 'c')
            {
                printf("motor running clockwise\n");
                break;
            }
            else if (direction == 'a')
            {
                printf("motor running anti-clockwise\n");
                break;
            }
            else
            {
                printf("input error, please try again!\n");
            }
        }
        while(1)
        {
            rotary(direction);
        }
    }


Die Funktion ``loop()`` ist grob in zwei Teile unterteilt (zwischen zwei  ``while(1)`` ):

Der erste Teil besteht darin, den Schl√ºsselwert zu erhalten. Wenn ‚Äöa‚Äò oder ‚Äöc‚Äò erhalten wird, 
verlassen Sie die Schleife und stoppen Sie die Eingabe.

Der zweite Teil ruft rotary(direction) auf, um den Schrittmotor laufen zu lassen.

.. code-block:: c

    void rotary(char direction){
        if(direction == 'c'){
            for(int j=0;j<4;j++){
                for(int i=0;i<4;i++)
                    {digitalWrite(motorPin[i],0x99>>j & (0x08>>i));}
                delayMicroseconds(stepSpeed);
            }        
        }
        else if(direction =='a'){
            for(int j=0;j<4;j++){
                for(int i=0;i<4;i++)
                    {digitalWrite(motorPin[i],0x99<<j & (0x80>>i));}
                delayMicroseconds(stepSpeed);
            }   
        }
    }

Damit sich der Schrittmotor im Uhrzeigersinn dreht, 
sollte der F√ºllstandsstatus von motorPin in der folgenden Tabelle angezeigt werden:

.. image:: media/image340.png


Daher wird das potentielle Schreiben von MotorPin unter Verwendung einer zweischichtigen for-Schleife implementiert.

In Schritt 1 ist j = 0, i = 0 ~ 4.

``motorPin[0]`` wird in der hohen Ebene geschrieben (10011001 & 00001000 = 1)

``motorPin[1]`` wird auf dem niedrigen Niveau geschrieben (10011001 & 00000100 = 0)

``motorPin[2]`` wird in der niedrigen Ebene geschrieben (10011001 & 00000010 = 0)

``motorPin[3]`` wird in der hohen Ebene geschrieben (10011001 & 00000001 = 1)

In Schritt 2 ist j = 1, i = 0 ~ 4.

``motorPin[0]`` wird in der hohen Ebene geschrieben (01001100 & 00001000 = 1)

``motorPin[1]`` wird auf dem niedrigen Niveau geschrieben (01001100 & 00000100 = 1)

usw.

Damit sich der Schrittmotor gegen den Uhrzeigersinn dreht, wird der F√ºllstandsstatus von motorPin in der folgenden Tabelle angezeigt.

.. image:: media/image341.png


In Schritt 1 ist j = 0, i = 0 ~ 4.

``motorPin[0]`` wird in der hohen Ebene geschrieben (10011001 & 10000000 = 1)

``motorPin[1]`` wird auf dem niedrigen Niveau geschrieben (10011001 & 01000000 = 0)

In Schritt 2 ist Ôºå j = 1, i = 0 ~ 4.

``motorPin[0]`` wird in der hohen Ebene geschrieben (00110010 & 10000000 = 0)

``motorPin[1]`` wird auf dem niedrigen Niveau geschrieben (00110010 & 01000000 = 0)

F√ºr Python-Sprachbenutzer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: Gehen Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

Schritt 3: F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.3_StepperMotor.py

W√§hrend der Code l√§uft, dreht sich der Schrittmotor abh√§ngig von Ihrer Eingabe ‚Äöa‚Äò oder ‚Äöa‚Äò im oder gegen den Uhrzeigersinn.

**Code**

.. note::

    Sie k√∂nnen den folgenden Code **√Ñndern/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen** . Zuvor m√ºssen Sie jedoch zu einem Quellcodepfad wie ``davinci-kit-for-raspberry-pi/python`` gehen.
      
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    from time import sleep

    motorPin = (18,23,24,25) 
    rolePerMinute =15
    stepsPerRevolution = 2048
    stepSpeed = (60/rolePerMinute)/stepsPerRevolution

    def setup():
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        for i in motorPin:
            GPIO.setup(i, GPIO.OUT)

    def rotary(direction):
        if(direction == 'c'):   
            for j in range(4):
                for i in range(4):
                    GPIO.output(motorPin[i],0x99>>j & (0x08>>i))
                sleep(stepSpeed)

        elif(direction == 'a'):
            for j in range(4):
                for i in range(4):
                    GPIO.output(motorPin[i],0x99<<j & (0x80>>i))
                sleep(stepSpeed)

    def loop():
        while True:
            direction = input('select motor direction a=anticlockwise, c=clockwise: ')
            if(direction == 'c'):
                print('motor running clockwise\n')
                break
            elif(direction == 'a'):
                print('motor running anti-clockwise\n')
                break
            else:
                print('input error, please try again!')
        while True:
            rotary(direction)

    def destroy():
        GPIO.cleanup()   

    if __name__ == '__main__':    
        setup()
        try:
            loop()        
        except KeyboardInterrupt:
            destroy()

**Code Erkl√§rung**

.. code-block:: python

    rolePerMinute =15
    stepsPerRevolution = 2048
    stepSpeed = (60/rolePerMinute)/stepsPerRevolution

**rolePerMinute:** Umdrehungen pro Minute sollte die Drehzahl des in diesem Kit verwendeten Schrittmotors 0 bis 17 betragen.

**stepPerRevolution:** Die Anzahl der Schritte f√ºr jede Umdrehung und der in diesem Kit verwendete Schrittmotor ben√∂tigen 2048 Schritte pro Umdrehung.

**stepSpeed:** Die Zeit, die f√ºr jeden Schritt verwendet wird, und wir weisen ihnen die Werte zu: „Äå(60 / rolePerMinute) / stepPerRevolution„Äç (60s = 1minute).

.. code-block:: python

    def loop():
        while True:
            direction = input('select motor direction a=anticlockwise, c=clockwise: ')
            if(direction == 'c'):
                print('motor running clockwise\n')
                break
            elif(direction == 'a'):
                print('motor running anti-clockwise\n')
                break
            else:
                print('input error, please try again!')
        while True:
            rotary(direction)


Die Funktion ``loop()`` ist grob in zwei Teile unterteilt (in zwei Teilen, ``while(1)`` ):

Der erste Teil besteht darin, den Schl√ºsselwert zu erhalten. Wenn ‚Äöa‚Äò oder ‚Äöc‚Äò erhalten wird, verlassen Sie die Schleife und stoppen Sie die Eingabe.

Der zweite Teil ruft ``rotary(direction)`` auf, um den Schrittmotor laufen zu lassen.

.. code-block:: python

    def rotary(direction):
        if(direction == 'c'):   
            for j in range(4):
                for i in range(4):
                    GPIO.output(motorPin[i],0x99>>j & (0x08>>i))
                sleep(stepSpeed)

        elif(direction == 'a'):
            for j in range(4):
                for i in range(4):
                    GPIO.output(motorPin[i],0x99<<j & (0x80>>i))
                sleep(stepSpeed)

Um den Schrittmotor im Uhrzeigersinn drehen zu lassen, wird der Niveau status von motorPin in der folgenden Tabelle angezeigt:

.. image:: media/image342.png


Daher wird das potentielle Schreiben von MotorPin unter Verwendung einer zweischichtigen for-Schleife implementiert.

In Schritt 1 ist j = 0, i = 0 ~ 4.

``motorPin[0]`` wird in der hohen Ebene geschrieben (10011001 & 00001000 = 1)

``motorPin[1]`` wird auf dem niedrigen Niveau geschrieben (10011001 & 00000100 = 0)

``motorPin[2]`` wird in der niedrigen Ebene geschrieben (10011001 & 00000010 = 0)

``motorPin[3]`` wird in der hohen Ebene geschrieben (10011001 & 00000001 = 1)

In Schritt 2 ist j = 1, i = 0 ~ 4.

``motorPin[0]`` wird in der hohen Ebene geschrieben (01001100 & 00001000 = 1)

``motorPin[1]`` wird auf dem niedrigen Niveau geschrieben (01001100 & 00000100 = 1)

usw

Um den Schrittmotor gegen den Uhrzeigersinn drehen zu lassen, wird der F√ºllstandsstatus von motorPin in der folgenden Tabelle angezeigt.

.. image:: media/image343.png


In Schritt 1 ist j = 0, i = 0 ~ 4.

``motorPin[0]`` wird in der hohen Ebene geschrieben (10011001 & 10000000 = 1)

``motorPin[1]`` wird auf dem niedrigen Niveau geschrieben (10011001 & 01000000 = 0)

In Schritt 2 ist j = 1, i = 0 ~ 4.

``motorPin[0]`` wird in der hohen Ebene geschrieben (00110010 & 10000000 = 0)

``motorPin[1]`` wird auf dem niedrigen Niveau geschrieben (00110010 & 01000000 = 0)

usw.

Ph√§nomen Bild
------------------

.. image:: media/image135.jpeg