.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez des d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t(e) √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.1.1 Bouton
===============

Introduction
--------------

Dans cette le√ßon, nous allons apprendre √† allumer ou √©teindre une LED en utilisant un bouton.

Composants
------------

.. image:: img/list_2.1.1_Button.png


Principe
-----------

**Bouton**

Le bouton est un composant courant utilis√© pour contr√¥ler des dispositifs √©lectroniques. 
Il est g√©n√©ralement utilis√© comme interrupteur pour connecter ou couper les circuits. 
Bien qu'il existe sous diff√©rentes formes et tailles, celui que nous utilisons ici est 
un mini-bouton de 6 mm comme montr√© ci-dessous.

Les deux broches de gauche sont connect√©es ensemble, et celles de droite le sont aussi, 
comme illustr√© ci-dessous :

.. image:: img/image148.png
    :width: 400
    :align: center

Le symbole suivant est souvent utilis√© pour repr√©senter un bouton dans les circuits :

.. image:: img/image301.png
    :width: 400
    :align: center

Lorsque le bouton est press√©, les 4 broches sont connect√©es, fermant ainsi le circuit.

Sch√©ma de c√¢blage
----------------------

Utilisez un bouton normalement ouvert comme entr√©e pour le Raspberry Pi, le sch√©ma de 
c√¢blage est illustr√© ci-dessous. Lorsque le bouton est press√©, le GPIO18 passera √† un 
niveau bas (0V). Nous pouvons d√©tecter l'√©tat du GPIO18 par programmation. Autrement dit, 
si le GPIO18 devient bas, cela signifie que le bouton est press√©. Vous pouvez ex√©cuter le 
code correspondant lorsque le bouton est press√©, et ainsi la LED s'allumera.

.. note::
    La broche la plus longue de la LED est l'anode, et la plus courte est la cathode.

.. image:: img/image302.png
    :width: 600
    :align: center

.. image:: img/image303.png
    :width: 400
    :align: center


Proc√©dures exp√©rimentales
------------------------------

**√âtape 1** : Montez le circuit.

.. image:: img/image152.png
    :width: 800

**√âtape 2** : Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.1.1/

.. note::
    Changez de r√©pertoire pour acc√©der au chemin du code de cette exp√©rience via **cd**.

**√âtape 3** : Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.1_Button.c -lwiringPi

**√âtape 4** : Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, appuyez sur le bouton pour allumer la LED ; sinon, 
elle s'√©teint.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur indiquant : \"wiringPi.h: No such file or directory\", veuillez consulter :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define LedPin      0
    #define ButtonPin   1

    int main(void){
        // En cas d'√©chec de l'initialisation de wiringPi, afficher un message √† l'√©cran
        if(wiringPiSetup() == -1){
            printf("setup wiringPi failed !");
            return 1;
        }
        
        pinMode(LedPin, OUTPUT);
        pinMode(ButtonPin, INPUT);
        digitalWrite(LedPin, HIGH);
        
        while(1){
            // Indiquer que le bouton est enfonc√©
            if(digitalRead(ButtonPin) == 0){
                // Allumer la LED
                digitalWrite(LedPin, LOW);
            //  printf("...LED allum√©e\n");
            }
            else{
                // √âteindre la LED
                digitalWrite(LedPin, HIGH);
            //  printf("LED √©teinte...\n");
            }
        }
        return 0;
    }

**Explication du code**

.. code-block::

    #define LedPin      0

La broche GPIO17 sur la carte T_Extension est √©quivalente √† GPIO0 dans wiringPi.

.. code-block::

    #define ButtonPin   1

ButtonPin est connect√© √† GPIO1.

.. code-block::

    pinMode(LedPin, OUTPUT);

D√©finit LedPin comme sortie pour lui attribuer une valeur.

.. code-block::

    pinMode(ButtonPin, INPUT);

D√©finit ButtonPin comme entr√©e pour lire sa valeur.

.. code-block:: c

    while(1){
            // Indiquer que le bouton est enfonc√©
            if(digitalRead(ButtonPin) == 0){
                // Allumer la LED
                digitalWrite(LedPin, LOW);
            //  printf("...LED allum√©e\n");
            }
            else{
                // √âteindre la LED
                digitalWrite(LedPin, HIGH);
            //  printf("LED √©teinte...\n");
            }
        }

if (digitalRead(ButtonPin) == 0): v√©rifier si le bouton a √©t√© enfonc√©. Ex√©cutez 
digitalWrite(LedPin, LOW) pour allumer la LED lorsque le bouton est press√©.
