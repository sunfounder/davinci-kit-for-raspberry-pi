.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pi5_joystick:

2.1.6 Joystick
==============

Introduction
------------

Dans ce projet, nous allons apprendre le fonctionnement du joystick. 
Nous allons le manipuler et afficher les r√©sultats √† l'√©cran.

Composants n√©cessaires
----------------------------

Pour ce projet, nous aurons besoin des composants suivants :

.. image:: ../python_pi5/img/2.1.9_joystick_list.png

.. It's definitely convenient to buy a whole kit, here's the link: 

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Name	
..         - ITEMS IN THIS KIT
..         - LINK
..     *   - Raphael Kit
..         - 337
..         - |link_Raphael_kit|

.. You can also buy them separately from the links below.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - COMPONENT INTRODUCTION
..         - PURCHASE LINK

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`joystick`
..         - \-
..     *   - :ref:`adc0834`
..         - \-

Schematic Diagram
---------------------

Lorsque les donn√©es du joystick sont lues, il existe des diff√©rences selon 
les axes : les donn√©es des axes X et Y sont analogiques et n√©cessitent 
l'utilisation de l'ADC0834 pour convertir les valeurs analogiques en valeurs 
num√©riques. Les donn√©es de l'axe Z sont num√©riques, vous pouvez donc utiliser 
directement le GPIO pour les lire, ou passer par l'ADC.

.. image:: ../python_pi5/img/2.1.9_joystick_schematic_1.png

.. image:: ../python_pi5/img/2.1.9_joystick_schematic_2.png


Proc√©dure exp√©rimentale
--------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.1.9_Joystick_circuit.png

**√âtape 2 :** Allez dans le r√©pertoire du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.1.6_Joystick_zero.py

Apr√®s avoir lanc√© le code, tournez le joystick, puis les valeurs correspondantes 
de x, y et Btn s'afficheront √† l'√©cran.

.. warning::

    En cas d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source tel que ``raphael-kit/python-pi5``. Apr√®s modification, vous pouvez ex√©cuter le code pour voir le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Button
   import ADC0834
   import time

   # Initialiser le bouton connect√© √† la broche GPIO 22
   BtnPin = Button(22)

   # Configurer le module ADC0834
   ADC0834.setup()

   try:
       # Boucle principale pour lire et afficher les valeurs de l'ADC et l'√©tat du bouton
       while True:
           # Lire les valeurs X et Y des canaux ADC 0 et 1
           x_val = ADC0834.getResult(0)
           y_val = ADC0834.getResult(1)

           # Lire l'√©tat du bouton (appuy√© ou non)
           Btn_val = BtnPin.value

           # Afficher les valeurs de X, Y et du bouton
           print('X: %d  Y: %d  Btn: %d' % (x_val, y_val, Btn_val))

           # Pause de 0,2 seconde avant la prochaine lecture
           time.sleep(0.2)

   # G√©rer proprement la fin du script (par exemple, via KeyboardInterrupt)
   except KeyboardInterrupt: 
       pass


**Explication du code**

#. Cette section importe la classe ``Button`` de la biblioth√®que ``gpiozero`` pour g√©rer un bouton connect√© √† une broche GPIO. Elle importe √©galement la biblioth√®que ``ADC0834`` pour interfacer le module ADC0834 (convertisseur analogique-num√©rique) et la fonction ``time`` pour introduire des temporisations.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Button
       import ADC0834
       import time

#. Initialise un bouton connect√© √† la broche GPIO 22 et configure le module ADC0834 pour son utilisation.

   .. code-block:: python

       # Initialiser le bouton connect√© √† la broche GPIO 22
       BtnPin = Button(22)

       # Configurer le module ADC0834
       ADC0834.setup()

#. Les connexions VRX et VRY du joystick sont reli√©es aux canaux CH0 et CH1 de l'ADC0834, respectivement. Cette configuration permet de lire les valeurs de CH0 et CH1, qui sont ensuite stock√©es dans les variables ``x_val`` et ``y_val``. En outre, la valeur SW du joystick est lue et assign√©e √† la variable ``Btn_val``. Les valeurs r√©cup√©r√©es de ``x_val``, ``y_val`` et ``Btn_val`` sont ensuite affich√©es √† l'aide de la fonction ``print()``.

   .. code-block:: python

       try:
           # Boucle principale pour lire et afficher les valeurs de l'ADC et l'√©tat du bouton
           while True:
               # Lire les valeurs X et Y des canaux ADC 0 et 1
               x_val = ADC0834.getResult(0)
               y_val = ADC0834.getResult(1)

               # Lire l'√©tat du bouton (appuy√© ou non)
               Btn_val = BtnPin.value

               # Afficher les valeurs de X, Y et du bouton
               print('X: %d  Y: %d  Btn: %d' % (x_val, y_val, Btn_val))

               # Pause de 0,2 seconde avant la prochaine lecture
               time.sleep(0.2)

       # G√©rer proprement la fin du script (par exemple, via KeyboardInterrupt)
       except KeyboardInterrupt: 
           pass







