.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _2.2.2_py_pi5:

2.2.2 Thermistor
================

Einf√ºhrung
------------

Wie ein Fotowiderstand Licht erkennen kann, ist ein Thermistor ein temperatur-
empfindliches elektronisches Bauteil, das zur Realisierung von Temperatursteuerungsfunktionen
wie einem Hitzemelder verwendet werden kann.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/2.2.2_thermistor_list.png

Schaltplan
-----------------

.. image:: ../python_pi5/img/2.2.2_thermistor_schematic_1.png


.. image:: ../python_pi5/img/2.2.2_thermistor_schematic_2.png


Experimentelle Verfahren
------------------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/2.2.2_thermistor_circuit.png

**Schritt 2:** Wechseln Sie in den Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**Schritt 3:** F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.2.2_Thermistor_zero.py

Wenn der Code ausgef√ºhrt wird, erkennt der Thermistor die Umgebungstemperatur,
die auf dem Bildschirm angezeigt wird, sobald das Programm die Berechnung abschlie√üt.

**Code**

.. note::

    Sie k√∂nnen den unten stehenden Code **Modifizieren/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen**. Aber bevor Sie das tun, m√ºssen Sie zum Quellcode-Pfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code ge√§ndert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um die Auswirkungen zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   # -*- coding: utf-8 -*-

   import ADC0834
   import time
   import math

   # Richten Sie das ADC0834-Modul ein
   ADC0834.setup()

   # F√ºhren Sie den Prozess in einem try-except-Block aus
   try:
       while True:
           # Lesen Sie den analogen Wert vom Sensor
           analogVal = ADC0834.getResult()

           # Wandeln Sie den analogen Wert in eine Spannung um
           Vr = 5 * float(analogVal) / 255

           # Berechnen Sie den Widerstand des Thermistors
           Rt = 10000 * Vr / (5 - Vr)

           # Berechnen Sie die Temperatur in Kelvin
           temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))

           # Wandeln Sie Kelvin in Celsius um
           Cel = temp - 273.15

           # Wandeln Sie Celsius in Fahrenheit um
           Fah = Cel * 1.8 + 32

           # Drucken Sie die Temperatur in Celsius und Fahrenheit aus
           print('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))

           # Warten Sie 0,2 Sekunden vor dem n√§chsten Lesen
           time.sleep(0.2)

   # Behandeln Sie KeyboardInterrupt f√ºr einen eleganten Abschluss
   except KeyboardInterrupt:
       # Ressourcen des ADC0834 aufr√§umen
       ADC0834.destroy()


**Code-Erkl√§rung**

#. Dieser Abschnitt importiert die ADC0834-Bibliothek f√ºr die Analog-Digital-Umwandlung, die time-Bibliothek f√ºr die Implementierung von Verz√∂gerungen und die math-Bibliothek f√ºr mathematische Operationen.

   .. code-block:: python

       #!/usr/bin/env python3
       # -*- coding: utf-8 -*-

       import ADC0834
       import time
       import math

#. Initialisiert das ADC0834-Modul, um das Lesen von Analogwerten zu erm√∂glichen.

   .. code-block:: python

       # Richten Sie das ADC0834-Modul ein
       ADC0834.setup()

#. Implementiert eine Endlosschleife f√ºr kontinuierliche Datenablesung. Die Schleife liest den Analogwert von einem Thermistor, wandelt diesen Wert in eine Spannung um, berechnet den Widerstand des Thermistors und √ºbersetzt diesen Widerstand in Temperaturmessungen in Kelvin, Celsius und Fahrenheit. Sie gibt auch die Temperaturwerte in Celsius und Fahrenheit aus und legt eine Pause von 0,2 Sekunden zwischen jeder Ablesung ein.

   .. code-block:: python

       # F√ºhren Sie den Prozess in einem try-except-Block aus
       try:
           while True:
               # Lesen Sie den analogen Wert vom Sensor
               analogVal = ADC0834.getResult()

               # Wandeln Sie den analogen Wert in eine Spannung um
               Vr = 5 * float(analogVal) / 255

               # Berechnen Sie den Widerstand des Thermistors
               Rt = 10000 * Vr / (5 - Vr)

               # Berechnen Sie die Temperatur in Kelvin
               temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))

               # Wandeln Sie Kelvin in Celsius um
               Cel = temp - 273.15

               # Wandeln Sie Celsius in Fahrenheit um
               Fah = Cel * 1.8 + 32

               # Drucken Sie die Temperatur in Celsius und Fahrenheit aus
               print('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))

               # Warten Sie 0,2 Sekunden vor dem n√§chsten Lesen
               time.sleep(0.2)

#. F√§ngt eine KeyboardInterrupt-Ausnahme ab, um das Programm elegant zu beenden, und enth√§lt Anweisungen zur Bereinigung der ADC0834-Ressourcen bei Beendigung.

   .. code-block:: python

       # Behandeln Sie KeyboardInterrupt f√ºr einen eleganten Abschluss
       except KeyboardInterrupt:
           # Ressourcen des ADC0834 aufr√§umen
           ADC0834.destroy()
