.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des d√©monstrations exclusives.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions et cadeaux festifs** : Participez √† des concours et √† des promotions lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Acquisition de Temp√©rature et d'Humidit√©
===========================================

Dans ce projet, nous utilisons le capteur DHT11 pour lire la temp√©rature et l'humidit√© ambiantes, puis les afficher sur Cloud4RPi.

Proc√©dures exp√©rimentales
----------------------------

Construisez le circuit.

.. image:: img/tem4.png
  :align: center

Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/cloud4rpi-raspberrypi-python
    sudo nano temperature_and_humidity_acquisition.py

Trouvez la ligne ci-dessous et remplissez-la avec le bon token de l'appareil.

.. code-block:: python

    DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'

Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 temperature_and_humidity_acquisition.py

Acc√©dez √† Cloud4RPi, ajoutez un nouveau panneau de contr√¥le nomm√© **project1**, et cliquez sur **Add Widget**.

.. image:: img/tem1.png
  :align: center

S√©lectionnez un widget **Chart** avec les variables **Room Temp** et **CPU Temp** √† afficher.

.. image:: img/tem2.png
  :align: center

Une fois ajout√©es, vous verrez les courbes de temp√©rature (Room Temp) et d'humidit√© (CPU Temp) s'afficher au fil du temps, et vous pourrez ajuster la fen√™tre d'affichage en cliquant sur les options en bas √† droite.

.. image:: img/tem3.png
  :align: center

Explication du code
----------------------

.. code-block:: python

    dht11 = DHT11.DHT11(17)

Instanciez un objet dht11.

.. code-block:: python

    def getTem():
        result = dht11.get_result()
        while True:
            if result:
                break
            else:
                result = dht11.get_result()
        return result[1]

La temp√©rature (``result[1]``) est obtenue gr√¢ce √† cette fonction, qui ne s'interrompra pas tant que la lecture n'est pas r√©ussie.

.. code-block:: python

    def getHum():
        result = dht11.get_result()
        while True:
            if result:
                break
            else:
                result = dht11.get_result()
        return result[0]

L'humidit√© (``result[0]``) est obtenue par cette fonction, qui ne s'interrompra pas tant que la lecture n'est pas r√©ussie.

.. code-block:: python

    variables = {
        'Room Temp': {
            'type': 'numeric',
            'bind': getTem
        },
        'CPU Temp': {
            'type': 'numeric',
            'bind': getHum
        },
    }

La temp√©rature est stock√©e dans la cl√© ``'bind'`` de ``'Room Temp'``, et l'humidit√© dans la cl√© ``'bind'`` de ``'CPU Temp'``. Lorsque Cloud4RPi re√ßoit le dictionnaire ``variables``, il le convertit en un objet JavaScript reconnaissable par la page web.

