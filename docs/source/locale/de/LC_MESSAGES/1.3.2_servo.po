# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-19 18:22+0800\n"
"PO-Revision-Date: 2021-05-31 21:20+0800\n"
"Last-Translator: \n"
"Language: de\n"
"Language-Team: \n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../1.3.2_servo.rst:2
msgid "1.3.2 Servo"
msgstr "1.3.2 Servo"

#: ../1.3.2_servo.rst:5
msgid "Introduction"
msgstr "Einführung"

#: ../1.3.2_servo.rst:7
msgid "In this lesson, we will learn how to make the servo rotate."
msgstr "In dieser Lektion lernen wir, wie man das Servo dreht."

#: ../1.3.2_servo.rst:10
msgid "Components"
msgstr "Komponenten"

#: ../1.3.2_servo.rst:16
msgid "Principle"
msgstr "Prinzip"

#: ../1.3.2_servo.rst:18
msgid "**Servo**"
msgstr "**Servo**"

#: ../1.3.2_servo.rst:20
msgid ""
"A servo is generally composed of the following parts: case, shaft, gear "
"system, potentiometer, DC motor, and embedded board."
msgstr ""
"Ein Servo besteht im Allgemeinen aus folgenden Teilen: Gehäuse, Welle, "
"Getriebe, Potentiometer, Gleichstrommotor und eingebettete Platine."

#: ../1.3.2_servo.rst:26
msgid ""
"It works like this: The microcontroller sends out PWM signals to the "
"servo, and then the embedded board in the servo receives the signals "
"through the signal pin and controls the motor inside to turn. As a "
"result, the motor drives the gear system and then motivates the shaft "
"after deceleration. The shaft and potentiometer of the servo are "
"connected together. When the shaft rotates, it drives the potentiometer, "
"so the potentiometer outputs a voltage signal to the embedded board. Then"
" the board determines the direction and speed of rotation based on the "
"current position, so it can stop exactly at the right position as defined"
" and hold there."
msgstr ""
"Das funktioniert so: Der Mikrocontroller sendet PWM-Signale an das Servo,"
" und dann empfängt die im Servo eingebettete Karte die Signale über den "
"Signal Pin und steuert den Motor im Inneren, um sich zu drehen. "
"Infolgedessen treibt der Motor das Zahnradsystem an und motiviert dann "
"die Welle nach dem Abbremsen. Die Welle und das Potentiometer des Servos "
"sind miteinander verbunden. Wenn sich die Welle dreht, treibt sie das "
"Potentiometer an, sodass das Potentiometer ein Spannungssignal an die "
"eingebettete Platine ausgibt. Dann bestimmt das Board die Richtung und "
"Geschwindigkeit der Drehung basierend auf der aktuellen Position, so dass"
" es genau an der richtigen Position wie definiert anhalten und dort "
"halten kann."

#: ../1.3.2_servo.rst:40
msgid ""
"The angle is determined by the duration of a pulse that is applied to the"
" control wire. This is called Pulse width Modulation. The servo expects "
"to see a pulse every 20 ms. The length of the pulse will determine how "
"far the motor turns. For example, a 1.5ms pulse will make the motor turn "
"to the 90 degree position (neutral position)."
msgstr ""
"Der Winkel wird durch die Dauer eines Impulses bestimmt, der an den "
"Steuerdraht angelegt wird. Dies wird als Pulsweitenmodulation bezeichnet."
" Das Servo erwartet alle 20 ms einen Impuls. Die Länge des Impulses "
"bestimmt, wie weit sich der Motor dreht. Zum Beispiel bringt ein Impuls "
"von 1,5 ms den Motor in die 90-Grad-Position (neutrale Position)."

#: ../1.3.2_servo.rst:46
msgid ""
"When a pulse is sent to a servo that is less than 1.5 ms, the servo "
"rotates to a position and holds its output shaft some number of degrees "
"counterclockwise from the neutral point. When the pulse is wider than 1.5"
" ms the opposite occurs. The minimal width and the maximum width of pulse"
" that will command the servo to turn to a valid position are functions of"
" each servo. Generally the minimum pulse will be about 0.5 ms wide and "
"the maximum pulse will be 2.5 ms wide."
msgstr ""
"Wenn ein Impuls an ein Servo gesendet wird, das weniger als 1,5 ms "
"beträgt, dreht sich das Servo in eine Position und hält seine "
"Ausgangswelle einige Grad gegen den Uhrzeigersinn vom Neutralpunkt "
"entfernt. Wenn der Impuls breiter als 1,5 ms ist, tritt das Gegenteil "
"auf. Die minimale Breite und die maximale Impulsbreite, die das Servo "
"anweisen, sich in eine gültige Position zu drehen, sind Funktionen jedes "
"Servos. Im Allgemeinen ist der minimale Impuls ungefähr 0,5 ms breit und "
"der maximale Impuls ist 2,5 ms breit."

#: ../1.3.2_servo.rst:58
msgid "Schematic Diagram"
msgstr "Schematische Darstellung"

#: ../1.3.2_servo.rst:64
msgid "Experimental Procedures"
msgstr "Experimentelle Verfahren"

#: ../1.3.2_servo.rst:66
msgid "**Step 1:** Build the circuit."
msgstr "**Schritt 1:** Bauen Sie die Schaltung auf."

#: ../1.3.2_servo.rst:74
msgid "For C Language Users"
msgstr "Für Benutzer in C-Sprache"

#: ../1.3.2_servo.rst:76 ../1.3.2_servo.rst:204
msgid "**Step 2**: Go to the folder of the code."
msgstr "**Schritt 2**: Gehen Sie zum Ordner des Codes."

#: ../1.3.2_servo.rst:86
msgid "**Step 3**: Compile the code."
msgstr "**Schritt 3**: Kompilieren Sie den Code."

#: ../1.3.2_servo.rst:96
msgid "**Step 4**: Run the executable file."
msgstr "**Schritt 4**: Führen Sie die ausführbare Datei aus."

#: ../1.3.2_servo.rst:106 ../1.3.2_servo.rst:224
msgid ""
"After the program is executed, the servo will rotate from 0 degrees to "
"180 degrees, and then from 180 degrees to 0 degrees, circularly."
msgstr ""
"Nachdem das Programm ausgeführt wurde, dreht sich das Servo kreisförmig "
"von 0 Grad auf 180 Grad und dann von 180 Grad auf 0 Grad."

#: ../1.3.2_servo.rst:111
msgid ""
"If it does not work after running, please refer to :ref:`C code is not "
"working?`"
msgstr ""
"Wenn es nach dem Ausführen nicht funktioniert, lesen Sie bitte :ref:`C "
"code is not working?`"

#: ../1.3.2_servo.rst:113 ../1.3.2_servo.rst:227
msgid "**Code**"
msgstr "**Code**"

#: ../1.3.2_servo.rst:154 ../1.3.2_servo.rst:287
msgid "**Code Explanation**"
msgstr "**Code Erklärung**"

#: ../1.3.2_servo.rst:162
msgid "Create a Map() function to map value in the following code."
msgstr ""
"Erstellen Sie eine Map() - Funktion, um den Wert im folgenden Kode "
"zuzuordnen."

#: ../1.3.2_servo.rst:174
msgid "Create a funtion, setAngle() to write angle to the servo."
msgstr ""
"Erstellen Sie eine Funktion, setAngle (), um den Winkel zum Servo zu "
"schreiben."

#: ../1.3.2_servo.rst:180
msgid "This function can change the duty cycle of the PWM."
msgstr "Diese Funktion kann das Einschaltdauer der PWM ändern."

#: ../1.3.2_servo.rst:182
msgid ""
"To make the servo rotate to 0 ~ 180 °, the pulse width should change "
"within the range of 0.5ms ~ 2.5ms when the period is 20ms; in the "
"function, softPwmCreate(), we have set that the period is 200x100us=20ms,"
" thus we need to map 0 ~ 180 to 5x100us ~ 25x100us."
msgstr ""
"Damit sich das Servo auf 0 bis 180° dreht, sollte sich die Impulsbreite "
"im Bereich von 0,5 ms bis 2,5 ms ändern, wenn die Periode 20 ms beträgt. "
"In der Funktion softPwmCreate() haben wir festgelegt, dass der Zeitraum "
"200x100us = 20ms beträgt. Daher müssen wir 0 ~ 180 bis 5x100us ~ 25x100us"
" zuordnen."

#: ../1.3.2_servo.rst:187
msgid "The prototype of this function is shown below."
msgstr "Der Prototyp dieser Funktion ist unten dargestellt."

#: ../1.3.2_servo.rst:194
msgid "**Parameter pin:** Any GPIO pin of Raspberry Pi can be set as PWM pin."
msgstr ""
"**Parameter-Pin:** Jeder GPIO-Pin von Raspberry Pi kann als PWM-Pin "
"gesetzt werden."

#: ../1.3.2_servo.rst:196
msgid ""
"**Parameter initialValue:** The initial pulse width is that initialValue "
"times 100us."
msgstr ""
"**Parameter initialValue:** Die anfängliche Impulsbreite ist der "
"initialValue mal 100us."

#: ../1.3.2_servo.rst:199
msgid "**Parameter pwmRange:** the period of PWM is that pwmRange times 100us."
msgstr "**Parameter pwmRange:** Die Periode von PWM ist die pwmRange mal 100us."

#: ../1.3.2_servo.rst:202
msgid "For Python Language Users"
msgstr "Für Python-Sprachbenutzer"

#: ../1.3.2_servo.rst:214
msgid "**Step 3**: Run the executable file."
msgstr "**Schritt 3**: Führen Sie die ausführbare Datei aus."

#: ../1.3.2_servo.rst:231
 
msgid ""
"You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, "
"you need to go to  source code path like ``davinci-kit-for-raspberry-"
"pi/python``."
msgstr ""
"Sie können den folgenden Code **Ändern/Zurücksetzen/ "
"Kopieren/Ausführen/Stoppen**. Zuvor müssen Sie jedoch zu einem "
"Quellcodepfad wie ``davinci-kit-for-raspberry-pi/python`` gehen."

#: ../1.3.2_servo.rst:294
msgid ""
"Set the servoPin to PWM pin, then the frequency to 50hz, and the period "
"to 20ms."
msgstr ""
"Stellen Sie den ServoPin auf den PWM-Pin, dann die Frequenz auf 50 Hz und"
" die Periode auf 20 ms."

#: ../1.3.2_servo.rst:296
msgid "p.start(0): Run the PWM function，and set the initial value to 0."
msgstr ""
"p.start (0): Führen Sie die PWM-Funktion, und setzen Sie den Anfangswert "
"auf 0."

#: ../1.3.2_servo.rst:306
msgid ""
"Create a function, setAngle() to write angle that ranges from 0 to 180 "
"into the servo."
msgstr ""
"Erstellen Sie eine Funktion, setAngle (), um einen Winkel von 0 bis 180 "
"in das Servo zu schreiben."

#: ../1.3.2_servo.rst:312
msgid "This code is used to limit the angle within the range 0-180°."
msgstr ""
"Diese Kode wird verwendet, um den Winkel im Bereich von 0 bis 180 ° zu "
"begrenzen."

#: ../1.3.2_servo.rst:314
msgid ""
"The min() function returns the minimum of the input values. If 180<angle,"
" then return 180,if not, return angle."
msgstr ""
"Die Funktion min () gibt das Minimum der Eingabewerte zurück. Wenn 180 "
"<Winkel, then 180 zurückgeben, wenn nicht, Winkel zurückgeben ."

#: ../1.3.2_servo.rst:317
msgid ""
"The max() method returns the maximum element in an iterable or largest of"
" two or more parameters. If 0>angle, then return 0, if not, return angle."
msgstr ""
"Die max () -Methode gibt das maximale Element in einem iterierbaren oder "
"größten von zwei oder mehr Parametern zurück. Wenn 0> Winkel, dann 0 "
"zurückgeben, wenn nicht, Winkel zurückgeben."

#: ../1.3.2_servo.rst:326
msgid ""
"To render a range 0 ~ 180 ° to the servo, the pulse width of the servo is"
" set to 0.5ms(500us)-2.5ms(2500us)."
msgstr ""
"Um einen Bereich von 0 bis 180° zum Servo zu rendern, wird die "
"Impulsbreite des Servos auf 0,5 ms (500 us) bis 2,5 ms (2500 us) "
"eingestellt."

#: ../1.3.2_servo.rst:329
msgid ""
"The period of PWM is 20ms(20000us), thus the duty cycle of PWM is "
"(500/20000)%-(2500/20000)%, and the range 0 ~ 180 is mapped to 2.5 ~ "
"12.5."
msgstr ""
"Die Periode der PWM beträgt 20 ms (20000us), daher beträgt das "
"Tastverhältnis der PWM (500/20000)% - (2500/20000)%, und der Bereich 0 "
"bis 180 wird auf 2.5 bis 12.5 abgebildet."

#: ../1.3.2_servo.rst:335
msgid "Phenomenon Picture"
msgstr "Phänomen Bild"

