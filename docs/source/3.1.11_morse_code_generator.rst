.. note:: 

    Ciao! Benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Esplora piÃ¹ a fondo il mondo di Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **PerchÃ© unirti?**

    - **Supporto Esperto**: Risolvi problematiche post-vendita e sfide tecniche con l'aiuto del nostro team e della community.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato alle novitÃ  sui prodotti e anticipazioni.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri ultimi prodotti.
    - **Promozioni e Giveaway Festivi**: Partecipa a giveaway e promozioni durante le festivitÃ .

    ðŸ‘‰ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

3.1.11 Generatore di Codice Morse
===================================

Introduzione
-----------------

In questa lezione, realizzeremo un generatore di codice Morse, dove puoi 
digitare una serie di lettere in inglese sul Raspberry Pi per farle apparire 
come codice Morse.

Componenti
---------------

.. image:: img/3.1.10.png
    :align: center

Schema Elettrico
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: img/Schematic_three_one11.png
   :align: center

Procedure Sperimentali
----------------------------

**Passo 1:** Costruisci il circuito. (Presta attenzione ai poli del 
buzzer: il polo positivo Ã¨ contrassegnato con +, l'altro Ã¨ il polo negativo.)

.. image:: img/image269.png
   :alt: Morse_bb
   :width: 800

**Per Utenti Linguaggio C**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Passo 2**: Apri il file del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.11/

**Passo 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.11_MorseCodeGenerator.c -lwiringPi

**Passo 4**: Esegui il file eseguibile sopra.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Dopo l'avvio del programma, digita una serie di caratteri e il 
buzzer e il LED invieranno i segnali corrispondenti in codice Morse.

.. note::

    Se il programma non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: File o directory non trovato\", consulta :ref:`Il codice C non funziona?`.


**Spiegazione del Codice**

.. code-block:: c

    structÂ MORSE{
    Â Â Â Â charÂ word;
    Â Â Â Â unsignedÂ charÂ *code;
    };

    structÂ MORSEÂ morseDict[]=
    {
    Â Â Â Â {'A',"01"},Â {'B',"1000"},Â {'C',"1010"},Â {'D',"100"},Â {'E',"0"},Â 
    Â Â Â Â {'F',"0010"},Â {'G',"110"},Â {'H',"0000"},Â {'I',"00"},Â {'J',"0111"},Â 
    Â Â Â Â {'K',"101"},Â {'L',"0100"},Â {'M',"11"},Â {'N',"10"},Â {'O',"111"},Â 
    Â Â Â Â {'P',"0110"},Â {'Q',"1101"},Â {'R',"010"},Â {'S',"000"},Â {'T',"1"},
    Â Â Â Â {'U',"001"},Â {'V',"0001"},Â {'W',"011"},Â {'X',"1001"},Â {'Y',"1011"},Â 
    Â Â Â Â {'Z',"1100"},{'1',"01111"},Â {'2',"00111"},Â {'3',"00011"},Â {'4',"00001"},Â 
    Â Â Â Â {'5',"00000"},{'6',"10000"},Â {'7',"11000"},Â {'8',"11100"},Â {'9',"11110"},
    Â Â Â Â {'0',"11111"},{'?',"001100"},Â {'/',"10010"},Â {',',"110011"},Â {'.',"010101"},
    Â Â Â Â {';',"101010"},{'!',"101011"},Â {'@',"011010"},Â {':',"111000"}
    };

Questa struttura MORSE Ã¨ il dizionario del codice Morse, che contiene i 
caratteri da A-Z, i numeri 0-9 e i simboli \"?\" \"/\" \":\" \",\" \".\" \";\" \"!\" \"@\".

.. code-block:: c

    charÂ *lookup(charÂ key,structÂ MORSEÂ *dict,intÂ length)
    {
    Â Â Â Â forÂ (intÂ i=0;i<length;i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â if(dict[i].word==key){
    Â Â Â Â Â Â Â Â Â Â Â Â returnÂ dict[i].code;
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }Â Â Â Â 
    }

La funzione **lookup()** serve per "consultare il dizionario". Definisce 
una **key**, ricerca le parole identiche nella struttura **morseDict** e 
restituisce il corrispondente codice Morse.

.. code-block:: c

    voidÂ on(){
    Â Â Â Â digitalWrite(ALedPin,HIGH);
    Â Â Â Â digitalWrite(BeepPin,HIGH);Â Â Â Â Â 
    }

Crea la funzione on() per attivare il buzzer e il LED.

.. code-block:: c

    voidÂ off(){
    Â Â Â Â digitalWrite(ALedPin,LOW);
    Â Â Â Â digitalWrite(BeepPin,LOW);
    }

La funzione off() disattiva il buzzer e il LED.

.. code-block:: c

    voidÂ beep(intÂ dt){
    Â Â Â Â on();
    Â Â Â Â delay(dt);
    Â Â Â Â off();
    Â Â Â Â delay(dt);
    }

Definisci la funzione beep() per fare in modo che il buzzer e il LED 
emettano segnali a intervalli di **dt**.

.. code-block:: c

    voidÂ morsecode(charÂ *code){
    Â Â Â Â intÂ pauseÂ =Â 250;
    Â Â Â Â charÂ *pointÂ =Â NULL;
    Â Â Â Â intÂ lengthÂ =Â sizeof(morseDict)/sizeof(morseDict[0]);
    Â Â Â Â forÂ (intÂ i=0;i<strlen(code);i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â point=lookup(code[i],morseDict,length);
    Â Â Â Â Â Â Â Â forÂ (intÂ j=0;j<strlen(point);j++){
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (point[j]=='0')
    Â Â Â Â Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause/2);
    Â Â Â Â Â Â Â Â Â Â Â Â }elseÂ if(point[j]=='1')
    Â Â Â Â Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause);
    Â Â Â Â Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â Â Â Â Â delay(pause);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }
    }

La funzione morsecode() processa il codice Morse dei caratteri di input, 
facendo in modo che i segnali "1" durino piÃ¹ a lungo e quelli "0" siano 
brevi, ad esempio, digitando "SOS" si otterrÃ  un segnale di tre brevi, 
tre lunghi e tre brevi " Â· Â· Â· - - - Â· Â· Â· ".

.. code-block:: c

    intÂ toupper(intÂ c)
    {
    Â Â Â Â ifÂ ((cÂ >=Â 'a')Â &&Â (cÂ <=Â 'z'))
    Â Â Â Â Â Â Â Â returnÂ cÂ +Â ('A'Â -Â 'a');
    Â Â Â Â returnÂ c;
    }
    charÂ *strupr(charÂ *str)
    {
    Â Â Â Â charÂ *orign=str;
    Â Â Â Â forÂ (;Â *str!='\0';Â str++)
    Â Â Â Â Â Â Â Â *strÂ =Â toupper(*str);
    returnÂ orign;
    }

Prima della codifica, Ã¨ necessario convertire tutte le lettere in maiuscole.

.. code-block:: c

    voidÂ main(){
    Â Â Â Â setup();
    Â Â Â Â charÂ *code;
    Â Â Â Â intÂ length=8;
    Â Â Â Â codeÂ =Â (char*)malloc(sizeof(char)*length);
    Â Â Â Â whileÂ (1){
    Â Â Â Â Â Â Â Â printf("PleaseÂ inputÂ theÂ messenger:");
            delay(100);
    Â Â Â Â Â Â Â Â scanf("%s",code);
    Â Â Â Â Â Â Â Â code=strupr(code);
    Â Â Â Â Â Â Â Â printf("%s\n",code);
            delay(100);
    Â Â Â Â Â Â Â Â morsecode(code);
    Â Â Â Â }
    }

Quando digiti i caratteri con la tastiera, code = strupr(code) converte 
le lettere inserite in maiuscole.

La funzione Printf() stampa quindi il testo chiaro sullo schermo, e la 
funzione morsecod() fa sÃ¬ che il buzzer e il LED emettano il codice Morse.

Nota: la lunghezza del carattere in input non deve superare il valore 
di **length** (puÃ² essere modificato).

**Per Utenti Python**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Passo 2**: Apri il file del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python

**Passo 3**: Esegui.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.11_MorseCodeGenerator.py

Dopo l'avvio del programma, digita una serie di caratteri, e il buzzer e il 
LED invieranno i segnali Morse corrispondenti.

**Codice**

.. note::

    Puoi **Modificare/Reset/Copiare/Eseguire/Fermare** il codice qui sotto. 
    Tuttavia, prima di farlo, Ã¨ necessario accedere al percorso del codice 
    sorgente come ``davinci-kit-for-raspberry-pi/python``.

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    BeepPin=22
    ALedPin=17

    MORSECODE = {
        'A':'01', 'B':'1000', 'C':'1010', 'D':'100', 'E':'0', 'F':'0010', 'G':'110',
        'H':'0000', 'I':'00', 'J':'0111', 'K':'101', 'L':'0100', 'M':'11', 'N':'10',
        'O':'111', 'P':'0110', 'Q':'1101', 'R':'010', 'S':'000', 'T':'1',
        'U':'001', 'V':'0001', 'W':'011', 'X':'1001', 'Y':'1011', 'Z':'1100',
        '1':'01111', '2':'00111', '3':'00011', '4':'00001', '5':'00000',
        '6':'10000', '7':'11000', '8':'11100', '9':'11110', '0':'11111',
        '?':'001100', '/':'10010', ',':'110011', '.':'010101', ';':'101010',
        '!':'101011', '@':'011010', ':':'111000',
        }

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(ALedPin,GPIO.OUT,initial=GPIO.LOW)

    def on():
        GPIO.output(BeepPin, 1)
        GPIO.output(ALedPin, 1)

    def off():
        GPIO.output(BeepPin, 0)
        GPIO.output(ALedPin, 0)

    def beep(dt):    # dt per il tempo di ritardo.
        on()
        time.sleep(dt)
        off()
        time.sleep(dt)

    def morsecode(code):
        pause = 0.25
        for letter in code:
            for tap in MORSECODE[letter]:
                if tap == '0':
                    beep(pause/2)
                if tap == '1':
                    beep(pause)
            time.sleep(pause)

    def main():
        while True:
            code=input("Please input the messenger:")
            code = code.upper()
            print(code)
            morsecode(code)

    def destroy():
        print("")
        GPIO.output(BeepPin, GPIO.LOW)
        GPIO.output(ALedPin, GPIO.LOW)
        GPIO.cleanup()  

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Spiegazione del Codice**

.. code-block:: python

    MORSECODEÂ =Â {
    Â Â Â Â 'A':'01',Â 'B':'1000',Â 'C':'1010',Â 'D':'100',Â 'E':'0',Â 'F':'0010',Â 'G':'110',
    Â Â Â Â 'H':'0000',Â 'I':'00',Â 'J':'0111',Â 'K':'101',Â 'L':'0100',Â 'M':'11',Â 'N':'10',
    Â Â Â Â 'O':'111',Â 'P':'0110',Â 'Q':'1101',Â 'R':'010',Â 'S':'000',Â 'T':'1',
    Â Â Â Â 'U':'001',Â 'V':'0001',Â 'W':'011',Â 'X':'1001',Â 'Y':'1011',Â 'Z':'1100',
    Â Â Â Â '1':'01111',Â '2':'00111',Â '3':'00011',Â '4':'00001',Â '5':'00000',
    Â Â Â Â '6':'10000',Â '7':'11000',Â '8':'11100',Â '9':'11110',Â '0':'11111',
    Â Â Â Â '?':'001100',Â '/':'10010',Â ',':'110011',Â '.':'010101',Â ';':'101010',
    Â Â Â Â '!':'101011',Â '@':'011010',Â ':':'111000',
        }

Questa struttura MORSE Ã¨ il dizionario del codice Morse, contenente
 i caratteri da A-Z, i numeri da 0-9 e i simboli come \"?\" \"/\" \":\" \",\" \".\" \";\" \"!\" \"@\".

.. code-block:: python

    defÂ on():
    Â Â Â Â GPIO.output(BeepPin,Â 1)
    Â Â Â Â GPIO.output(ALedPin,Â 1)

La funzione on() attiva il buzzer e il LED.

.. code-block:: python

    defÂ off():
    Â Â Â Â GPIO.output(BeepPin,Â 0)
    Â Â Â Â GPIO.output(ALedPin,Â 0)

La funzione off() Ã¨ utilizzata per spegnere il buzzer e il LED.

.. code-block:: python

    defÂ beep(dt):Â Â Â #Â xÂ forÂ dalayÂ time.
        on()
        time.sleep(dt)
        off()
        time.sleep(dt)

Definisce una funzione beep() per far emettere suoni e lampeggiare il 
buzzer e il LED in un certo intervallo di **dt**.

.. code-block:: python

    defÂ morsecode(code):
    Â Â Â Â pauseÂ =Â 0.25
    Â Â Â Â forÂ letterÂ inÂ code:
    Â Â Â Â Â Â Â Â forÂ tapÂ inÂ MORSECODE[letter]:
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ tapÂ ==Â '0':
                    beep(pause/2)
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ tapÂ ==Â '1':
                    beep(pause)
            time.sleep(pause)

La funzione morsecode() processa il codice Morse dei caratteri di input, 
facendo in modo che i segnali "1" siano prolungati e quelli "0" siano brevi. 
Ad esempio, digitando "SOS", si ottiene un segnale di tre brevi, tre lunghi 
e tre brevi " Â· Â· Â· - - - Â· Â· Â· ".

.. code-block:: python

    defÂ main():
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â code=input("PleaseÂ inputÂ theÂ messenger:")
    Â Â Â Â Â Â Â Â codeÂ =Â code.upper()
            print(code)
            morsecode(code)

Quando si digita il messaggio con la tastiera, upper() converte le 
lettere inserite in maiuscole.

La funzione Printf() stampa quindi il testo chiaro sullo schermo, e 
a funzione morsecode() fa sÃ¬ che il buzzer e il LED emettano il codice Morse.

Immagine del Fenomeno
-----------------------

.. image:: img/image270.jpeg
   :align: center