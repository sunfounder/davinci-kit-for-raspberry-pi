.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Rejoignez d'autres passionn√©s pour approfondir vos connaissances sur le Raspberry Pi, Arduino et ESP32.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et relevez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des aper√ßus exclusifs.
    - **Remises sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des promotions sp√©ciales et des concours pendant les p√©riodes de f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.1.6 Joystick
================

Introduction
--------------

Dans ce projet, nous allons d√©couvrir le fonctionnement d'un joystick. Nous allons manipuler le joystick et afficher les r√©sultats sur l'√©cran.

Composants
-----------

.. image:: img/image317.png

Principe
----------

**Joystick**

L'id√©e de base d'un joystick est de traduire les mouvements d'un levier en 
informations √©lectroniques que l'ordinateur peut interpr√©ter.

Pour transmettre une gamme compl√®te de mouvements √† l'ordinateur, un joystick 
doit mesurer la position du levier sur deux axes ‚Äî l'axe X (de gauche √† droite) 
et l'axe Y (de haut en bas). Comme en g√©om√©trie de base, les coordonn√©es X-Y d√©terminent 
exactement la position du levier.

Pour d√©terminer l'emplacement du levier, le syst√®me de contr√¥le du joystick 
surveille simplement la position de chaque axe. La conception conventionnelle d'un 
joystick analogique utilise deux potentiom√®tres, ou r√©sistances variables.

Le joystick poss√®de √©galement une entr√©e num√©rique activ√©e lorsque le levier est enfonc√©.

.. image:: img/image318.png

Sch√©ma de c√¢blage
--------------------

Lors de la lecture des donn√©es du joystick, il existe des diff√©rences entre les axes : 
les donn√©es des axes X et Y sont analogiques, n√©cessitant l'utilisation de l'ADC0834 
pour convertir la valeur analogique en valeur num√©rique. Les donn√©es de l'axe Z sont 
num√©riques, elles peuvent donc √™tre lues directement via le GPIO, ou bien vous pouvez 
√©galement utiliser l'ADC pour les lire.

.. image:: img/image319.png

.. image:: img/image320.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image193.png
    :width: 800

**√âtape 2 :** Acc√©dez au dossier contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.1.6/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.6_Joystick.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out
Apr√®s l'ex√©cution du code, tournez le joystick, puis les valeurs correspondantes 
de x, y et Btn s'afficheront √† l'√©cran.

.. note::

    Si le programme ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur : "wiringPi.h: No such file or directory", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.
    
**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <softPwm.h>

    typedef unsigned char uchar;
    typedef unsigned int uint;

    #define     ADC_CS    0
    #define     ADC_CLK   1
    #define     ADC_DIO   2
    #define     BtnPin    3

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Start bit
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        //Single End mode
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // ODD
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,odd);  delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        //Select
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,sel);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);

        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);

        for(i=0;i<8;i++)
        {
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
            pinMode(ADC_DIO, INPUT);
            dat1=dat1<<1 | digitalRead(ADC_DIO);
        }
        for(i=0;i<8;i++)
        {
            dat2 = dat2 | ((uchar)(digitalRead(ADC_DIO))<<i);
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
        }
        digitalWrite(ADC_CS,1);
        pinMode(ADC_DIO, OUTPUT);
        return(dat1==dat2) ? dat1 : 0;
    }
    int main(void)
    {
        uchar x_val;
        uchar y_val;
        uchar btn_val;
        if(wiringPiSetup() == -1){ // En cas d'√©chec de l'initialisation de wiringPi, affichage du message d'erreur
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(BtnPin,  INPUT);
        pullUpDnControl(BtnPin, PUD_UP);
        pinMode(ADC_CS,  OUTPUT);
        pinMode(ADC_CLK, OUTPUT);

        while(1){
            x_val = get_ADC_Result(0);
            y_val = get_ADC_Result(1);
            btn_val = digitalRead(BtnPin);
            printf("x = %d, y = %d, btn = %d\n", x_val, y_val, btn_val);
            delay(100);
        }
        return 0;
    }

**Explication du Code**

.. code-block:: c

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Start bit
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        //Single End mode
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        ......

Le processus de fonctionnement de la fonction est d√©taill√© dans la section 2.1.4 Potentiom√®tre.

.. code-block:: c

    while(1){
            x_val = get_ADC_Result(0);
            y_val = get_ADC_Result(1);
            btn_val = digitalRead(BtnPin);
            printf("x = %d, y = %d, btn = %d\n", x_val, y_val, btn_val);
            delay(100);
        }

VRX et VRY du joystick sont connect√©s √† CH0 et CH1 de l'ADC0834 respectivement. 
La fonction getResult() est donc appel√©e pour lire les valeurs de CH0 et CH1. 
Ensuite, les valeurs lues sont stock√©es dans les variables x_val et y_val. De plus, 
la valeur de SW du joystick est lue et stock√©e dans la variable Btn_val. Enfin, les 
valeurs de x_val, y_val et Btn_val sont affich√©es avec la fonction printf().
