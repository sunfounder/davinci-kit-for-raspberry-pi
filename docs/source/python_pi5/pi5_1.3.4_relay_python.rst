.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux avant-go√ªts des nouveaut√©s.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.3.4_py_pi5:

1.3.4 Relais
==============

Introduction
---------------

Dans ce projet, nous allons apprendre √† utiliser un relais. C'est l'un des 
composants les plus couramment utilis√©s dans les syst√®mes de contr√¥le automatique. 
Lorsque la tension, le courant, la temp√©rature, la pression, etc., atteignent, d√©passent 
ou sont inf√©rieurs √† une valeur pr√©d√©termin√©e, le relais va connecter ou interrompre 
le circuit pour contr√¥ler et prot√©ger l'√©quipement.

Composants n√©cessaires
--------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/1.3.4_relay_list.png

.. raw:: html

   <br/>

Sch√©ma de circuit
------------------

.. image:: ../python_pi5/img/1.3.4_relay_schematic.png


Proc√©dure exp√©rimentale
---------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../python_pi5/img/1.3.4_relay_circuit.png

**√âtape 2 :** Ouvrir le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.4_Relay_zero.py

Pendant l'ex√©cution du code, la LED s'allume. De plus, vous entendrez un 
bruit de "tic-tac" provoqu√© par l'ouverture et la fermeture des contacts du relais.

.. warning::

    En cas d'erreur ¬´ RuntimeError: Cannot determine SOC peripheral base address ¬ª, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source, par exemple ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour observer le r√©sultat.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import OutputDevice  # Importer la classe pour contr√¥ler les broches GPIO
   from time import sleep  # Importer la fonction sleep pour les temporisations

   # Initialiser le relais connect√© √† la broche GPIO 17
   relais = OutputDevice(17)

   try:
       # Boucle pour basculer continuellement l'√©tat du relais toutes les secondes
       while True:
           print('Relay open...')  # Indiquer que le relais est activ√©
           relais.on()  # Allumer le relais (configuration active low pr√©sum√©e)
           sleep(1)   # Maintenir le relais en position allum√©e pendant 1 seconde

           print('...Relay close')  # Indiquer que le relais est d√©sactiv√©
           relais.off()  # √âteindre le relais
           sleep(1)   # Maintenir le relais en position √©teinte pendant 1 seconde

   except KeyboardInterrupt:
       # G√©rer une interruption clavier (Ctrl+C) pour quitter la boucle
       relais.off()  # S'assurer que le relais est √©teint avant de quitter
       pass


**Explication du code**

#. Cela importe ``OutputDevice`` de la biblioth√®que ``gpiozero`` pour contr√¥ler les broches GPIO et ``sleep`` de la biblioth√®que ``time`` pour ajouter des temporisations.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import OutputDevice  # Importer la classe pour contr√¥ler les broches GPIO
       from time import sleep  # Importer la fonction sleep pour les temporisations

#. Initialise un objet ``OutputDevice`` pour le relais connect√© √† la broche GPIO 17.

   .. code-block:: python

       # Initialiser le relais connect√© √† la broche GPIO 17
       relais = OutputDevice(17)

#. √Ä l'int√©rieur du bloc ``try``, une boucle ``while True`` bascule continuellement l'√©tat du relais. Le relais est allum√© et √©teint avec un d√©lai de 1 seconde entre chaque √©tat, accompagn√© de messages imprim√©s dans la console.

   .. code-block:: python

       try:
           # Boucle pour basculer continuellement l'√©tat du relais toutes les secondes
           while True:
               print('Relay open...')  # Indiquer que le relais est activ√©
               relais.on()  # Allumer le relais (configuration active low pr√©sum√©e)
               sleep(1)   # Maintenir le relais en position allum√©e pendant 1 seconde

               print('...Relay close')  # Indiquer que le relais est d√©sactiv√©
               relais.off()  # √âteindre le relais
               sleep(1)   # Maintenir le relais en position √©teinte pendant 1 seconde

#. Capture une interruption clavier (comme Ctrl+C) pour permettre une terminaison propre du script. Le relais est √©teint avant de quitter le script.

   .. code-block:: python
       
       except KeyboardInterrupt:
       # G√©rer une interruption clavier (Ctrl+C) pour quitter la boucle
       relais.off()  # S'assurer que le relais est √©teint avant de quitter
       pass

