.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres amateurs.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces des nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derni√®res nouveaut√©s.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.1.5_py_pi5:

1.1.5 Afficheur 7 segments √† 4 chiffres
===========================================

Introduction
----------------

Suivez-moi pour essayer de contr√¥ler un afficheur 7 segments √† 4 chiffres.

Composants n√©cessaires
---------------------------

Dans ce projet, nous aurons besoin des composants suivants. 

.. image:: ../python_pi5/img/1.1.5_4_digit_list.png

.. raw:: html

   <br/>

Sch√©ma de c√¢blage
---------------------

============ ======== ===
T-Board Name physical BCM
GPIO17       Pin 11   17
GPIO27       Pin 13   27
GPIO22       Pin 15   22
SPIMOSI      Pin 19   10
GPIO18       Pin 12   18
GPIO23       Pin 16   23
GPIO24       Pin 18   24
============ ======== ===

.. image:: ../python_pi5/img/1.1.5_4_digit_schmatic.png


Proc√©dure exp√©rimentale
---------------------------

**√âtape 1 :** Montez le circuit.

.. image:: ../python_pi5/img/1.1.5_4-Digit_circuit.png

**√âtape 2 :** Acc√©dez au dossier contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le programme.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.5_4-Digit.py

Apr√®s l'ex√©cution du code, le programme effectue un comptage, augmentant de 1 par seconde, et l'afficheur √† 4 chiffres affiche ce compteur.

.. warning::

    Si un message d'erreur appara√Æt tel que ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`. 

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, vous pouvez l'ex√©cuter directement pour observer le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import OutputDevice
   import time
   import threading

   # D√©finition des broches GPIO pour le registre √† d√©calage 74HC595
   SDI = OutputDevice(24)   # Entr√©e de donn√©es s√©rie
   RCLK = OutputDevice(23)  # Horloge du registre
   SRCLK = OutputDevice(18) # Horloge du registre de d√©calage

   # D√©finition des broches GPIO pour la s√©lection des chiffres de l'afficheur 7 segments
   placePin = [OutputDevice(pin) for pin in (10, 22, 27, 17)]

   # D√©finition des codes segmentaires pour les chiffres 0-9
   number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

   counter = 0  # Initialisation du compteur
   timer1 = 0   # Initialisation du minuteur

   def clearDisplay():
       """ Clear the 7-segment display. """
       for _ in range(8):
           SDI.on()
           SRCLK.on()
           SRCLK.off()
       RCLK.on()
       RCLK.off()

   def hc595_shift(data):
       """ Shift a byte of data to the 74HC595 shift register. """
       for i in range(8):
           SDI.value = 0x80 & (data << i)  # D√©finir SDI haut/bas selon le bit de donn√©es
           SRCLK.on()  # Impulsion d'horloge du registre de d√©calage
           SRCLK.off()
       RCLK.on()  # Verrouille les donn√©es avec une impulsion d'horloge
       RCLK.off()

   def pickDigit(digit):
       """ Select a digit for display on the 7-segment display. """
       for pin in placePin:
           pin.off()  # √âteint toutes les broches de s√©lection
       placePin[digit].on()  # Active la broche du chiffre s√©lectionn√©

   def timer():
       """ Timer function to increment the counter every second. """
       global counter, timer1
       timer1 = threading.Timer(1.0, timer)  # R√©initialisation du minuteur
       timer1.start()
       counter += 1  # Incr√©mente le compteur
       print("%d" % counter)  # Affiche la valeur actuelle du compteur

   def setup():
       """ Setup initial state and start the timer. """
       global timer1
       timer1 = threading.Timer(1.0, timer)  # Initialisation du minuteur
       timer1.start()

   def loop():
       """ Main loop to update the 7-segment display with counter value. """
       global counter
       while True:
           for i in range(4):  # Parcourt chaque chiffre
               clearDisplay()  # Efface l'affichage avant de d√©finir un nouveau chiffre
               pickDigit(i)    # S√©lectionne le chiffre √† afficher
               digit = (counter // (10 ** i)) % 10
               hc595_shift(number[digit])  # Envoie la valeur au registre 74HC595
               time.sleep(0.001)  # Courte pause pour la stabilit√© de l'affichage

   def destroy():
       """ Cleanup GPIO resources and stop timer on exit. """
       global timer1
       timer1.cancel()  # Arr√™te le minuteur
       for device in [SDI, RCLK, SRCLK] + placePin:
           device.close()  # Ferme les p√©riph√©riques GPIO

   try:
       setup()  # Initialise la configuration
       while True:
           loop()  # D√©marre la boucle principale
           
   except KeyboardInterrupt:
       # G√®re l'interruption du script (ex. Ctrl+C)
       destroy()  # Nettoie les ressources √† la sortie


**Explication du code**

#. Ces quatre broches contr√¥lent les broches d'anode commune des quatre chiffres de l'afficheur 7 segments.

   .. code-block:: python

       # D√©finition des broches GPIO pour la s√©lection des chiffres de l'afficheur 7 segments
       placePin = [OutputDevice(pin) for pin in (10, 22, 27, 17)]

#. Un tableau de codes segmentaires pour les chiffres de 0 √† 9 en hexad√©cimal (anode commune).

   .. code-block:: python

       # D√©finition des codes segmentaires pour les chiffres 0-9
       number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

#. Initialise un minuteur qui d√©clenche la fonction `timer` chaque seconde. Cela met en place l'incr√©mentation r√©currente du compteur.

   .. code-block:: python

       def setup():
           """ Setup initial state and start the timer. """
           global timer1
           timer1 = threading.Timer(1.0, timer)  # Initialisation du minuteur
           timer1.start()

#. Apr√®s chaque seconde, la fonction du minuteur est appel√©e ; elle incr√©mente le compteur et se r√©initialise pour se r√©p√©ter chaque seconde.

   .. code-block:: python

       def timer():
           """ Timer function to increment the counter every second. """
           global counter, timer1
           timer1 = threading.Timer(1.0, timer)  # R√©initialisation du minuteur
           timer1.start()
           counter += 1  # Incr√©mente le compteur
           print("%d" % counter)  # Affiche la valeur actuelle du compteur
#. D√©place un octet de donn√©es dans le registre √† d√©calage 74HC595, contr√¥lant les segments de l'afficheur.

   .. code-block:: python

       def hc595_shift(data):
           """ Shift a byte of data to the 74HC595 shift register. """
           for i in range(8):
               SDI.value = 0x80 & (data << i)  # D√©finit la valeur de SDI selon le bit de donn√©es
               SRCLK.on()  # Impulsion de l'horloge du registre de d√©calage
               SRCLK.off()
           RCLK.on()  # Verrouille les donn√©es sur la sortie en d√©clenchant l'horloge du registre
           RCLK.off()

#. Met continuellement √† jour l'affichage avec la valeur actuelle du compteur, en affichant chaque chiffre successivement.

   .. code-block:: python

       def loop():
           """ Main loop to update the 7-segment display with counter value. """
           global counter
           while True:
               for i in range(4):  # Parcourt chaque chiffre
                   clearDisplay()  # Efface l'affichage avant de d√©finir un nouveau chiffre
                   pickDigit(i)    # S√©lectionne le chiffre √† afficher
                   digit = (counter // (10 ** i)) % 10
                   hc595_shift(number[digit])  # Envoie la valeur du chiffre au 74HC595
                   time.sleep(0.001)  # Courte pause pour la stabilit√© de l'affichage

#. Efface l'afficheur 7 segments en √©teignant tous les segments avant d'afficher le chiffre suivant.

   .. code-block:: python

       def clearDisplay():
           """ Clear the 7-segment display. """
           for _ in range(8):
               SDI.on()
               SRCLK.on()
               SRCLK.off()
           RCLK.on()
           RCLK.off()

#. S√©lectionne le chiffre de l'afficheur 7 segments √† activer. Chaque chiffre est contr√¥l√© par une broche GPIO distincte.

   .. code-block:: python

       def pickDigit(digit):
           """ Select a digit for display on the 7-segment display. """
           for pin in placePin:
               pin.off()  # √âteint toutes les broches de s√©lection de chiffres
           placePin[digit].on()  # Allume la broche du chiffre s√©lectionn√©

#. Lib√®re correctement les ressources GPIO et arr√™te le minuteur lorsque le programme est interrompu.

   .. code-block:: python

       except KeyboardInterrupt:
           # G√®re l'interruption du script (ex. Ctrl+C)
           destroy()  # Nettoie les ressources √† la sortie
