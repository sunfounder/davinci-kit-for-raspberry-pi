.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Soutien d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et tirages au sort** : Participez √† des promotions et des tirages au sort lors des f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.2.7 Module RFID MFRC522
=============================

Introduction
----------------

La Radio Fr√©quence Identification (RFID) d√©signe les technologies qui utilisent 
la communication sans fil entre un objet (ou une √©tiquette) et un appareil 
d'interrogation (ou lecteur) pour suivre et identifier automatiquement ces objets.

Parmi les applications les plus courantes de cette technologie, on trouve les cha√Ænes 
d'approvisionnement dans le commerce de d√©tail, les cha√Ænes d'approvisionnement militaires, 
les m√©thodes de paiement automatis√©es, le suivi et la gestion des bagages, le suivi des 
documents et la gestion pharmaceutique, pour n'en nommer que quelques-unes.

Dans ce projet, nous utiliserons la RFID pour la lecture et l'√©criture.

Composants
--------------

.. image:: img/list_2.2.7.png


Principe
-----------

**RFID**

La Radio Fr√©quence Identification (RFID) d√©signe les technologies qui impliquent 
l'utilisation de la communication sans fil entre un objet (ou une √©tiquette) et 
un appareil d'interrogation (ou lecteur) pour suivre et identifier automatiquement 
ces objets. La port√©e de transmission de l'√©tiquette est limit√©e √† quelques m√®tres 
du lecteur. Une ligne de vue d√©gag√©e entre le lecteur et l'√©tiquette n'est pas 
forc√©ment n√©cessaire.

La plupart des √©tiquettes contiennent au moins un circuit int√©gr√© (IC) et une antenne. 
La puce stocke les informations et g√®re la communication en radiofr√©quence (RF) avec 
le lecteur. Les √©tiquettes passives ne poss√®dent pas de source d'√©nergie ind√©pendante 
et d√©pendent d'un signal √©lectromagn√©tique externe, fourni par le lecteur, pour alimenter 
leur fonctionnement. Les √©tiquettes actives, quant √† elles, contiennent une source d'√©nergie 
ind√©pendante, telle qu'une batterie. Elles peuvent ainsi avoir des capacit√©s de traitement, 
de transmission et de port√©e accrues.

.. image:: img/image230.png


**MFRC522**

Le MFRC522 est un type de puce int√©gr√©e pour la lecture et l'√©criture de cartes. Il est 
couramment utilis√© dans les radios √† 13,56 MHz. Lanc√© par la soci√©t√© NXP, il s'agit d'une 
puce pour cartes sans contact √† faible tension, faible co√ªt et petite taille, un choix 
id√©al pour les instruments intelligents et les appareils portables.

Le MF RC522 utilise un concept avanc√© de modulation et de d√©modulation qui est pleinement 
repr√©sent√© dans tous les types de m√©thodes et protocoles de communication sans contact 
passifs √† 13,56 MHz. De plus, il prend en charge l'algorithme de cryptage rapide CRYPTO1 
pour v√©rifier les produits MIFARE. Le MFRC522 prend √©galement en charge la s√©rie MIFARE 
pour une communication sans contact √† haute vitesse, avec un d√©bit de transmission 
bidirectionnelle pouvant atteindre 424 kbit/s. En tant que nouveau membre de la s√©rie de 
lecteurs de cartes hautement int√©gr√©s √† 13,56 MHz, le MF RC522 est tr√®s similaire aux MF 
RC500 et MF RC530 existants, mais pr√©sente √©galement de grandes diff√©rences. Il communique 
avec la machine h√¥te via un mode s√©rie, n√©cessitant moins de c√¢blage. Vous pouvez choisir 
entre les modes SPI, I2C et UART s√©rie (similaire √† RS232), ce qui permet de r√©duire les 
connexions, d'√©conomiser de l'espace sur la carte PCB (taille plus petite) et de r√©duire 
les co√ªts.

Sch√©ma
----------

.. image:: img/image331.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image232.png
    :width: 800


**√âtape 2 :** Configurez le SPI (r√©f√©rez-vous √† :ref:`spi_configuration` pour plus de d√©tails. Si vous avez d√©j√† configur√© le SPI, passez cette √©tape.)


Pour les utilisateurs de langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 3 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.7/

**√âtape 4 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    make read
    make write

.. note::
    Il existe deux exemples pour vous permettre de lire ou d'√©crire l'ID 
    de la carte, et vous pouvez choisir celui dont vous avez besoin.

**√âtape 5 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./read

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./write

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur : \"wiringPi.h: No such file or directory\", veuillez consulter :ref:`C code is not working?`. 

**Explication du code**

.. code-block:: c

    InitRc522();

Cette fonction est utilis√©e pour initialiser le module RFID RC522.

.. code-block:: c

    uint8_t read_card_data();

Cette fonction est utilis√©e pour lire les donn√©es de la carte, et si la lecture est 
r√©ussie, elle renverra "1".

.. code-block:: c

    uint8_t write_card_data(uint8_t *data);

Cette fonction est utilis√©e pour √©crire les donn√©es sur la carte et renverra "1" 
si l'√©criture est r√©ussie. \*data est l'information qui sera √©crite sur la carte.



Pour les utilisateurs de langage Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2** : Activation de l'environnement virtuel.

.. note::
    
    * Avant d'activer, vous devez vous assurer que vous avez cr√©√© un environnement virtuel, veuillez consulter :ref:`create_virtual`.

    * Chaque fois que vous red√©marrez le Raspberry Pi ou ouvrez un nouveau terminal, vous devrez ex√©cuter la commande suivante pour activer l'environnement virtuel.

.. raw:: html

    <run></run>

.. code-block:: shell

    source myenv/bin/activate

Une fois l'environnement virtuel activ√©, vous verrez le nom de l'environnement avant l'invite de commande, ce qui indique que vous travaillez dans l'environnement virtuel.


**√âtape 3 :** Installez les biblioth√®ques.

La biblioth√®que ``spidev`` permet de g√©rer les interactions avec le SPI et est un √©l√©ment cl√© de ce tutoriel, car nous en avons besoin pour que le Raspberry Pi interagisse avec le RFID RC522.

Ex√©cutez la commande suivante pour installer ``spidev`` sur votre Raspberry Pi via ``pip``.

.. raw:: html

    <run></run>
 
.. code-block:: 

    sudo pip3 install spidev


Continuez l'installation de la biblioth√®que MFRC522. La biblioth√®que MFRC522 contient deux fichiers : ``MFRC522.py`` et ``SimpleMFRC522.py``.

Parmi eux, ``MFRC522.py`` est la r√©alisation de l'interface RFID RC522. Cette biblioth√®que g√®re tout le travail complexe de communication avec RFID via l'interface SPI du Pi.

``SimpleMFRC522.py`` reprend le fichier ``MFRC522.py`` et le simplifie grandement en vous permettant de n'utiliser que quelques fonctions au lieu de nombreuses.

.. raw:: html

    <run></run>

.. code-block::

    sudo pip3 install mfrc522


**√âtape 4** : Sortir de l'environnement virtuel.

Lorsque vous avez termin√© votre travail et que vous souhaitez quitter l'environnement virtuel, ex√©cutez simplement :

.. raw:: html

    <run></run>

.. code-block:: shell

    deactivate

Cela vous ram√®nera √† l'environnement Python global du syst√®me.

**√âtape 5 :** Allez dans le dossier du code.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/2.2.7

**√âtape 6 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.7_read.py

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.7_write.py

.. note::

    * Apr√®s avoir ex√©cut√© ``2.2.7_read.py``, l'identifiant ``id`` et le ``text`` de votre carte seront affich√©s dans le terminal.
    * Apr√®s avoir ex√©cut√© ``2.2.7_write.py``, vous devez d'abord √©crire un message, appuyer sur ``Entr√©e`` pour confirmer, puis placer votre carte sur le module RFID MFRC522 pour terminer l'√©criture.


**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code source, tel que ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    # lecture
    import time
    from mfrc522 import SimpleMFRC522
    import RPi.GPIO as GPIO

    reader = SimpleMFRC522()

    def main():
        while True:
            print("Reading...Please place the card...")
            id, text = reader.read()
            print("ID: %s\nText: %s" % (id,text))
            time.sleep(3)
            
    def destroy():
        GPIO.cleanup()
        
    if __name__ == '__main__':
        try:
            main()
        # Lorsque 'Ctrl+C' est press√©, la fonction destroy() sera ex√©cut√©e.
        except KeyboardInterrupt:
            destroy()

    
.. raw:: html

    <run></run>
        
.. code-block:: python

    # √©criture
    from mfrc522 import SimpleMFRC522
    import RPi.GPIO as GPIO

    reader = SimpleMFRC522()

    def main():
        while True:
            text = input('Please write new data:')
            print("Please place the card to complete writing")
            reader.write(text)
            print("Data writing is complete")
            
    def destroy():
        GPIO.cleanup()
        
    if __name__ == '__main__':
        try:
            main()
        # Lorsque 'Ctrl+C' est press√©, la fonction destroy() sera ex√©cut√©e.
        except KeyboardInterrupt:
            destroy()

**Explication du code**

.. code-block:: python

    reader = SimpleMFRC522()

Instancie la classe ``SimpleMFRC522()``.

.. code-block:: python

    reader.read()

Cette fonction est utilis√©e pour lire les donn√©es de la carte. Si la lecture est r√©ussie, l'identifiant et le texte seront renvoy√©s.

.. code-block:: python

    reader.write(text)

Cette fonction est utilis√©e pour √©crire des informations sur la carte, appuyez sur la touche ``Entr√©e`` pour terminer l'√©criture. ``text`` est l'information √† √©crire sur la carte.

Image du ph√©nom√®ne
---------------------

.. image:: img/image233.jpeg