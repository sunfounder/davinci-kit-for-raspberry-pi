.. note::

    Hola, ¡bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¿Por qué unirse?**

    - **Soporte experto**: Resuelve problemas post-venta y desafíos técnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas exclusivas**: Accede anticipadamente a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos más recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones navideñas.

    👉 ¿Listo para explorar y crear con nosotros? ¡Haz clic en [|link_sf_facebook|] y únete hoy!

2.2.3 DHT-11
===============

Introducción
---------------

El sensor digital de temperatura y humedad DHT11 es un sensor compuesto 
que contiene una salida digital calibrada de temperatura y humedad. 
Se aplican tecnologías de módulos digitales dedicados y de detección de 
temperatura y humedad para garantizar que el producto tenga alta fiabilidad 
y excelente estabilidad.

Los sensores incluyen un sensor resistivo de elemento húmedo y un sensor de 
temperatura NTC, y están conectados a un microcontrolador de 8 bits de alto rendimiento.

Componentes
-------------

.. image:: img/list_2.2.3_dht-11.png


Principio
------------

El DHT11 es un sensor digital básico de temperatura y humedad de bajo costo. 
Utiliza un sensor de humedad capacitivo y un termistor para medir el aire 
circundante y emite una señal digital por el pin de datos (no se necesitan 
pines de entrada analógica).

.. image:: img/image205.png
    :width: 200


Solo hay tres pines disponibles: VCC, GND y DATA. El proceso de comunicación 
comienza con la línea DATA enviando señales de inicio al DHT11, que recibe las 
señales y devuelve una señal de respuesta. Luego, el host recibe la señal de 
respuesta y comienza a recibir datos de humedad y temperatura de 40 bits (8 bits 
de entero de humedad + 8 bits de decimal de humedad + 8 bits de entero de 
temperatura + 8 bits de decimal de temperatura + 8 bits de suma de verificación). Para más información, consulta la hoja de datos del DHT11.



Diagrama Esquemático
-------------------------

.. image:: img/image326.png


Procedimientos Experimentales
--------------------------------

**Paso 1:** Construir el circuito.

.. image:: img/image207.png
    :width: 800


**Paso 2:** Ir a la carpeta del código.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.3/

**Paso 3:** Compilar el código.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.3_DHT.c -lwiringPi

**Paso 4:** Ejecutar el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Después de ejecutar el código, el programa imprimirá la temperatura y la 
humedad detectadas por el DHT11 en la pantalla del ordenador.

.. note::

    Si no funciona después de ejecutar, o aparece un mensaje de error: \"wiringPi.h: No such file or directory", consulta :ref:`C code is not working?`.


    **Código**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <stdint.h>

    #define maxTim 85
    #define dhtPin 0

    int dht11_dat[5] = {0,0,0,0,0};

    void readDht11() {
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0, i;
        float Fah; // Fahrenheit
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
        // Pulsa el pin bajo durante 18 milisegundos
        pinMode(dhtPin, OUTPUT);
        digitalWrite(dhtPin, LOW);
        delay(18);
        // Luego súbelo durante 40 microsegundos
        digitalWrite(dhtPin, HIGH);
        delayMicroseconds(40); 
        // Prepara para leer el pin
        pinMode(dhtPin, INPUT);

        // Detectar el cambio y leer datos
        for (i = 0; i < maxTim; i++) {
            counter = 0;
            while (digitalRead(dhtPin) == laststate) {
                counter++;
                delayMicroseconds(1);
                if (counter == 255) {
                    break;
                }
            }
            laststate = digitalRead(dhtPin);

            if (counter == 255) break;
            // Ignorar las primeras 3 transiciones
            if ((i >= 4) && (i % 2 == 0)) {
                // Almacena cada bit en los bytes de almacenamiento
                dht11_dat[j / 8] <<= 1;
                if (counter > 50)
                    dht11_dat[j / 8] |= 1;
                j++;
            }
        }
        // Verificar que leímos 40 bits (8 bits x 5) + verificar la suma de verificación en el último byte
        // Imprimir si los datos son correctos
        if ((j >= 40) && 
            (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF))) {
            Fah = dht11_dat[2] * 9. / 5. + 32;
            printf("Humidity = %d.%d %% Temperature = %d.%d *C (%.1f *F)\n", 
                    dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], Fah);
        }
    }

    int main (void) {
        if(wiringPiSetup() == -1){ //when initialize wiring failed, print messageto screen
            printf("setup wiringPi failed !");
            return 1; 
        }
        while (1) {
            readDht11();
            delay(500); // wait 1sec to refresh
        }
        return 0 ;
    }

**Explicación del Código**

.. code-block:: c

    void readDht11() {
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0, i;
        float Fah; // Fahrenheit
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
        // ...
    }

Esta función se utiliza para realizar la función del DHT11.

Se puede dividir en 3 partes:

1. Preparar para leer el pin:

.. code-block:: c

    // Pulsa el pin bajo durante 18 milisegundos
    pinMode(dhtPin, OUTPUT);
    digitalWrite(dhtPin, LOW);
    delay(18);
    // Luego súbelo durante 40 microsegundos
    digitalWrite(dhtPin, HIGH);
    delayMicroseconds(40); 
    // Prepara para leer el pin
    pinMode(dhtPin, INPUT);

Su flujo de comunicación está determinado por el tiempo de trabajo.

.. image:: img/image208.png
    :width: 800

Cuando el DHT11 se inicia, el MCU enviará una señal de bajo nivel y luego 
mantendrá la señal en alto durante 40us. Después de eso, comenzará la detección 
de la condición del entorno externo.

2. Leer datos:

.. code-block:: c

    // Detectar cambio y leer datos  
    for (i = 0; i < maxTim; i++) {
        counter = 0;
        while (digitalRead(dhtPin) == laststate) {
            counter++;
            delayMicroseconds(1);
            if (counter == 255) {
                break;
            }
        }
        laststate = digitalRead(dhtPin);
        if (counter == 255) break;
        // Ignorar las primeras 3 transiciones
        if ((i >= 4) && (i % 2 == 0)) {
            // Almacena cada bit en los bytes de almacenamiento
                dht11_dat[j/8] <<= 1;
            if (counter > 50)
                    dht11_dat[j/8] |= 1;
            j++;
        }
    }

El bucle almacena los datos detectados en el array dht11_dat[]. 
El DHT11 transmite datos de 40 bits a la vez. Los primeros 16 bits 
están relacionados con la humedad, los 16 bits del medio están 
relacionados con la temperatura, y los últimos ocho bits se utilizan 
para la verificación. El formato de los datos es:

**8 bits de datos enteros de humedad** + **8 bits de datos decimales de humedad** 
+ **8 bits de datos enteros de temperatura** + **8 bits de datos decimales de temperatura** 
+ **8 bits de bit de verificación**.

3. Imprimir Humedad y Temperatura.

.. code-block:: c

    // Verificar que leímos 40 bits (8 bits x 5) + verificar la suma de verificación en el último byte
    // Imprimir si los datos son buenos
    if ((j >= 40) && 
            (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) {
        Fah = dht11_dat[2] * 9. / 5. + 32;
        printf("Humidity = %d.%d %% Temperature = %d.%d *C (%.1f *F)\n", 
                dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], Fah);
    }

Cuando el almacenamiento de datos alcanza los 40 bits, verifica la validez 
de los datos a través del **bit de verificación (dht11_dat[4])**, y luego 
imprime la temperatura y la humedad.

Por ejemplo, si los datos recibidos son 00101011 (valor de humedad entera de 
8 bits) 00000000 (valor decimal de humedad de 8 bits) 00111100 (valor entero 
de temperatura de 8 bits) 00000000 (valor decimal de temperatura de 8 bits) 
01100111 (bit de verificación)

**Cálculo:**

00101011+00000000+00111100+00000000=01100111.

El resultado final es igual a los datos del bit de verificación, entonces los datos recibidos son correctos:

Humedad = 43%, Temperatura = 60°C.

Si no es igual a los datos del bit de verificación, la transmisión de datos no es normal y se reciben los datos nuevamente.
