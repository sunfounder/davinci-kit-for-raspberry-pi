.. note::

    Bonjour et bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions √† l'occasion des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.2.3 DHT-11
===============

Introduction
----------------

Le capteur num√©rique de temp√©rature et d'humidit√© DHT11 est un capteur composite 
qui fournit un signal de sortie num√©rique calibr√© de temp√©rature et d'humidit√©. 
La technologie de collecte de modules num√©riques d√©di√©s et celle de d√©tection de 
temp√©rature et d'humidit√© sont appliqu√©es pour garantir une haute fiabilit√© et une 
excellente stabilit√© du produit.

Le capteur inclut un capteur d'humidit√© r√©sistif et un capteur de temp√©rature CTN, 
tous deux connect√©s √† un microcontr√¥leur 8 bits haute performance.

Composants
------------

.. image:: img/list_2.2.3_dht-11.png


Principe
-----------

Le DHT11 est un capteur num√©rique de temp√©rature et d'humidit√© basique et √† tr√®s faible 
co√ªt. Il utilise un capteur capacitif pour l'humidit√© et une thermistance pour mesurer 
l'air environnant, puis il envoie un signal num√©rique via la broche de donn√©es (aucune 
broche d'entr√©e analogique n'est n√©cessaire).

.. image:: img/image205.png
    :width: 200


Il dispose de seulement trois broches : VCC, GND et DATA. Le processus de communication 
commence lorsque la ligne de donn√©es (DATA) envoie des signaux de d√©marrage au DHT11, 
et le DHT11 re√ßoit ces signaux et renvoie un signal de r√©ponse. Ensuite, l'h√¥te re√ßoit 
le signal de r√©ponse et commence √† recevoir 40 bits de donn√©es (8 bits pour l'humidit√© 
enti√®re + 8 bits pour l'humidit√© d√©cimale + 8 bits pour la temp√©rature enti√®re + 8 bits 
pour la temp√©rature d√©cimale + 8 bits de contr√¥le de parit√©). Pour plus d'informations, 
veuillez vous r√©f√©rer √† la fiche technique du DHT11.

Sch√©ma de c√¢blage
---------------------

.. image:: img/image326.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image207.png
    :width: 800


**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.3/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.3_DHT.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du programme, la temp√©rature et l'humidit√© d√©tect√©es par le DHT11 
seront affich√©es sur l'√©cran de l'ordinateur.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution ou s'il y a un message d'erreur indiquant : ¬´ wiringPi.h : Aucun fichier ou r√©pertoire de ce type ¬ª, veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <stdint.h>

    #define MAXTIMINGS 85  // Maximum number of timing transitions

    int dht11_dat[5] = {0, 0, 0, 0, 0};  // Data array to hold sensor values

    // Function to read data from DHT11 sensor
    void read_dht11_dat(int GPIOPIN)
    {
        uint8_t currState;
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0;
        uint8_t i;
        float f; // Temperature in Fahrenheit

        // Reset data array before each read
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;

        // Pull pin down for 18 milliseconds to initiate communication
        pinMode(GPIOPIN, OUTPUT);
        digitalWrite(GPIOPIN, LOW);
        delay(18);

        // Then pull it up for 40 microseconds
        digitalWrite(GPIOPIN, HIGH);
        delayMicroseconds(40); 

        // Prepare to read the pin
        pinMode(GPIOPIN, INPUT);

        // Detect change and read data
        for (i = 0; i < MAXTIMINGS; i++) 
        {
            counter = 0;

            // Count how long each state lasts
            while (digitalRead(GPIOPIN) == laststate)
            {
                counter++;
                delayMicroseconds(2);
                if (counter == 255) 
                {
                    break;
                }
            }

            // Save the current state
            laststate = digitalRead(GPIOPIN);

            if (counter == 255) break;

            // Ignore first 3 transitions (DHT11 response signal)
            if ((i >= 4) && (i % 2 == 0)) 
            {
                // Shift bits and store data
                dht11_dat[j/8] <<= 1;
                if (counter > 16)
                {
                    dht11_dat[j/8] |= 1;
                }

                j++;
            }
        }

        // Check if we received 40 bits (5 bytes) and verify checksum
        if ((j >= 40) && (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) 
        {
            // Convert temperature to Fahrenheit
            f = dht11_dat[2] * 9.0 / 5.0 + 32;
            printf("Humidity = %d.%d %% Temperature = %d.%d ¬∞C (%.1f ¬∞F)\n",
                   dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], f);
        }
        else
        {
            printf("Data not good, skip\n");
        }
    }

    int main (void)
    {
        printf("Raspberry Pi wiringPi DHT11 Temperature test program\n");

        // Initialize wiringPi using BCM GPIO pin numbering
        if (wiringPiSetupGpio() == -1)
        {
            exit(1);
        }

        while(1) 
        {
            // Read data from DHT11 connected to GPIO pin 17
            read_dht11_dat(17);
            delay(1000); // Wait 1 second before next read
        }

        return 0;
    }

**Explication du code**

#. Inclure les en-t√™tes : Le code inclut les en-t√™tes n√©cessaires pour les fonctions wiringPi et l‚Äôentr√©e/sortie standard.

   .. code-block:: c

        #include <wiringPi.h>
        #include <stdio.h>
        #include <stdlib.h>
        #include <stdint.h>

#. D√©finir les constantes :

   * ``MAXTIMINGS`` : Le nombre maximum de transitions de temps attendu du capteur DHT11 (85).
   
   .. code-block:: C

        #define MAXTIMINGS 85  // Nombre maximum de transitions de temps

#. Tableau de donn√©es global :

   * ``dht11_dat[5]`` : Un tableau pour stocker les 5 octets de donn√©es re√ßus du capteur DHT11.
   
   .. code-block:: C

        int dht11_dat[5] = {0, 0, 0, 0, 0};  // Tableau de donn√©es pour stocker les valeurs du capteur

#. Fonction ``read_dht11_dat(int GPIOPIN)`` : Lit les donn√©es du capteur DHT11 connect√© √† la broche GPIO sp√©cifi√©e.
   
   * Initialisation : R√©initialise le tableau ``dht11_dat`` √† z√©ro avant chaque lecture.
   
     .. code-block:: C

        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;

   * Signal de d√©marrage : Met la broche GPIO √† bas pendant au moins 18 millisecondes pour signaler au DHT11 de commencer √† envoyer des donn√©es.
   
     .. code-block:: C

        pinMode(GPIOPIN, OUTPUT);
        digitalWrite(GPIOPIN, LOW);
        delay(18);  // 18 millisecondes

   * Met la broche GPIO √† haut pendant 40 microsecondes.
   
     .. code-block:: C

        digitalWrite(GPIOPIN, HIGH);
        delayMicroseconds(40);  // 40 microsecondes

   * Configure la broche GPIO en mode entr√©e pour lire les donn√©es du capteur.
   
     .. code-block:: C

        pinMode(GPIOPIN, INPUT);

   * Boucle de lecture des donn√©es : La boucle s‚Äôex√©cute jusqu‚Äô√† ``MAXTIMINGS`` fois pour lire les bits de donn√©es.

     Pour chaque transition (de haut √† bas ou de bas √† haut), elle mesure combien de temps la broche reste dans chaque √©tat.

     .. code-block:: C

        for (i = 0; i < MAXTIMINGS; i++) 
        {
            counter = 0;
            while (digitalRead(GPIOPIN) == laststate)
            {
                counter++;
                delayMicroseconds(2);
                if (counter == 255) 
                {
                    break;
                }
            }
            laststate = digitalRead(GPIOPIN);
            // ... reste de la boucle
        }

   * Extraction de bits de donn√©es : Les 3 premi√®res transitions sont ignor√©es car elles font partie de la r√©ponse initiale du DHT11.

     Pour chaque bit de donn√©es, elle d√©termine si le bit est 0 ou 1 en fonction de la dur√©e pendant laquelle la broche reste √† haut.

     .. code-block:: C

        if ((i >= 4) && (i % 2 == 0)) 
        {
            dht11_dat[j/8] <<= 1;
            if (counter > 16)
            {
                dht11_dat[j/8] |= 1;
            }
            j++;
        }

   * V√©rification de la somme de contr√¥le : Apr√®s avoir re√ßu tous les bits, le code v√©rifie la somme de contr√¥le pour garantir l'int√©grit√© des donn√©es.
   
     .. code-block:: C

        if ((j >= 40) && (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) )

   * Si la somme de contr√¥le est correcte, elle affiche les valeurs d'humidit√© et de temp√©rature.
   
     .. code-block:: C

        f = dht11_dat[2] * 9.0 / 5.0 + 32;
        printf("Humidit√© = %d.%d %% Temp√©rature = %d.%d ¬∞C (%.1f ¬∞F)\n",
               dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], f);

   * Si la somme de contr√¥le √©choue, elle affiche un message d'erreur.
   
     .. code-block:: C

        else
        {
            printf("Donn√©es incorrectes, saut\n");
        }

#. Fonction principale :

   * Affiche un message de d√©marrage.

   .. code-block:: C

        printf("Programme de test de temp√©rature DHT11 pour Raspberry Pi avec wiringPi\n");

   * Initialise wiringPi en utilisant la num√©rotation des broches GPIO BCM.
   
   .. code-block:: C

        if (wiringPiSetupGpio() == -1)
        {
            exit(1);
        }

   * Entre dans une boucle infinie pour lire les donn√©es du capteur DHT11 chaque seconde.
     
     .. code-block:: C

        while(1) 
        {
            read_dht11_dat(17);
            delay(1000); // attendre 1 seconde
        }

