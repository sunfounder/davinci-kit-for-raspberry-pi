.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez au c≈ìur de l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres amateurs.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions et cadeaux festifs** : Participez √† des concours et promotions pendant les p√©riodes festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Interrupteur √† Distance
===========================

Dans ce projet, nous allons apprendre √† utiliser le bouton Interrupteur de Cloud4RPi pour contr√¥ler le relais, permettant ainsi de piloter la charge du relais (par exemple, une LED). Vous pouvez √©galement changer la charge du relais par des appareils √©lectrom√©nagers, mais veillez √† respecter les consignes de s√©curit√©.

Proc√©dures exp√©rimentales
-----------------------------

Montez le circuit.

.. image:: img/relay1.png
    :align: center

Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/cloud4rpi-raspberrypi-python
    sudo nano remote_switch.py

Trouvez la ligne ci-dessous et compl√©tez-la avec le bon token de l'appareil.

.. code-block:: python

    DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'

Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 remote_switch.py

Acc√©dez √† Cloud4RPi, ajoutez un nouveau panneau de contr√¥le nomm√© **project2** et cliquez sur **Add Widget** pour ajouter un widget **Switch**.

.. image:: img/relay2.png
    :align: center

Une fois ajout√©, vous pouvez utiliser le widget Switch pour contr√¥ler le relais.

.. image:: img/relay3.png
    :align: center

Explication du code
------------------------

.. code-block:: python

    RELAY_PIN = 18

Le relais est connect√© au GPIO18 de la carte d'extension T.

.. code-block:: python

    GPIO.setmode(GPIO.BCM)
    GPIO.setup(RELAY_PIN, GPIO.OUT)

Configurez le mode de num√©rotation BCM et d√©finissez ``RELAY_PIN`` en tant que sortie.

.. code-block:: python

    def relay_control(value=None):
        GPIO.output(RELAY_PIN, value)
        return GPIO.input(RELAY_PIN)

Cette fonction contr√¥le le relais en fonction de la valeur ``value`` et renvoie le niveau actuel du relais.

.. note::

    Comme le relais fonctionne √† un niveau haut, le relais se ferme lorsque l'√©tat de l'interrupteur est √† **True** et s'ouvre lorsque l'√©tat de l'interrupteur est √† **False**.

.. code-block:: python

    variables = {
        'LED On': {
            'type': 'bool',
            'value': False,
            'bind': relay_control
        },
    }

En d√©finissant la valeur de la cl√© ``'value'``, nous pouvons fixer la valeur initiale du widget Switch, puis lire en continu la valeur de la cl√© ``'value'`` et envoyer le niveau actuel de ``RELAY_PIN`` (la valeur renvoy√©e par la fonction ``relay_control()``) √† Cloud4RPi.
