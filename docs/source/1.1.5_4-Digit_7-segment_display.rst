.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes post-vente et techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et tirages au sort** : Participez √† des promotions sp√©ciales et des giveaways.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !


1.1.5 4-Digit 7-Segment Display
====================================

Introduction
-----------------

Ensuite, suivez-moi pour essayer de contr√¥ler l'afficheur 7 segments √† 4 chiffres.

Composants
---------------

.. image:: img/list_4_digit.png

Principe
--------------

**Afficheur 7 segments √† 4 chiffres**

L'afficheur 7 segments √† 4 chiffres se compose de quatre affichages √† 7 segments fonctionnant ensemble.

.. image:: img/4-digit-sche.png

L'afficheur 7 segments √† 4 chiffres fonctionne ind√©pendamment. Il utilise le principe 
de la persistance r√©tinienne pour afficher rapidement les caract√®res de chaque segment 
en boucle afin de former des cha√Ænes continues.

Par exemple, lorsque "1234" est affich√©, "1" est d'abord montr√© sur le premier segment, 
les autres ne sont pas affich√©s. Apr√®s un court instant, le deuxi√®me segment affiche "2", 
et ainsi de suite. Le processus est tr√®s rapide (environ 5ms), et en raison de l'effet de 
r√©manence optique et de la persistance r√©tinienne, nous voyons les quatre chiffres en m√™me 
temps.

.. image:: img/image78.png

**Codes d'affichage**

Pour mieux comprendre comment les affichages √† 7 segments (anode commune) affichent les 
chiffres, nous avons dress√© le tableau suivant. Les nombres repr√©sentent les chiffres 0-F 
affich√©s sur l'afficheur 7 segments ; (DP) GFEDCBA indique quels segments LED sont activ√©s. 
Par exemple, 11000000 signifie que DP et G sont activ√©s, tandis que les autres sont d√©sactiv√©s, 
ce qui correspond au chiffre "0" sur l'afficheur. Le code HEX correspond au num√©ro en 
hexad√©cimal.

.. image:: img/common_anode.png


Sch√©ma de c√¢blage
--------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
============ ======== ======== ===

.. image:: img/schmatic_4_digit.png


Proc√©dures exp√©rimentales
-----------------------------------

**√âtape 1** : Construisez le circuit.

.. image:: img/image80.png
    :width: 800

Pour les utilisateurs du langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
√âtape 2 : Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.1.5/

√âtape 3 : Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.1.5_4-Digit.c -lwiringPi

√âtape 4 : Ex√©cutez le fichier compil√©.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, le programme effectue un comptage, augmentant de 1 chaque seconde, et l'afficheur 7 segments √† 4 chiffres affiche le d√©compte.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur : "wiringPi.h: Aucun fichier ou r√©pertoire de ce type", veuillez consulter :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <wiringShift.h>
    #include <signal.h>
    #include <unistd.h>

    #define SDI 5
    #define RCLK 4
    #define SRCLK 1

    const int placePin[] = {12, 3, 2, 0};
    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

    int counter = 0;

    void pickDigit(int digit)
    {
        for (int i = 0; i < 4; i++)
        {
            digitalWrite(placePin[i], 0);
        }
        digitalWrite(placePin[digit], 1);
    }

    void hc595_shift(int8_t data)
    {
        int i;
        for (i = 0; i < 8; i++)
        {
            digitalWrite(SDI, 0x80 & (data << i));
            digitalWrite(SRCLK, 1);
            delayMicroseconds(1);
            digitalWrite(SRCLK, 0);
        }
        digitalWrite(RCLK, 1);
        delayMicroseconds(1);
        digitalWrite(RCLK, 0);
    }

    void clearDisplay()
    {
        int i;
        for (i = 0; i < 8; i++)
        {
            digitalWrite(SDI, 1);
            digitalWrite(SRCLK, 1);
            delayMicroseconds(1);
            digitalWrite(SRCLK, 0);
        }
        digitalWrite(RCLK, 1);
        delayMicroseconds(1);
        digitalWrite(RCLK, 0);
    }

    void loop()
    {
        while(1){
        clearDisplay();
        pickDigit(0);
        hc595_shift(number[counter % 10]);

        clearDisplay();
        pickDigit(1);
        hc595_shift(number[counter % 100 / 10]);

        clearDisplay();
        pickDigit(2);
        hc595_shift(number[counter % 1000 / 100]);
    
        clearDisplay();
        pickDigit(3);
        hc595_shift(number[counter % 10000 / 1000]);
        }
    }

    void timer(int timer1)
    { 
        if (timer1 == SIGALRM)
        { 
            counter++;
            alarm(1); 
            printf("%d\n", counter);
        }
    }

    void main(void)
    {
        if (wiringPiSetup() == -1)
        { 
            printf("setup wiringPi failed !");
            return;
        }
        pinMode(SDI, OUTPUT); 
        pinMode(RCLK, OUTPUT);
        pinMode(SRCLK, OUTPUT);
        
        for (int i = 0; i < 4; i++)
        {
            pinMode(placePin[i], OUTPUT);
            digitalWrite(placePin[i], HIGH);
        }
        signal(SIGALRM, timer); 
        alarm(1);               
        loop(); 
    }



**Explication du Code**

.. code-block:: c

    const int placePin[] = {12, 3, 2, 0};

Ces quatre broches contr√¥lent les anodes communes des quatre affichages √† 7 segments.

.. code-block:: c

    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

Un tableau de codes segment√©s de 0 √† 9 en hexad√©cimal (anode commune).

.. code-block:: c

    void pickDigit(int digit)
    {
        for (int i = 0; i < 4; i++)
        {
            digitalWrite(placePin[i], 0);
        }
        digitalWrite(placePin[digit], 1);
    }

S√©lectionnez la position de la valeur. Une seule position doit √™tre activ√©e √† chaque fois. La position activ√©e sera d√©finie √† un niveau haut.

.. code-block:: c

    void loop()
    {
        while(1){
        clearDisplay();
        pickDigit(0);
        hc595_shift(number[counter % 10]);

        clearDisplay();
        pickDigit(1);
        hc595_shift(number[counter % 100 / 10]);

        clearDisplay();
        pickDigit(2);
        hc595_shift(number[counter % 1000 / 100]);
    
        clearDisplay();
        pickDigit(3);
        hc595_shift(number[counter % 10000 / 1000]);
        }
    }

Cette fonction est utilis√©e pour d√©finir le nombre affich√© sur l'afficheur 7 segments √† 4 chiffres.

* ``clearDisplay()`` : √©crit 11111111 pour √©teindre les huit LED de l'afficheur 7 segments afin de vider le contenu affich√©.
* ``pickDigit(0)`` : s√©lectionne le quatri√®me segment 7 segments.
* ``hc595_shift(number[counter % 10])`` : le chiffre des unit√©s du compteur s'affichera sur le quatri√®me segment.

.. code-block:: c

    signal(SIGALRM, timer); 

C'est une fonction fournie par le syst√®me, dont le prototype est :

.. code-block:: c

    sig_t signal(int signum,sig_t handler);

Apr√®s l'ex√©cution de ``signal()``, une fois que le processus re√ßoit le signal correspondant (ici SIGALRM), il interrompt imm√©diatement la t√¢che en cours pour traiter la fonction d√©finie (ici ``timer(sig)``).

.. code-block:: c

    alarm(1);

C'est √©galement une fonction fournie par le syst√®me. Le prototype du code est :

.. code-block:: c

    unsigned int alarm (unsigned int seconds);

Elle g√©n√®re un signal SIGALRM apr√®s un certain nombre de secondes.

.. code-block:: c

    void timer(int timer1)
    { 
        if (timer1 == SIGALRM)
        { 
            counter++;
            alarm(1); 
            printf("%d\n", counter);
        }
    }

Nous utilisons les fonctions ci-dessus pour impl√©menter la fonction de minuterie.
Apr√®s que ``alarm()`` g√©n√®re le signal SIGALRM, la fonction ``timer`` est appel√©e. On ajoute 1 au compteur et la fonction ``alarm(1)`` est rappel√©e toutes les secondes.

Pour les utilisateurs de Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

√âtape 2 : Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

√âtape 3 : Ex√©cutez le fichier.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.5_4-Digit.py

Apr√®s l'ex√©cution du code, le programme effectue un comptage qui augmente de 1 chaque seconde, et l'afficheur 4 chiffres affiche le d√©compte.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code tel que ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time
    import threading

    SDI = 24
    RCLK = 23
    SRCLK = 18

    placePin = (10, 22, 27, 17)
    number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

    counter = 0
    timer1 = 0

    def clearDisplay():
        for i in range(8):
            GPIO.output(SDI, 1)
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)    

    def hc595_shift(data): 
        for i in range(8):
            GPIO.output(SDI, 0x80 & (data << i))
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)

    def pickDigit(digit):
        for i in placePin:
            GPIO.output(i,GPIO.LOW)
        GPIO.output(placePin[digit], GPIO.HIGH)


    def timer():  
        global counter
        global timer1
        timer1 = threading.Timer(1.0, timer) 
        timer1.start()  
        counter += 1
        print("%d" % counter)


    def loop():
        global counter                    
        while True:
            clearDisplay() 
            pickDigit(0)  
            hc595_shift(number[counter % 10])
            
            clearDisplay()
            pickDigit(1)
            hc595_shift(number[counter % 100//10])

            clearDisplay()
            pickDigit(2)
            hc595_shift(number[counter % 1000//100])

            clearDisplay()
            pickDigit(3)
            hc595_shift(number[counter % 10000//1000])


    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(SDI, GPIO.OUT)
        GPIO.setup(RCLK, GPIO.OUT)
        GPIO.setup(SRCLK, GPIO.OUT)
        for i in placePin:
            GPIO.setup(i, GPIO.OUT)
        global timer1
        timer1 = threading.Timer(1.0, timer)  
        timer1.start()       

    def destroy():   # Lorsque "Ctrl+C" est press√©, la fonction est ex√©cut√©e.
        global timer1
        GPIO.cleanup()
        timer1.cancel()  # annuler le minuteur

    if __name__ == '__main__':  # Le programme commence ici
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()
**Explication du Code**

.. code-block:: python

    placePin = (10, 22, 27, 17)

Ces quatre broches contr√¥lent les broches d'anode commune des √©crans √† sept segments √† quatre chiffres.

.. code-block:: python

    number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

Un tableau de codes segments de 0 √† 9 en hexad√©cimal (anode commune).

.. code-block:: python

    def clearDisplay():
        for i in range(8):
            GPIO.output(SDI, 1)
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
    GPIO.output(RCLK, GPIO.HIGH)
    GPIO.output(RCLK, GPIO.LOW) 

√âcrire "1" huit fois dans SDI, de sorte que les huit LEDs de l'afficheur √† sept segments s'√©teignent pour effacer le contenu affich√©.

.. code-block:: python

    def pickDigit(digit):
        for i in placePin:
            GPIO.output(i,GPIO.LOW)
        GPIO.output(placePin[digit], GPIO.HIGH)

S√©lectionner la position de la valeur. Il ne doit y avoir qu'une seule position activ√©e √† chaque fois. La position activ√©e sera mise √† l'√©tat haut.

.. code-block:: python

    def loop():
        global counter                    
        while True:
            clearDisplay() 
            pickDigit(0)  
            hc595_shift(number[counter % 10])

            clearDisplay()
            pickDigit(1)
            hc595_shift(number[counter % 100//10])

            clearDisplay()
            pickDigit(2)
            hc595_shift(number[counter % 1000//100])

            clearDisplay()
            pickDigit(3)
            hc595_shift(number[counter % 10000//1000])

Cette fonction sert √† d√©finir le nombre affich√© sur l'√©cran √† sept segments √† quatre chiffres.

Tout d'abord, on active le quatri√®me segment et on √©crit le chiffre des unit√©s. Ensuite, on active le troisi√®me segment pour afficher le chiffre des dizaines, puis successivement les deuxi√®me et premier segments pour afficher les centaines et les milliers. Gr√¢ce √† une vitesse de rafra√Æchissement rapide, nous voyons un affichage complet des quatre chiffres.

.. code-block:: python

    timer1 = threading.Timer(1.0, timer)  
    timer1.start()  

Le module threading est le module de gestion des threads en Python, et Timer est une sous-classe de celui-ci.
Le prototype de code est :

.. code-block:: python

    class threading.Timer(interval, function, args=[], kwargs={})

Apr√®s l'intervalle sp√©cifi√©, la fonction est ex√©cut√©e. Ici, l'intervalle est de 1,0 seconde et la fonction appel√©e est timer(). start() signifie que le Timer d√©marre √† ce moment-l√†.

.. code-block:: python

    def timer():  
        global counter
        global timer1
        timer1 = threading.Timer(1.0, timer) 
        timer1.start()  
        counter += 1
        print("%d" % counter)

Apr√®s que le Timer atteigne 1,0 seconde, la fonction timer() est appel√©e ; on ajoute 1 au compteur, et le Timer est √† nouveau utilis√© pour s'ex√©cuter de mani√®re r√©p√©t√©e toutes les secondes.


Image du Ph√©nom√®ne
-----------------------

.. image:: img/image81.jpeg