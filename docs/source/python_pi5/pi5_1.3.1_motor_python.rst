.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, d'Arduino et d'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.3.1_py_pi5:

1.3.1 Moteur
================

Introduction
----------------

Dans ce projet, nous allons apprendre √† utiliser le L293D pour piloter un moteur 
√† courant continu et le faire tourner dans le sens horaire et antihoraire. Comme 
le moteur √† courant continu n√©cessite un courant plus √©lev√©, nous utilisons un module 
d'alimentation pour alimenter les moteurs en toute s√©curit√©.


Composants requis
--------------------

Pour ce projet, nous avons besoin des composants suivants :

.. image:: ../python_pi5/img/1.3.1_motor_list.png



Sch√©ma de c√¢blage
-------------------

.. image:: ../python_pi5/img/1.3.1_motor_schematic.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/1.3.1_motor_circuit.png

.. note::
    Le module d'alimentation peut √™tre aliment√© par une pile de 9V avec 
    le connecteur de pile 9V fourni dans le kit. Ins√©rez le cavalier du 
    module d'alimentation dans les bandes de bus 5V de la plaque de montage.

.. image:: ../python_pi5/img/1.3.1_motor_battery.jpeg

**√âtape 2 :** Acc√©dez au r√©pertoire contenant le code.
.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le script.
.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.1_Motor_zero.py

Lorsque le script s'ex√©cute, le moteur tourne d'abord dans le sens 
horaire pendant 5 secondes, puis s'arr√™te pendant 5 secondes, avant 
de tourner dans le sens antihoraire pendant 5 secondes. Ensuite, il 
s'arr√™te √† nouveau pendant 5 secondes. Cette s√©quence est r√©p√©t√©e ind√©finiment.

.. warning::

    Si le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address`` appara√Æt, consultez :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre 
    dans le r√©pertoire source comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification du code, vous pouvez l'ex√©cuter 
    directement pour observer le r√©sultat.
.. raw:: html

    <run></run>
.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Motor
   from time import sleep

   # Initialiser le moteur avec GPIO Zero, en sp√©cifiant les GPIO pour avancer (17), reculer (27) et activer (22)
   motor = Motor(forward=17, backward=27, enable=22)

   try:
       # Fonction principale pour contr√¥ler la direction et le mouvement du moteur.
       # Alterne entre la rotation horaire et antihoraire avec des pauses entre chaque mouvement.
       actions = {'CW': motor.forward, 'CCW': motor.backward, 'STOP': motor.stop}  # D√©finir les actions du moteur pour plus de lisibilit√©
       
       while True:
           # Parcourt les actions d√©finies pour contr√¥ler la direction du moteur
           for action in ['CW', 'STOP', 'CCW', 'STOP']:
               actions[action]()  # Ex√©cuter l'action actuelle (avancer, s'arr√™ter, reculer, s'arr√™ter)
               print(f"{action}")  # Affiche l'action en cours dans la console
               sleep(5)  # Pause de 5 secondes avant de passer √† l'action suivante

   except KeyboardInterrupt:
       # G√©rer une interruption clavier (par exemple, Ctrl+C) pour arr√™ter le programme proprement
       pass


**Explication du code**

1. Ces instructions importent la classe ``Motor`` de la biblioth√®que ``gpiozero`` et la fonction ``sleep`` du module ``time``.

   .. code-block:: python  

       #!/usr/bin/env python3
       from gpiozero import Motor
       from time import sleep

2. Cette ligne initialise un objet ``Motor``, en sp√©cifiant les GPIO pour avancer (17), reculer (27) et activer (22).

   .. code-block:: python

       # Initialiser le moteur avec GPIO Zero, en sp√©cifiant les GPIO pour avancer (17), reculer (27) et activer (22)
       motor = Motor(forward=17, backward=27, enable=22)

3. Les actions pour contr√¥ler le moteur sont d√©finies dans un dictionnaire pour plus de clart√©. Une boucle infinie (`while True`) parcourt ces actions, les ex√©cutant chacune pendant 5 secondes.

   .. code-block:: python

       try:
           # Fonction principale pour contr√¥ler la direction et le mouvement du moteur.
           # Alterne entre la rotation horaire et antihoraire avec des pauses entre chaque mouvement.
           actions = {'CW': motor.forward, 'CCW': motor.backward, 'STOP': motor.stop}  # D√©finir les actions du moteur pour plus de lisibilit√©
           
           while True:
               # Parcourt les actions d√©finies pour contr√¥ler la direction du moteur
               for action in ['CW', 'STOP', 'CCW', 'STOP']:
                   actions[action]()  # Ex√©cuter l'action actuelle (avancer, s'arr√™ter, reculer, s'arr√™ter)
                   print(f"{action}")  # Affiche l'action en cours dans la console
                   sleep(5)  # Pause de 5 secondes avant de passer √† l'action suivante

4. Ce segment permet de terminer le programme en toute s√©curit√© en utilisant une interruption clavier (Ctrl+C) sans provoquer d'erreurs.

   .. code-block:: python

       except KeyboardInterrupt:
       # G√©rer une interruption clavier (par exemple, Ctrl+C) pour arr√™ter le programme proprement
       pass
      

