.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _2.2.1_py_pi5:

2.2.1 Photoresistor
=====================

Introduction
------------------

La photor√©sistance est un composant couramment utilis√© pour mesurer l'intensit√© 
de la lumi√®re ambiante. Elle permet au contr√¥leur de distinguer le jour et la nuit, 
et d'impl√©menter des fonctions de contr√¥le de la lumi√®re, comme l'activation d'une 
lampe de nuit. Ce projet est tr√®s similaire √† celui du potentiom√®tre, mais au lieu 
de changer la tension, la photor√©sistance d√©tecte la lumi√®re.

Composants n√©cessaires
--------------------------

Pour ce projet, nous aurons besoin des composants suivants :

.. image:: ../python_pi5/img/2.2.1_photoresistor_list.png

.. It's definitely convenient to buy a whole kit, here's the link: 

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Name	
..         - ITEMS IN THIS KIT
..         - LINK
..     *   - Raphael Kit
..         - 337
..         - |link_Raphael_kit|

.. You can also buy them separately from the links below.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - COMPONENT INTRODUCTION
..         - PURCHASE LINK

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`led`
..         - |link_led_buy|
..     *   - :ref:`adc0834`
..         - \-
..     *   - :ref:`photoresistor`
..         - |link_photoresistor_buy|

Schematic Diagram
-------------------

.. image:: ../python_pi5/img/2.2.1_photoresistor_schematic_1.png

.. image:: ../python_pi5/img/2.2.1_photoresistor_schematic_2.png


Proc√©dure exp√©rimentale
---------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.2.1_photoresistor_circuit.png

**√âtape 2 :** Acc√©dez au r√©pertoire contenant le code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez le fichier.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.2.1_Photoresistor_zero.py

Lorsque le code s'ex√©cute, la luminosit√© de la LED variera en fonction de l'intensit√© lumineuse d√©tect√©e par la photor√©sistance.

.. warning::

    En cas d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source tel que ``raphael-kit/python-pi5``. Apr√®s modification, vous pouvez ex√©cuter le code pour voir le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import PWMLED
   import ADC0834
   import time

   # Initialiser une LED PWM sur la broche GPIO 22
   led = PWMLED(22)

   # Configurer le module ADC0834
   ADC0834.setup()

   # D√©finir une fonction pour mapper les valeurs d'une plage √† une autre
   def MAP(x, in_min, in_max, out_min, out_max):
       return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

   # Boucle principale pour lire les valeurs de l'ADC et contr√¥ler la luminosit√© de la LED
   def loop():
       while True:
           # Lire la valeur analogique depuis l'ADC
           analogVal = ADC0834.getResult()
           print('value = %d' % analogVal)

           # Mapper la valeur de l'ADC sur une valeur PWM et r√©gler la luminosit√© de la LED
           led.value = float(analogVal/255)

           # Attendre 0,2 seconde
           time.sleep(0.2)

   # Ex√©cuter la boucle principale et g√©rer KeyboardInterrupt pour un arr√™t propre
   try:
       loop()
   except KeyboardInterrupt: 
       # √âteindre la LED avant de quitter
       led.value = 0


**Explication du code**

#. Ce segment importe la classe ``PWMLED`` de la biblioth√®que ``gpiozero``, n√©cessaire pour contr√¥ler les LED en PWM. Il inclut √©galement le module ``ADC0834`` pour interfacer avec le convertisseur analogique-num√©rique, ainsi que le module ``time`` pour les fonctions bas√©es sur le temps, telles que ``sleep``.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import PWMLED
       import ADC0834
       import time

#. Initialise une LED PWM connect√©e √† la broche GPIO 22 et configure le module ADC0834 pour son utilisation dans le projet.

   .. code-block:: python

       # Initialiser une LED PWM sur la broche GPIO 22
       led = PWMLED(22)

       # Configurer le module ADC0834
       ADC0834.setup()

#. D√©finit une fonction pour mapper une valeur d'entr√©e d'une plage √† une autre. Cette fonction est essentielle pour traduire les lectures de l'ADC en une plage appropri√©e pour le contr√¥le PWM de la LED.

   .. code-block:: python

       # D√©finir une fonction pour mapper les valeurs d'une plage √† une autre
       def MAP(x, in_min, in_max, out_min, out_max):
           return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

#. Cette section contient une boucle qui lit continuellement la valeur analogique de l'ADC0834, la mappe sur une valeur PWM correspondante et ajuste la luminosit√© de la LED. Une br√®ve pause (`time.sleep(0.2)`) est incluse pour rendre les changements visibles et √©viter une surcharge du processeur.

   .. code-block:: python

       # Boucle principale pour lire les valeurs de l'ADC et contr√¥ler la luminosit√© de la LED
       def loop():
           while True:
               # Lire la valeur analogique depuis l'ADC
               analogVal = ADC0834.getResult()
               print('value = %d' % analogVal)

               # Mapper la valeur de l'ADC sur une valeur PWM et r√©gler la luminosit√© de la LED
               led.value = float(analogVal/255)

               # Attendre 0,2 seconde
               time.sleep(0.2)

#. Ex√©cute la fonction ``loop`` et inclut la gestion des erreurs pour un arr√™t propre lors d'un ``KeyboardInterrupt``. Cela garantit que la LED est √©teinte lorsque le programme se termine.

   .. code-block:: python

       # Ex√©cuter la boucle principale et g√©rer KeyboardInterrupt pour un arr√™t propre
       try:
           loop()
       except KeyboardInterrupt: 
           # √âteindre la LED avant de quitter
           led.value = 0

