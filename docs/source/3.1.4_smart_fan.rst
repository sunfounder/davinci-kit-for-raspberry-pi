
.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **ExpertenunterstÃ¼tzung**: LÃ¶sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre FÃ¤higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie frÃ¼hzeitigen Zugang zu neuen ProduktankÃ¼ndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: GenieÃŸen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    ðŸ‘‰ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!


3.1.4 Smart Fan
=================

EinfÃ¼hrung
-----------------

In diesem Kurs werden wir Motoren, Tasten und Thermistoren verwenden, um einen manuellen + automatischen intelligenten LÃ¼fter herzustellen, dessen Windgeschwindigkeit einstellbar ist.

Komponenten
------------------

.. image:: media/list_Smart_Fan.png
    :align: center

Schematische Darstellung
-------------------------------------

============ ======== ======== ===
T-Karte Name physisch wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
============ ======== ======== ===

.. image:: media/Schematic_three_one4.png
    :width: 500
    :align: center

Experimentelle Verfahren
-----------------------------

Schritt 1: Bauen Sie die Schaltung auf.

.. image:: media/image245.png
   :width: 800
   :align: center

.. note::
    The power module can apply a 9V battery with the 9V Battery Buckle in the kit. Insert the jumper cap of the power module into the 5V bus strips of the breadboard.

.. image:: media/image118.jpeg
   :width: 2.80694in
   :height: 0.94375in
   :align: center

FÃ¼r Benutzer in C-Sprache
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: Gehen Sie in den Ordner der Kode.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.4/

Schritt 3: Kompilieren.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.4_SmartFan.c -lwiringPi -lm

Schritt 4: FÃ¼hren Sie die obige ausfÃ¼hrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Starten Sie den LÃ¼fter, wÃ¤hrend der Kode ausgefÃ¼hrt wird, indem Sie die Taste drÃ¼cken. Jedes Mal, wenn Sie drÃ¼cken, wird 1 Geschwindigkeitsstufe nach oben oder unten eingestellt. Es gibt 5 Arten von Geschwindigkeitsstufen: 0~4. Wenn Sie die vierte Geschwindigkeitsstufe einstellen und die Taste drÃ¼cken, arbeitet der LÃ¼fter nicht mehr mit einer Windgeschwindigkeit von 0.


Sobald die Temperatur lÃ¤nger als 2â„ƒ, steigt oder fÃ¤llt, wird die Geschwindigkeit automatisch um 1 Grad schneller oder langsamer.

**Code ErklÃ¤rung**

.. code-block:: c

    intÂ temperture(){
    Â Â Â Â unsignedÂ charÂ analogVal;
    Â Â Â Â doubleÂ Vr,Â Rt,Â temp,Â cel,Â Fah;
    Â Â Â Â analogValÂ =Â get_ADC_Result(0);
    Â Â Â Â VrÂ =Â 5Â *Â (double)(analogVal)Â /Â 255;
    Â Â Â Â RtÂ =Â 10000Â *Â (double)(Vr)Â /Â (5Â -Â (double)(Vr));
    Â Â Â Â tempÂ =Â 1Â /Â (((log(Rt/10000))Â /Â 3950)+(1Â /Â (273.15Â +Â 25)));
    Â Â Â Â celÂ =Â tempÂ -Â 273.15;
    Â Â Â Â FahÂ =Â celÂ *Â 1.8Â +32;
    Â Â Â Â intÂ t=cel;
    Â Â Â Â returnÂ t;
    }


``temperture()`` wandelt die von ADC0834 gelesenen Thermistorwerte in Temperaturwerte um. Siehe :ref:`py_temp`  fÃ¼r weitere Details.

.. code-block:: c

    intÂ motor(intÂ level){
    Â Â Â Â if(level==0){
    Â Â Â Â Â Â Â Â digitalWrite(MotorEnable,LOW);
    Â Â Â Â Â Â Â Â returnÂ 0;
    Â Â Â Â }
    Â Â Â Â ifÂ (level>=4){
    Â Â Â Â Â Â Â Â levelÂ =4;
    Â Â Â Â }
    Â Â Â Â digitalWrite(MotorEnable,HIGH);
    Â Â Â Â softPwmWrite(MotorPin1,Â level*25);
    Â Â Â Â returnÂ level;Â Â Â Â 
    }

Diese Funktion steuert die Drehzahl des Motors. Der Bereich der Stufe: 0-4 (Stufe 0 stoppt den Arbeitsmotor). 
Eine Stufeneinstellung steht fÃ¼r eine 25% ige Ã„nderung der Windgeschwindigkeit.

.. code-block:: c

    intÂ main(void)
    {
    Â Â Â Â setup();
    Â Â Â Â intÂ currentState,lastState=0;
    Â Â Â Â intÂ levelÂ =Â 0;
    Â Â Â Â intÂ currentTemp,markTemp=0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â currentState=digitalRead(BtnPin);
    Â Â Â Â Â Â Â Â currentTemp=temperture();
    Â Â Â Â Â Â Â Â ifÂ (currentTemp<=0){continue;}
    Â Â Â Â Â Â Â Â ifÂ (currentState==1&&lastState==0){
    Â Â Â Â Â Â Â Â Â Â Â Â level=(level+1)%5;
    Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTemp;
    Â Â Â Â Â Â Â Â Â Â Â Â delay(500);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â Â Â Â Â ifÂ (level!=0){
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (currentTemp-markTemp<=-2){
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â level=level-1;
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTemp;
    Â Â Â Â Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (currentTemp-markTemp>=2){
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â level=level+1;
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTemp;
    Â Â Â Â Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â level=motor(level);
    Â Â Â Â }
    Â Â Â Â returnÂ 0;
    }

Die Funktion ``main()`` enthÃ¤lt den gesamten Programmablauf wie folgt:

1. Lesen Sie stÃ¤ndig den Tastenstatus und die aktuelle Temperatur ab.

#. Jede Presse erreicht Stufe+1 und gleichzeitig wird die Temperatur aktualisiert. Die Stufe reicht von 1~4..

#. WÃ¤hrend der LÃ¼fter arbeitet (der Niveau ist nicht 0), wird die Temperatur erfasst. Eine Ã„nderung von 2â„ƒ+ bewirkt das Auf und Ab des Levels.

#. Der Motor Ã¤ndert die Drehzahl mit der Stufe.

FÃ¼r Python-Sprachbenutzer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: Gehen Sie in den Ordner der Kode.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/python

Schritt 3: AusfÃ¼hren.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 3.1.4_SmartFan.py

Starten Sie den LÃ¼fter, wÃ¤hrend der Kode ausgefÃ¼hrt wird, indem Sie die Taste drÃ¼cken. Jedes Mal, wenn Sie drÃ¼cken, wird 1 Geschwindigkeitsstufe nach oben oder unten eingestellt. Es gibt 5 Arten von Geschwindigkeitsstufen: 0~4. Wenn Sie die vierte Geschwindigkeitsstufe einstellen und die Taste drÃ¼cken, arbeitet der LÃ¼fter nicht mehr mit einer Windgeschwindigkeit von 0.

Sobald die Temperatur lÃ¤nger als 2â„ƒ, steigt oder fÃ¤llt, wird die Geschwindigkeit automatisch um 1 Grad schneller oder langsamer.

**Code**

.. note::

    Sie kÃ¶nnen den folgenden Code **Ã„ndern/ZurÃ¼cksetzen/Kopieren/AusfÃ¼hren/Stoppen** . Zuvor mÃ¼ssen Sie jedoch zu einem Quellcodepfad wie ``davinci-kit-for-raspberry-pi/python`` gehen.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time
    import ADC0834
    import math

    # Set up pins
    MotorPin1   = 5
    MotorPin2   = 6
    MotorEnable = 13
    BtnPin  = 22


    def setup():
        global p_M1,p_M2
        ADC0834.setup()
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(MotorPin1, GPIO.OUT)
        GPIO.setup(MotorPin2, GPIO.OUT)
        p_M1=GPIO.PWM(MotorPin1,2000)
        p_M2=GPIO.PWM(MotorPin2,2000)
        p_M1.start(0)
        p_M2.start(0)
        GPIO.setup(MotorEnable, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(BtnPin, GPIO.IN)

    def temperature():
        analogVal = ADC0834.getResult()
        Vr = 5 * float(analogVal) / 255
        Rt = 10000 * Vr / (5 - Vr)
        temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
        Cel = temp - 273.15
        Fah = Cel * 1.8 + 32
        return Cel

    def motor(level):
        if level == 0:
            GPIO.output(MotorEnable, GPIO.LOW)
            return 0
        if level>=4:
            level = 4
        GPIO.output(MotorEnable, GPIO.HIGH)
        p_M1.ChangeDutyCycle(level*25)
        return level


    def main():
        lastState=0
        level=0
        markTemp = temperature()
        while True:
            currentState =GPIO.input(BtnPin)
            currentTemp=temperature()
            if currentState == 1 and lastState == 0:
                level=(level+1)%5
                markTemp = currentTemp
                time.sleep(0.5)
            lastState=currentState
            if level!=0:
                if currentTemp-markTemp <= -2:
                    level = level -1
                    markTemp=currentTemp            
                if currentTemp-markTemp >= 2:
                    level = level +1
                    markTemp=currentTemp             
            level = motor(level)
            

    def destroy():
        GPIO.output(MotorEnable, GPIO.LOW)
        p_M1.stop()
        p_M2.stop()
        GPIO.cleanup()    

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Code ErklÃ¤rung**

.. code-block:: python

    defÂ temperature():
    Â Â Â Â analogValÂ =Â ADC0834.getResult()
    Â Â Â Â VrÂ =Â 5Â *Â float(analogVal)Â /Â 255
    Â Â Â Â RtÂ =Â 10000Â *Â VrÂ /Â (5Â -Â Vr)
    Â Â Â Â tempÂ =Â 1/(((math.log(RtÂ /Â 10000))Â /Â 3950)Â +Â (1Â /Â (273.15+25)))
    Â Â Â Â CelÂ =Â tempÂ -Â 273.15
    Â Â Â Â FahÂ =Â CelÂ *Â 1.8Â +Â 32
    Â Â Â Â returnÂ Cel

``temperature()`` wandelt von ADC0834 gelesene Thermistorwerte in Temperaturwerte um. Siehe :ref:`py_temp`  fÃ¼r weitere Details.

.. code-block:: python

    defÂ motor(level):
    Â Â Â Â ifÂ levelÂ ==Â 0:
    Â Â Â Â Â Â Â Â GPIO.output(MotorEnable,Â GPIO.LOW)
    Â Â Â Â Â Â Â Â returnÂ 0
    Â Â Â Â ifÂ level>=4:
    Â Â Â Â Â Â Â Â levelÂ =Â 4
    Â Â Â Â GPIO.output(MotorEnable,Â GPIO.HIGH)
    Â Â Â Â p_M1.ChangeDutyCycle(level*25)
    Â Â Â Â returnÂ level


Diese Funktion steuert die Drehzahl des Motors. Der Bereich des Hebels: 0-4 (Stufe 0 stoppt den Arbeitsmotor). 
Eine Stufeneinstellung steht fÃ¼r eine 25% ige Ã„nderung der Windgeschwindigkeit.

.. code-block:: python

    defÂ main():
    Â Â Â Â lastState=0
    Â Â Â Â level=0
    Â Â Â Â markTempÂ =Â temperature()
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â currentStateÂ =GPIO.input(BtnPin)
    Â Â Â Â Â Â Â Â currentTemp=temperature()
    Â Â Â Â Â Â Â Â ifÂ currentStateÂ ==Â 1Â andÂ lastStateÂ ==Â 0:
    Â Â Â Â Â Â Â Â Â Â Â Â level=(level+1)%5
    Â Â Â Â Â Â Â Â Â Â Â Â markTempÂ =Â currentTemp
    Â Â Â Â Â Â Â Â Â Â Â Â time.sleep(0.5)
    Â Â Â Â Â Â Â Â lastState=currentState
    Â Â Â Â Â Â Â Â ifÂ level!=0:
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ currentTemp-markTempÂ <=Â -2:
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â levelÂ =Â levelÂ -1
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTempÂ Â Â Â Â Â Â Â Â Â Â Â 
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ currentTemp-markTempÂ >=Â 2:
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â levelÂ =Â levelÂ +1
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTempÂ Â Â Â Â Â Â Â Â Â Â Â Â 
    Â Â Â Â Â Â Â Â levelÂ =Â motor(level)


Die Funktion ``main()`` enthÃ¤lt den gesamten Programmablauf wie folgt:

1. Lesen Sie stÃ¤ndig den Tastenstatus und die aktuelle Temperatur ab.

#. Jede Presse erreicht Stufe+1 und gleichzeitig wird die Temperatur aktualisiert. Die Stufe reicht von 1~4..

#. WÃ¤hrend der LÃ¼fter arbeitet (der Niveau ist nicht 0), wird die Temperatur erfasst. Eine Ã„nderung von 2â„ƒ+ bewirkt das Auf und Ab des Levels.

#. Der Motor Ã¤ndert die Drehzahl mit der Stufe.

PhÃ¤nomen Bild
------------------------

.. image:: media/image246.png
   :align: center