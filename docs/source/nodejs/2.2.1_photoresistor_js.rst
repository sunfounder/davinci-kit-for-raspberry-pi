.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauchen Sie tiefer in Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten ein.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie nach dem Kauf auftretende Probleme und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Tutorials aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und Vorschauen.
    - **Spezielle Rabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und festlichen Aktionen teil.

    üëâ Bereit, mit uns zu entdecken und zu kreieren? Klicken Sie auf [|link_sf_facebook|] und treten Sie noch heute bei!

2.2.1 Fotowiderstand
=========================

Einf√ºhrung
------------

Der Fotowiderstand ist ein h√§ufig verwendetes Bauteil zur Erkennung der Umgebungslichtintensit√§t im Alltag. Er hilft dem Controller, Tag und Nacht zu erkennen und Lichtsteuerungsfunktionen wie Nachtlampen zu realisieren. Dieses Projekt ist dem Potentiometer sehr √§hnlich, und man k√∂nnte denken, dass es die Spannung √§ndert, um Licht zu erkennen.

Komponenten
-----------------

.. image:: ../img/list_2.2.1_photoresistor.png

Schaltplan
-----------------

.. image:: ../img/image321.png

.. image:: ../img/image322.png

Experimentelle Vorgehensweise
-----------------------------------------

**Schritt 1:** Bauen Sie die Schaltung auf.

.. image:: ../img/image198.png

**Schritt 2:** Gehen Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**Schritt 3:** F√ºhren Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo node photoresistor.js

Wenn der Code l√§uft, √§ndert sich die Helligkeit der LED entsprechend der vom Fotowiderstand erfassten Lichtintensit√§t.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    exports.ADC0834 = ADC0834;

    const adc = new ADC0834(17, 18, 27);

    const led = new Gpio(22, {mode: Gpio.OUTPUT});

    setInterval(() => {
      adc.read(0).then((value) => {
        console.log(value);
        led.pwmWrite(value);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 100);

**Code Erkl√§rung**

Der Code hier ist derselbe wie in 2.1.4 Potentiometer. Bitte √ºberpr√ºfen Sie die Code-Erkl√§rung unter :ref:`2.1.4 Potentiometer` f√ºr Details.

Ph√§nomenbild
------------------

.. image:: ../img/image199.jpeg

