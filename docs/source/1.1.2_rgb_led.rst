.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions exclusives** : B√©n√©ficiez de r√©ductions sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et √† des cadeaux lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !



1.1.2 RGB LED
====================

Introduction
---------------

Dans cette le√ßon, nous allons apprendre √† contr√¥ler une LED RVB pour afficher diff√©rentes couleurs.

Composants
-------------

.. image:: img/list_rgb_led.png
    :align: center

Principe
-----------

**PWM**

Le Pulse Width Modulation (PWM) est une technique permettant d'obtenir des 
r√©sultats analogiques √† partir de moyens num√©riques. Le contr√¥le num√©rique cr√©e 
une onde carr√©e, un signal alternant entre allum√© et √©teint. Ce motif allum√©-√©teint 
peut simuler des tensions interm√©diaires entre compl√®tement allum√© (5 Volts) et √©teint
 (0 Volts) en changeant la dur√©e pendant laquelle le signal reste allum√© par rapport √† 
 la dur√©e pendant laquelle il est √©teint. La dur√©e pendant laquelle le signal est actif 
 est appel√©e largeur d'impulsion. Pour obtenir des valeurs analogiques variables, vous 
 modifiez cette largeur. Si vous r√©p√©tez ce motif assez rapidement, par exemple avec une 
 LED, le r√©sultat sera une tension stable entre 0 et 5V contr√¥lant la luminosit√© de la LED.

**Cycle de service**

Le cycle de service est le pourcentage d'une p√©riode pendant laquelle un signal est actif. 
Une p√©riode est le temps n√©cessaire pour compl√©ter un cycle allum√©-√©teint. En formule, un 
cycle de service peut s'exprimer comme suit :

.. image:: img/image56.png
   :width: 1.16667in
   :height: 0.36458in
   :align: center

O√π **D** repr√©sente le cycle de service, **T** est le temps o√π le signal est actif, et **P** 
est la p√©riode totale du signal. Ainsi, un cycle de service de 60 % signifie que le signal 
est actif pendant 60 % du temps, et inactif 40 % du temps.

.. image:: img/image57.jpeg
   :width: 4.325in
   :height: 5.49167in
   :align: center

**LED RVB**

.. image:: img/rgb_led_sch.png
    :width: 500
    :align: center

Les trois couleurs primaires de la LED RVB peuvent √™tre combin√©es en diff√©rentes couleurs 
en ajustant leur luminosit√©. La luminosit√© de chaque LED peut √™tre ajust√©e via le PWM. Le 
Raspberry Pi n'a qu'un canal pour la sortie PWM mat√©rielle, mais il en faut trois pour 
contr√¥ler la LED RVB. Heureusement, la biblioth√®que softPwm simule le PWM par programmation. 
Il vous suffit d'inclure le fichier d'en-t√™te softPwm.h (pour les utilisateurs du langage C), 
puis d'appeler les API fournies pour contr√¥ler facilement la LED RVB via plusieurs canaux 
de sortie PWM, ce qui permet d'afficher toutes sortes de couleurs.

Sch√©ma de c√¢blage
-----------------

Apr√®s avoir connect√© les broches R, G et B √† une r√©sistance de limitation de courant, 
connectez-les respectivement aux GPIO17, GPIO18 et GPIO27. La broche la plus longue de 
la LED (GND) se connecte au GND du Raspberry Pi. Lorsque les trois broches re√ßoivent 
des valeurs PWM diff√©rentes, la LED RVB affiche diff√©rentes couleurs.

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: img/rgb_led_schematic.png

Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image61.png
   :width: 6.59097in
   :height: 4.29722in

Pour les utilisateurs du langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.1.2/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.1.2_rgbLed.c -lwiringPi

.. note::

    Lorsque la commande "gcc" est ex√©cut√©e, si l'option "-o" n'est pas appel√©e, le fichier ex√©cutable sera nomm√© "a.out".

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, vous verrez que la LED RVB affiche les couleurs rouge, 
verte, bleue, jaune, rose et cyan.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur comme 
    "wiringPi.h: No such file or directory", veuillez consulter :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <softPwm.h>
    #include <stdio.h>
    #define uchar unsigned char
    #define LedPinRed    0
    #define LedPinGreen  1
    #define LedPinBlue   2

    void ledInit(void){
        softPwmCreate(LedPinRed,  0, 100);
        softPwmCreate(LedPinGreen,0, 100);
        softPwmCreate(LedPinBlue, 0, 100);
    }

    void ledColorSet(uchar r_val, uchar g_val, uchar b_val){
        softPwmWrite(LedPinRed,   r_val);
        softPwmWrite(LedPinGreen, g_val);
        softPwmWrite(LedPinBlue,  b_val);
    }

    int main(void){

        if(wiringPiSetup() == -1){ // Si l'initialisation de wiring √©choue, afficher un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }

        ledInit();
        while(1){
            printf("Red\n");
            ledColorSet(0xff,0x00,0x00);   //red     
            delay(500);
            printf("Green\n");
            ledColorSet(0x00,0xff,0x00);   //green
            delay(500);
            printf("Blue\n");
            ledColorSet(0x00,0x00,0xff);   //blue
            delay(500);
            printf("Yellow\n");
            ledColorSet(0xff,0xff,0x00);   //yellow
            delay(500);
            printf("Purple\n");
            ledColorSet(0xff,0x00,0xff);   //purple
            delay(500);
            printf("Cyan\n");
            ledColorSet(0xc0,0xff,0x3e);   //cyan
            delay(500);
        }
        return 0;
    }

**Explication du code**

.. code-block:: c

    #include <softPwm.h>

Biblioth√®que utilis√©e pour r√©aliser la fonction PWM par logiciel.

.. code-block:: c

    void ledInit(void){
        softPwmCreate(LedPinRed,  0, 100);
        softPwmCreate(LedPinGreen,0, 100);
        softPwmCreate(LedPinBlue, 0, 100);
    }

Cette fonction utilise le logiciel pour cr√©er une broche PWM et d√©finit sa p√©riode entre 100us et 10000us.

Le prototype de la fonction softPwmCreate(LedPinRed, 0, 100) est le suivant :

.. code-block:: c

    int softPwmCreate(int pin, int initialValue, int pwmRange);

* **Param√®tre pin :** Toute broche GPIO du Raspberry Pi peut √™tre d√©finie comme broche PWM.
* **Param√®tre initialValue :** La largeur d'impulsion initiale est initialValue multipli√© par 100us.
* **Param√®tre pwmRange :** La p√©riode du PWM est pwmRange multipli√© par 100us.

.. code-block:: c

    void ledColorSet(uchar r_val, uchar g_val, uchar b_val){
        softPwmWrite(LedPinRed,   r_val);
        softPwmWrite(LedPinGreen, g_val);
        softPwmWrite(LedPinBlue,  b_val);
    }

Cette fonction permet de d√©finir les couleurs de la LED. En utilisant le mod√®le RVB, 
le param√®tre formel **r_val** repr√©sente l'intensit√© du rouge, **g_val** celle du 
vert et **b_val** celle du bleu.

Le prototype de la fonction softPwmWrite(LedPinBlue, b_val) est le suivant :

.. code-block:: c

    void softPwmWrite (int pin, int value) ;

* **Param√®tre pin :** Toute broche GPIO du Raspberry Pi peut √™tre d√©finie comme broche PWM.
* **Param√®tre value :** La largeur d'impulsion du PWM est value multipli√© par 100us. Notez que la valeur doit √™tre inf√©rieure √† pwmRange d√©fini pr√©c√©demment ; si elle est sup√©rieure, elle sera limit√©e √† pwmRange.

.. code-block:: c

    ledColorSet(0xff,0x00,0x00);

Appelle la fonction d√©finie pr√©c√©demment. √âcrire 0xff dans LedPinRed et 0x00 dans 
LedPinGreen et LedPinBlue. Seule la LED rouge s'allume apr√®s l'ex√©cution de ce code. 
Si vous souhaitez allumer des LED d'autres couleurs, il suffit de modifier les param√®tres.

Pour les utilisateurs du langage Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python

**√âtape 3 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.2_rgbLed.py

Apr√®s l'ex√©cution du code, vous verrez que la LED RVB affiche les couleurs 
rouge, verte, bleue, jaune, rose et cyan.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source tel que ``davinci-kit-for-raspberry-pi/python``.

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    # D√©finir une table de couleurs en Hexad√©cimal
    COLOR = [0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0xFF00FF, 0x00FFFF]
    # D√©finir les broches via un dictionnaire
    pins = {'Red':17, 'Green':18, 'Blue':27}


    def setup():
        global p_R, p_G, p_B
        # D√©finir les modes GPIO sur la num√©rotation BCM
        GPIO.setmode(GPIO.BCM)
        # D√©finir tous les modes LedPin sur la sortie et le niveau initial √† High (3,3 V)
        for i in pins:
            GPIO.setup(pins[i], GPIO.OUT, initial=GPIO.HIGH)

        # D√©finir tous les LED en tant que canal PWM avec une fr√©quence de 2 kHz
        p_R = GPIO.PWM(pins['Red'], 2000)
        p_G = GPIO.PWM(pins['Green'], 2000)
        p_B = GPIO.PWM(pins['Blue'], 2000)

        # Initialiser toutes les LED avec une valeur de 0
        p_R.start(0)
        p_G.start(0)
        p_B.start(0)

    # D√©finir une fonction MAP pour mapper les valeurs. Par exemple de 0~255 √† 0~100
    def MAP(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # D√©finir une fonction pour configurer les couleurs
    # l'entr√©e doit √™tre en hexad√©cimal avec des valeurs pour rouge, bleu et vert.
    def setColor(color):
        # Configure la luminosit√© des trois LED en fonction de la valeur de couleur donn√©e.
        # D√©composer les couleurs √† partir de la variable 'color'
        R_val = (color & 0xFF0000) >> 16
        G_val = (color & 0x00FF00) >> 8
        B_val = (color & 0x0000FF) >> 0
        # Ces lignes analysent la variable de couleur en attribuant les deux premi√®res valeurs au rouge,
        # les deux du milieu au vert, et les deux derni√®res au bleu (op√©rations de d√©calage).

        # Mapper les valeurs de couleur de 0~255 √† 0~100
        R_val = MAP(R_val, 0, 255, 0, 100)
        G_val = MAP(G_val, 0, 255, 0, 100)
        B_val = MAP(B_val, 0, 255, 0, 100)

        # Changer les couleurs
        p_R.ChangeDutyCycle(R_val)
        # Assigner la valeur mapp√©e du cycle de service au canal PWM correspondant pour changer la luminosit√©.
        p_G.ChangeDutyCycle(G_val)
        p_B.ChangeDutyCycle(B_val)

        print ("color_msg: R_val = %s,	G_val = %s,	B_val = %s"%(R_val, G_val, B_val))	 

    def main():
        while True:
            for color in COLOR: # Affecter chaque √©l√©ment de la liste COLOR respectivement et changer la couleur de la LED RVB via la fonction setColor().
                setColor(color) # Changer la couleur de la LED RVB
                time.sleep(0.5) # Fixer un d√©lai de 0,5s apr√®s chaque changement de couleur. Modifier ce param√®tre modifie la vitesse de changement des couleurs de la LED.

    def destroy():
        # Arr√™ter tous les canaux PWM
        p_R.stop()
        p_G.stop()
        p_B.stop()
        # Lib√©rer les ressources
        GPIO.cleanup()

    # Si ce script est ex√©cut√© directement, faire :
    if __name__ == '__main__':
        setup()
        try:
            main()
        # Lorsque 'Ctrl+C' est press√©, la fonction destroy() sera ex√©cut√©e.
        except KeyboardInterrupt:
            destroy()

**Explication du code**

.. code-block:: python

    p_R = GPIO.PWM(pins['Red'], 2000)
    p_G = GPIO.PWM(pins['Green'], 2000)
    p_B = GPIO.PWM(pins['Blue'], 2000)

    p_R.start(0)
    p_G.start(0)
    p_B.start(0)

Appeler la fonction GPIO.PWM() pour d√©finir les broches Rouge, Vert et Bleu en 
tant que broches PWM et fixer la fr√©quence √† 2000 Hz. Ensuite, utiliser la fonction 
Start() pour d√©finir le cycle de service initial √† z√©ro.

.. code-block:: python

    def MAP(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

D√©finir une fonction MAP pour mapper les valeurs. Par exemple, si x=50, in_min=0, 
in_max=255, out_min=0, out_max=100, la fonction renverra 19,6.

.. code-block:: python

    def setColor(color):
        R_val = (color & 0xFF0000) >> 16
        G_val = (color & 0x00FF00) >> 8
        B_val = (color & 0x0000FF) >> 0

Configurer la luminosit√© des trois LED avec la valeur de couleur donn√©e. 
Par exemple, si color=0xFF00FF, R_val=Ôºà0xFF00FF & 0xFF0000Ôºâ>> 16 = 0xFF, 
G_val = 0x00, B_val=0xFF.

.. code-block:: python

    R_val = MAP(R_val, 0, 255, 0, 100)
    G_val = MAP(G_val, 0, 255, 0, 100)
    B_val = MAP(B_val, 0, 255, 0, 100)

Utiliser la fonction MAP pour convertir les valeurs RVB entre 0~255 en une plage 
de cycle de service PWM de 0 √† 100.

.. code-block:: python

    p_R.ChangeDutyCycle(R_val) 
    p_G.ChangeDutyCycle(G_val)
    p_B.ChangeDutyCycle(B_val)

Affecter la valeur mapp√©e du cycle de service au canal PWM correspondant pour 
changer la luminosit√©.

.. code-block:: python

    for color in COLOR:
        setColor(color)
        time.sleep(0.5)

Affecter chaque √©l√©ment de la liste COLOR √† la variable color et changer la 
couleur de la LED RVB via la fonction setColor().

Image du ph√©nom√®ne
----------------------

.. image:: img/image62.jpeg
