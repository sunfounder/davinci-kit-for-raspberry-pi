.. note::

    Bonjour, bienvenue dans la communautÃ© Facebook des passionnÃ©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez au cÅ“ur des projets avec Raspberry Pi, Arduino et ESP32 aux cÃ´tÃ©s dâ€™autres amateurs enthousiastes.

    **Pourquoi nous rejoindre ?**

    - **Support dâ€™experts** : RÃ©solvez les problÃ¨mes techniques post-vente avec lâ€™aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre et partager** : Ã‰changez des conseils et des tutoriels pour perfectionner vos compÃ©tences.
    - **AperÃ§us exclusifs** : AccÃ©dez en avant-premiÃ¨re aux annonces de nouveaux produits.
    - **RÃ©ductions spÃ©ciales** : BÃ©nÃ©ficiez de rÃ©ductions exclusives sur nos produits les plus rÃ©cents.
    - **Promotions festives et cadeaux** : Participez Ã  des promotions et concours pendant les fÃªtes.

    ğŸ‘‰ PrÃªt Ã  explorer et crÃ©er avec nous ? Cliquez sur [|link_sf_facebook|] pour nous rejoindre dÃ¨s aujourd'hui !

3.1.13 JEU â€“ 10 Secondes
============================

Introduction
-------------------

Dans ce projet, suivez-moi pour fabriquer un appareil de jeu qui mettra Ã  l
â€™Ã©preuve votre concentration. Attachez le capteur dâ€™inclinaison Ã  une baguette 
pour crÃ©er une baguette magique. Agitez la baguette pour dÃ©marrer le chronomÃ©trage 
sur lâ€™afficheur Ã  4 segments ; agitez Ã  nouveau pour lâ€™arrÃªter. Si vous parvenez Ã  
stabiliser lâ€™affichage sur **10.00**, vous gagnez. Jouez avec vos amis pour dÃ©terminer 
qui est le maÃ®tre du temps.

Composants
----------------

.. image:: img/list_GAME_10_Second.png
    :align: center

SchÃ©ma de montage
------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: img/Schematic_three_one13.png
   :align: center

ProcÃ©dures expÃ©rimentales
---------------------------------

**Ã‰tape 1** : Assemblez le circuit.

.. image:: img/image277.png
   :alt: 10 second_bb
   :width: 800

**Ã‰tape 2** : AccÃ©dez au dossier contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.13/

**Ã‰tape 3** : Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.13_GAME_10Second.c -lwiringPi

**Ã‰tape 4** : ExÃ©cutez le fichier compilÃ©.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Agitez la baguette, lâ€™afficheur Ã  4 segments dÃ©marrera le chronomÃ©trage ; 
secouez-la Ã  nouveau pour arrÃªter le chronomÃ©trage. Si vous rÃ©ussissez Ã  
arrÃªter le compteur Ã  **10.00**, vous gagnez. Secouez encore une fois pour 
commencer une nouvelle manche.

.. note::

    Si cela ne fonctionne pas aprÃ¨s l'exÃ©cution, ou si un message d'erreur 
    s'affiche : "wiringPi.h: Aucun fichier ou rÃ©pertoire de ce type", veuillez 
    consulter :ref:`C code is not working?`.

**Explication du code**

.. code-block:: c

    voidÂ stateChange(){
    Â Â Â Â ifÂ (gameStateÂ ==Â 0){
    Â Â Â Â Â Â Â Â counterÂ =Â 0;
    Â Â Â Â Â Â Â Â delay(1000);
    Â Â Â Â Â Â Â Â ualarm(10000,10000);Â 
    Â Â Â Â }else{
    Â Â Â Â Â Â Â Â alarm(0);
    Â Â Â Â Â Â Â Â delay(1000);
    Â Â Â Â }
    Â Â Â Â gameStateÂ =Â (gameStateÂ +Â 1)%2;
    }

Le jeu est divisÃ© en deux modes :

gameState=0 est le mode Â«Â startÂ Â», oÃ¹ le temps est mesurÃ© et affichÃ© sur 
l'afficheur Ã  segments. Lorsque le capteur d'inclinaison est secouÃ©, le 
jeu passe au mode Â«Â showÂ Â».

gameState=1 est le mode Â«Â showÂ Â», qui arrÃªte le chronomÃ©trage et affiche 
le temps sur l'afficheur. En secouant Ã  nouveau le capteur d'inclinaison, 
le minuteur se rÃ©initialise et le jeu redÃ©marre.

.. code-block:: c

    voidÂ loop(){
    Â Â Â Â intÂ currentStateÂ =0;
    Â Â Â Â intÂ lastState=0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â display();
    Â Â Â Â Â Â Â Â currentState=digitalRead(sensorPin);
    Â Â Â Â Â Â Â Â if((currentState==0)&&(lastState==1)){
    Â Â Â Â Â Â Â Â Â Â Â Â stateChange();
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â }
    }

Loop() est la fonction principale. Tout d'abord, le temps est affichÃ© sur 
l'afficheur Ã  4 segments et la valeur du capteur d'inclinaison est lue. 
Si l'Ã©tat du capteur change, stateChange() est appelÃ©e.
