.. note::

    Bonjour et bienvenue dans la communautÃ© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez au cÅ“ur de Raspberry Pi, Arduino et ESP32 avec d'autres passionnÃ©s.

    **Pourquoi nous rejoindre ?**

    - **Support Expert** : RÃ©solvez les problÃ¨mes aprÃ¨s-vente et les dÃ©fis techniques avec l'aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre & Partager** : Ã‰changez des astuces et des tutoriels pour amÃ©liorer vos compÃ©tences.
    - **AperÃ§us Exclusifs** : AccÃ©dez en avant-premiÃ¨re aux annonces de nouveaux produits et aux aperÃ§us.
    - **RÃ©ductions SpÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos nouveaux produits.
    - **Promotions et Concours Festifs** : Participez Ã  des concours et promotions pendant les fÃªtes.

    ðŸ‘‰ PrÃªt Ã  explorer et crÃ©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous dÃ¨s aujourd'hui !

3.1.11 GÃ©nÃ©rateur de Code Morse
=======================================

Introduction
-----------------

Dans ce cours, nous allons crÃ©er un gÃ©nÃ©rateur de code Morse, oÃ¹ vous tapez 
une sÃ©rie de lettres anglaises sur le Raspberry Pi pour qu'elles apparaissent 
sous forme de code Morse.

Composants
---------------

.. image:: img/3.1.10.png
    :align: center

SchÃ©ma de Circuit
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: img/Schematic_three_one11.png
   :align: center

ProcÃ©dures ExpÃ©rimentales
----------------------------

**Ã‰tape 1 :** Construisez le circuit. (Faites attention aux pÃ´les du buzzer : 
celui avec l'Ã©tiquette + est le pÃ´le positif et l'autre est le pÃ´le nÃ©gatif.)

.. image:: img/image269.png
   :alt: Morse_bb
   :width: 800

**Pour les utilisateurs de langage C**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Ã‰tape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.11/

**Ã‰tape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.11_MorseCodeGenerator.c -lwiringPi

**Ã‰tape 4 :** ExÃ©cutez le fichier exÃ©cutable ci-dessus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

AprÃ¨s le dÃ©marrage du programme, tapez une sÃ©rie de caractÃ¨res, et le buzzer 
ainsi que la LED enverront les signaux correspondants en code Morse.

.. note::

    Si cela ne fonctionne pas aprÃ¨s l'exÃ©cution ou s'il y a un message d'erreur : \"wiringPi.h: No such file or directory\", veuillez vous rÃ©fÃ©rer Ã  :ref:`C code is not working?`.

**Explication du Code**

.. code-block:: c

    structÂ MORSE{
    Â Â Â Â charÂ word;
    Â Â Â Â unsignedÂ charÂ *code;
    };

    structÂ MORSEÂ morseDict[]=
    {
    Â Â Â Â {'A',"01"},Â {'B',"1000"},Â {'C',"1010"},Â {'D',"100"},Â {'E',"0"},Â 
    Â Â Â Â {'F',"0010"},Â {'G',"110"},Â {'H',"0000"},Â {'I',"00"},Â {'J',"0111"},Â 
    Â Â Â Â {'K',"101"},Â {'L',"0100"},Â {'M',"11"},Â {'N',"10"},Â {'O',"111"},Â 
    Â Â Â Â {'P',"0110"},Â {'Q',"1101"},Â {'R',"010"},Â {'S',"000"},Â {'T',"1"},
    Â Â Â Â {'U',"001"},Â {'V',"0001"},Â {'W',"011"},Â {'X',"1001"},Â {'Y',"1011"},Â 
    Â Â Â Â {'Z',"1100"},{'1',"01111"},Â {'2',"00111"},Â {'3',"00011"},Â {'4',"00001"},Â 
    Â Â Â Â {'5',"00000"},{'6',"10000"},Â {'7',"11000"},Â {'8',"11100"},Â {'9',"11110"},
    Â Â Â Â {'0',"11111"},{'?',"001100"},Â {'/',"10010"},Â {',',"110011"},Â {'.',"010101"},
    Â Â Â Â {';',"101010"},{'!',"101011"},Â {'@',"011010"},Â {':',"111000"}
    };

Cette structure MORSE est le dictionnaire du code Morse, contenant les 
caractÃ¨res A-Z, les chiffres 0-9 et les symboles \"?\" \"/\" \":\" \",\" \".\" \";\" \"!\" \"@\" .

.. code-block:: c

    charÂ *lookup(charÂ key,structÂ MORSEÂ *dict,intÂ length)
    {
    Â Â Â Â forÂ (intÂ i=0;i<length;i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â if(dict[i].word==key){
    Â Â Â Â Â Â Â Â Â Â Â Â returnÂ dict[i].code;
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }Â Â Â Â 
    }

La fonction **lookup()** permet de \"consulter le dictionnaire\". DÃ©finissez une 
**clÃ©**, recherchez les mots similaires Ã  **clÃ©** dans la structure **morseDict** 
et renvoyez l'information correspondanteâ€” le \"**code**\" du mot en question.

.. code-block:: c

    voidÂ on(){
    Â Â Â Â digitalWrite(ALedPin,HIGH);
    Â Â Â Â digitalWrite(BeepPin,HIGH);Â Â Â Â Â 
    }

CrÃ©ez une fonction on() pour activer le buzzer et la LED.

.. code-block:: c

    voidÂ off(){
    Â Â Â Â digitalWrite(ALedPin,LOW);
    Â Â Â Â digitalWrite(BeepPin,LOW);
    }

La fonction off() dÃ©sactive le buzzer et la LED.

.. code-block:: c

    voidÂ beep(intÂ dt){
    Â Â Â Â on();
    Â Â Â Â delay(dt);
    Â Â Â Â off();
    Â Â Â Â delay(dt);
    }

DÃ©finissez une fonction beep() pour faire Ã©mettre des sons au buzzer et faire 
clignoter la LED Ã  un intervalle de **dt**.
.. code-block:: c

    voidÂ morsecode(charÂ *code){
    Â Â Â Â intÂ pauseÂ =Â 250;
    Â Â Â Â charÂ *pointÂ =Â NULL;
    Â Â Â Â intÂ lengthÂ =Â sizeof(morseDict)/sizeof(morseDict[0]);
    Â Â Â Â forÂ (intÂ i=0;i<strlen(code);i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â point=lookup(code[i],morseDict,length);
    Â Â Â Â Â Â Â Â forÂ (intÂ j=0;j<strlen(point);j++){
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (point[j]=='0')
    Â Â Â Â Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause/2);
    Â Â Â Â Â Â Â Â Â Â Â Â }elseÂ if(point[j]=='1')
    Â Â Â Â Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause);
    Â Â Â Â Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â Â Â Â Â delay(pause);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }
    }

La fonction `morsecode()` est utilisÃ©e pour traiter le code Morse des 
caractÃ¨res saisis en faisant en sorte que le "1" du code Ã©mette des sons 
ou des lumiÃ¨res prolongÃ©s, tandis que le "0" Ã©mette des sons ou des lumiÃ¨res 
courts, par exemple, si vous entrez "SOS", un signal avec trois segments courts, 
trois segments longs puis trois segments courts sera Ã©mis " Â· Â· Â· - - - Â· Â· Â· ".

.. code-block:: c

    intÂ toupper(intÂ c)
    {
    Â Â Â Â ifÂ ((cÂ >=Â 'a')Â &&Â (cÂ <=Â 'z'))
    Â Â Â Â Â Â Â Â returnÂ cÂ +Â ('A'Â -Â 'a');
    Â Â Â Â returnÂ c;
    }
    charÂ *strupr(charÂ *str)
    {
    Â Â Â Â charÂ *orign=str;
    Â Â Â Â forÂ (;Â *str!='\0';Â str++)
    Â Â Â Â Â Â Â Â *strÂ =Â toupper(*str);
    returnÂ orign;
    }

Avant de coder, vous devez unifier les lettres en majuscules.

.. code-block:: c

    voidÂ main(){
    Â Â Â Â setup();
    Â Â Â Â charÂ *code;
    Â Â Â Â intÂ length=8;
    Â Â Â Â codeÂ =Â (char*)malloc(sizeof(char)*length);
    Â Â Â Â whileÂ (1){
    Â Â Â Â Â Â Â Â printf("PleaseÂ inputÂ theÂ messenger:");
            delay(100);
    Â Â Â Â Â Â Â Â scanf("%s",code);
    Â Â Â Â Â Â Â Â code=strupr(code);
    Â Â Â Â Â Â Â Â printf("%s\n",code);
            delay(100);
    Â Â Â Â Â Â Â Â morsecode(code);
    Â Â Â Â }
    }

Lorsque vous tapez les caractÃ¨res avec le clavier, `code=strupr(code)` 
convertit les lettres saisies en majuscules.

`Printf()` affiche ensuite le texte clair Ã  l'Ã©cran de l'ordinateur, et la 
fonction `morsecode()` fait en sorte que le buzzer et la LED Ã©mettent le code Morse.

Notez que la longueur des caractÃ¨res saisis ne doit pas dÃ©passer la **longueur** (modifiable).

**Pour les utilisateurs de langage Python**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Ã‰tape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python

**Ã‰tape 3 :** ExÃ©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.11_MorseCodeGenerator.py

AprÃ¨s le dÃ©marrage du programme, tapez une sÃ©rie de caractÃ¨res, et le buzzer 
ainsi que la LED enverront les signaux correspondants en code Morse.

**Code**

.. note::

    Vous pouvez **Modifier/RÃ©initialiser/Copier/ExÃ©cuter/ArrÃªter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin source du code comme ``davinci-kit-for-raspberry-pi/python``. 
    

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    BeepPin=22
    ALedPin=17

    MORSECODE = {
        'A':'01', 'B':'1000', 'C':'1010', 'D':'100', 'E':'0', 'F':'0010', 'G':'110',
        'H':'0000', 'I':'00', 'J':'0111', 'K':'101', 'L':'0100', 'M':'11', 'N':'10',
        'O':'111', 'P':'0110', 'Q':'1101', 'R':'010', 'S':'000', 'T':'1',
        'U':'001', 'V':'0001', 'W':'011', 'X':'1001', 'Y':'1011', 'Z':'1100',
        '1':'01111', '2':'00111', '3':'00011', '4':'00001', '5':'00000',
        '6':'10000', '7':'11000', '8':'11100', '9':'11110', '0':'11111',
        '?':'001100', '/':'10010', ',':'110011', '.':'010101', ';':'101010',
        '!':'101011', '@':'011010', ':':'111000',
        }

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(ALedPin,GPIO.OUT,initial=GPIO.LOW)

    def on():
        GPIO.output(BeepPin, 1)
        GPIO.output(ALedPin, 1)

    def off():
        GPIO.output(BeepPin, 0)
        GPIO.output(ALedPin, 0)

    def beep(dt):	# dt pour le temps de pause.
        on()
        time.sleep(dt)
        off()
        time.sleep(dt)

    def morsecode(code):
        pause = 0.25
        for letter in code:
            for tap in MORSECODE[letter]:
                if tap == '0':
                    beep(pause/2)
                if tap == '1':
                    beep(pause)
            time.sleep(pause)

    def main():
        while True:
            code=input("Please input the messenger:")
            code = code.upper()
            print(code)
            morsecode(code)

    def destroy():
        print("")
        GPIO.output(BeepPin, GPIO.LOW)
        GPIO.output(ALedPin, GPIO.LOW)
        GPIO.cleanup()  

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()
**Explication du Code**

.. code-block:: python

    MORSECODEÂ =Â {
    Â Â Â Â 'A':'01',Â 'B':'1000',Â 'C':'1010',Â 'D':'100',Â 'E':'0',Â 'F':'0010',Â 'G':'110',
    Â Â Â Â 'H':'0000',Â 'I':'00',Â 'J':'0111',Â 'K':'101',Â 'L':'0100',Â 'M':'11',Â 'N':'10',
    Â Â Â Â 'O':'111',Â 'P':'0110',Â 'Q':'1101',Â 'R':'010',Â 'S':'000',Â 'T':'1',
    Â Â Â Â 'U':'001',Â 'V':'0001',Â 'W':'011',Â 'X':'1001',Â 'Y':'1011',Â 'Z':'1100',
    Â Â Â Â '1':'01111',Â '2':'00111',Â '3':'00011',Â '4':'00001',Â '5':'00000',
    Â Â Â Â '6':'10000',Â '7':'11000',Â '8':'11100',Â '9':'11110',Â '0':'11111',
    Â Â Â Â '?':'001100',Â '/':'10010',Â ',':'110011',Â '.':'010101',Â ';':'101010',
    Â Â Â Â '!':'101011',Â '@':'011010',Â ':':'111000',
    Â Â Â Â }

Cette structure `MORSECODE` est le dictionnaire du code Morse, contenant les 
lettres A-Z, les chiffres 0-9 et les signes \"?\" \"/\" \":\" \",\" \".\" \";\" \"!\" \"@\" .

.. code-block:: python

    defÂ on():
    Â Â Â Â GPIO.output(BeepPin,Â 1)
    Â Â Â Â GPIO.output(ALedPin,Â 1)

La fonction `on()` active le buzzer et la LED.

.. code-block:: python

    defÂ off():
    Â Â Â Â GPIO.output(BeepPin,Â 0)
    Â Â Â Â GPIO.output(ALedPin,Â 0)

La fonction `off()` permet d'Ã©teindre le buzzer et la LED.

.. code-block:: python

    defÂ beep(dt):Â Â Â #Â xÂ pour la durÃ©e de pause.
    Â Â Â Â on()
    Â Â Â Â time.sleep(dt)
    Â Â Â Â off()
    Â Â Â Â time.sleep(dt)

La fonction `beep()` permet de faire Ã©mettre des sons au buzzer et faire 
clignoter la LED avec un intervalle de **dt**.

.. code-block:: python

    defÂ morsecode(code):
    Â Â Â Â pauseÂ =Â 0.25
    Â Â Â Â forÂ letterÂ inÂ code:
    Â Â Â Â Â Â Â Â forÂ tapÂ inÂ MORSECODE[letter]:
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ tapÂ ==Â '0':
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause/2)
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ tapÂ ==Â '1':
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause)
    Â Â Â Â Â Â Â Â time.sleep(pause)

La fonction `morsecode()` est utilisÃ©e pour traiter le code Morse des caractÃ¨res 
saisis en faisant en sorte que le "1" du code Ã©mette des sons ou des lumiÃ¨res 
prolongÃ©s, tandis que le "0" Ã©mette des sons ou des lumiÃ¨res courts, par exemple, 
si vous entrez "SOS", un signal avec trois segments courts, trois segments longs 
puis trois segments courts sera Ã©mis " Â· Â· Â· - - - Â· Â· Â· ".

.. code-block:: python

    defÂ main():
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â code=input("PleaseÂ inputÂ theÂ messenger:")
    Â Â Â Â Â Â Â Â codeÂ =Â code.upper()
    Â Â Â Â Â Â Â Â print(code)
    Â Â Â Â Â Â Â Â morsecode(code)

Lorsque vous tapez les caractÃ¨res avec le clavier, `upper()` convertit les 
lettres saisies en majuscules.

`Printf()` affiche ensuite le texte clair Ã  l'Ã©cran de l'ordinateur, et la 
fonction `morsecode()` fait en sorte que le buzzer et la LED Ã©mettent le code Morse.


Image Illustrative
-----------------------

.. image:: img/image270.jpeg
   :align: center