.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el apasionante mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones especiales de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

Cortina Inteligente
======================

En este proyecto, simularemos un escenario donde las cortinas se abren o cierran autom√°ticamente seg√∫n la luminosidad de la habitaci√≥n. 

Cuando el fotorresistor detecta que la luminosidad es muy alta, el Raspberry Pi activar√° el motor para cerrar las cortinas; cuando detecta que la habitaci√≥n est√° demasiado oscura, las cortinas se abrir√°n.

Tambi√©n puedes ver el cambio de luminosidad de la habitaci√≥n a trav√©s del widget de texto en Cloud4RPi o controlar la l√°mpara con el widget de Interruptor (por seguridad, este experimento usa un LED en lugar de una l√°mpara).

Procedimiento Experimental
-----------------------------

Construye el circuito.

.. image:: img/window1.png
    :align: center

Abre el c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/cloud4rpi-raspberrypi-python
    sudo nano smart_curtain.py

Encuentra la l√≠nea a continuaci√≥n y completa con el token del dispositivo correcto.

.. code-block:: python

    DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'

Ejecuta el c√≥digo.

.. raw:: html

   <run></run>
 
.. code-block:: 

    sudo python3 smart_curtain.py

Accede a Cloud4RPi, agrega un nuevo panel de control llamado **project4** y a√±ade 3 widgets (Interruptor, Texto y Gr√°fica) mediante el bot√≥n **Add Widget**.

.. image:: img/window2.png
    :align: center

Una vez a√±adidos, puedes usar el widget Interruptor para controlar el LED; 
el valor del fotorresistor en el widget de Texto se actualizar√° cada minuto. 
Cuando el valor es >100, el motor rota en sentido horario por 5 segundos; 
si el valor es <20, el motor rota en sentido antihorario por 5 segundos. 
Puedes ver los cambios en el tiempo en el widget de Gr√°fica.

Explicaci√≥n del C√≥digo
-------------------------

.. code-block:: python

    def getValue():
        analogVal = ADC0834.getResult()
        if analogVal > 100:
            move.clockwise()
            sleep(5)
            move.stop()
        elif analogVal < 20:
            move.contrarotate()
            sleep(5)
            move.stop()
        return analogVal

Lee el valor del canal CH0 (conectado al fotorresistor) del ADC0834. Si el valor es >100, el motor rota en sentido horario durante 5 segundos. Si el valor es <20, el motor rota en sentido antihorario durante 5 segundos.

.. code-block:: python

    'CPU Temp': {
        'type': 'numeric',
        'bind': getValue
    },

Pasa ``getValue()`` a la clave ``'bind'`` como una funci√≥n de devoluci√≥n para que el valor de luminosidad (el valor devuelto por la funci√≥n ``getValue()``) se env√≠e al widget de Texto.

