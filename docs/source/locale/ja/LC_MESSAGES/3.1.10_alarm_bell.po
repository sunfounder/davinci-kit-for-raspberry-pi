# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-19 18:22+0800\n"
"PO-Revision-Date: 2021-05-28 15:36+0800\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../3.1.10_alarm_bell.rst:2
msgid "3.1.10 Alarm Bell"
msgstr "3.1.10 警報ベル"

#: ../3.1.10_alarm_bell.rst:5
msgid "Introduction"
msgstr "前書き"

#: ../3.1.10_alarm_bell.rst:7
msgid ""
"In this course, we will make a manual alarm device. You can replace the "
"toggle switch with a thermistor or a photosensitive sensor to make a "
"temperature alarm or a light alarm."
msgstr "このコースでは、手動警報装置を作成する。トグルスイッチをサーミスタまたは感光センサーに交換して、温度警報または光警報を作成できる。"

#: ../3.1.10_alarm_bell.rst:12
msgid "Components"
msgstr "部品"

#: ../3.1.10_alarm_bell.rst:18
msgid "Schematic Diagram"
msgstr "回路図"

#: ../3.1.10_alarm_bell.rst:21
msgid "T-Board Name"
msgstr "Tボード名"

#: ../3.1.10_alarm_bell.rst:21
msgid "physical"
msgstr "physical"

#: ../3.1.10_alarm_bell.rst:21
msgid "wiringPi"
msgstr "wiringPi"

#: ../3.1.10_alarm_bell.rst:21
msgid "BCM"
msgstr "BCM"

#: ../3.1.10_alarm_bell.rst:22
msgid "GPIO17"
msgstr "GPIO17"

#: ../3.1.10_alarm_bell.rst:22
msgid "Pin 11"
msgstr "Pin 11"

#: ../3.1.10_alarm_bell.rst:22
msgid "0"
msgstr "0"

#: ../3.1.10_alarm_bell.rst:22
msgid "17"
msgstr "17"

#: ../3.1.10_alarm_bell.rst:23
msgid "GPIO18"
msgstr "GPIO18"

#: ../3.1.10_alarm_bell.rst:23
msgid "Pin 12"
msgstr "Pin 12"

#: ../3.1.10_alarm_bell.rst:23
msgid "1"
msgstr "1"

#: ../3.1.10_alarm_bell.rst:23
msgid "18"
msgstr "18"

#: ../3.1.10_alarm_bell.rst:24
msgid "GPIO27"
msgstr "GPIO27"

#: ../3.1.10_alarm_bell.rst:24
msgid "Pin 13"
msgstr "Pin 13"

#: ../3.1.10_alarm_bell.rst:24
msgid "2"
msgstr "2"

#: ../3.1.10_alarm_bell.rst:24
msgid "27"
msgstr "27"

#: ../3.1.10_alarm_bell.rst:25
msgid "GPIO22"
msgstr "GPIO22"

#: ../3.1.10_alarm_bell.rst:25
msgid "Pin 15"
msgstr "Pin 15"

#: ../3.1.10_alarm_bell.rst:25
msgid "3"
msgstr "3"

#: ../3.1.10_alarm_bell.rst:25
msgid "22"
msgstr "22"

#: ../3.1.10_alarm_bell.rst:32
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../3.1.10_alarm_bell.rst:34
msgid "**Step 1**: Build the circuit."
msgstr "**ステップ1：** 回路を作る。"

msgid "Alarm Bell_bb"
msgstr "Alarm Bell_bb"

#: ../3.1.10_alarm_bell.rst:41
msgid "**For C Language Users**"
msgstr "**C言語ユーザー向け**"

#: ../3.1.10_alarm_bell.rst:43
msgid "**Step 2**: Change directory."
msgstr "**ステップ2：** ディレクトリを変更する。"

#: ../3.1.10_alarm_bell.rst:53
msgid "**Step 3**: Compile."
msgstr "**ステップ3：** コンパイルする。"

#: ../3.1.10_alarm_bell.rst:63
msgid "**Step 4**: Run."
msgstr "**ステップ4：** 実行。"

#: ../3.1.10_alarm_bell.rst:73 ../3.1.10_alarm_bell.rst:239
msgid ""
"After the program starts, the toggle switch will be toggled to the right,"
" and the buzzer will give out alarm sounds. At the same time, the red and"
" green LEDs will flash at a certain frequency."
msgstr "プログラムが起動すると、トグルスイッチが右に切り替わり、ブザーが警報音を出す。同時に、特定の周波数で赤と緑のLEDが点滅する。"

#: ../3.1.10_alarm_bell.rst:79
msgid ""
"If it does not work after running, please refer to :ref:`C code is not "
"working?`"
msgstr "実行後に機能しない場合は、:ref:`C code is not working?` を参照してください。"

#: ../3.1.10_alarm_bell.rst:82 ../3.1.10_alarm_bell.rst:338
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../3.1.10_alarm_bell.rst:88
msgid ""
"In this code, you'll use a new library, pthread.h, which is a set of "
"common thread libraries and can realize multithreading. We add the "
"**-lpthread** parameter at compile time for the independent working of "
"the LED and the buzzer."
msgstr ""
"このコードでは、新しいライブラリpthread.hを使用する。これは、一般的なスレッドライブラリのセットであり、マルチスレッドを実現できる。コンパイル時に"
" **-lpthread** パラメーターを追加して、LEDとブザーを独立して動作させる。"

#: ../3.1.10_alarm_bell.rst:110 ../3.1.10_alarm_bell.rst:360
msgid ""
"The function ledWork() helps to set the working state of these 2 LEDs: it"
" keeps the green LED lighting up for 0.5s and then turns off; similarly, "
"keeps the red LED lighting up for 0.5s and then turns off."
msgstr "関数ledWork()は、これら2つのLEDの動作状態を設定するために役立つ：緑色のLEDを0.5秒間点灯させた後、消灯する。同様に、赤いLEDを0.5秒間点灯させてから消灯する。"

#: ../3.1.10_alarm_bell.rst:131 ../3.1.10_alarm_bell.rst:376
msgid ""
"The function buzzWork() is used to set the working state of the buzzer. "
"Here we set the frequency as between 130 and 800, to accumulate or decay "
"at an interval of 20."
msgstr "関数buzzWork()は、ブザーの動作状態を設定するために使用される。ここでは、周波数を130〜800に設定し、20の間隔で累積・減衰する。"

#: ../3.1.10_alarm_bell.rst:149 ../3.1.10_alarm_bell.rst:391
msgid "In the function on():"
msgstr "関数on()で："

#: ../3.1.10_alarm_bell.rst:151 ../3.1.10_alarm_bell.rst:393
 
msgid ""
"Define the mark \\\"flag=1\\\", indicating the ending of the control "
"thread."
msgstr "制御スレッドの終了を示すマーク「flag = 1」を定義する。"

#: ../3.1.10_alarm_bell.rst:154
msgid "Create a software-controlled tone pin **BeepPin**."
msgstr "ソフトウェア制御のトーンピン **BeepPin** を作成する。"

#: ../3.1.10_alarm_bell.rst:156
msgid ""
"Create two separate threads so that the LED and the buzzer can work at "
"the same time."
msgstr "LEDとブザーが同時に動作できるように、二つの個別のスレッドを作成する。"

#: ../3.1.10_alarm_bell.rst:159
msgid "**pthread_t tLed:** Declare a thread **tLed**."
msgstr "**pthread_t tLed：** スレッド **tLed** を宣言する。"

#: ../3.1.10_alarm_bell.rst:161
 
msgid ""
"**pthread_create(&tLed,NULL,ledWork,NULL)：** Create the thread and its "
"prototype is as follows:"
msgstr "**pthread_create（＆tLed、NULL、ledWork、NULL）：** スレッドを作成し、そのプロトタイプは次の通りである："

#: ../3.1.10_alarm_bell.rst:164
msgid ""
"int pthread_create(pthread_t \\*restrict tidp,const pthread_attr_t "
"\\*restrict_attr,void*（*start_rtn)(void*),void \\*restrict arg);"
msgstr ""
"int pthread_create(pthread_t \\*restrict tidp,const pthread_attr_t "
"\\*restrict_attr,void*（*start_rtn)(void*),void \\*restrict arg);"

#: ../3.1.10_alarm_bell.rst:167
msgid "**Return the Value**"
msgstr "**値を返す**"

#: ../3.1.10_alarm_bell.rst:169
 
msgid ""
"If successful, return \\\"**0**\\\"；otherwise, return the **fall number**"
" \\\"**-1**\\\"."
msgstr "成功した場合は「**0**」を返し、それ以外の場合は落下数「**-1**」を返します。"

#: ../3.1.10_alarm_bell.rst:172
msgid "**Parameter**"
msgstr "**パラメータ**"

#: ../3.1.10_alarm_bell.rst:174
msgid "The first parameter is a pointer to the thread identifier."
msgstr "最初のパラメーターは、スレッドIDへのポインターです。"

#: ../3.1.10_alarm_bell.rst:175
msgid "The second one is used to set the thread attribute."
msgstr "2つ目は、スレッド属性を設定するために使用されます。"

#: ../3.1.10_alarm_bell.rst:176
msgid "The third one is the starting address of the thread running function."
msgstr "3番目は、スレッド実行関数の開始アドレスです。"

#: ../3.1.10_alarm_bell.rst:177
msgid "The last one is the one that runs the function."
msgstr "最後のものは、関数を実行するものです。"

#: ../3.1.10_alarm_bell.rst:189 ../3.1.10_alarm_bell.rst:423
 
msgid ""
"The function Off() defines \\\"flag=0\\\" so as to exit the threads "
"**ledWork** and **BuzzWork** and then turn off the buzzer and the LED."
msgstr ""
"スレッド **ledWork** と **BuzzWork** を終了するために、関数Off()は「flag = "
"0」を定義しそして、ブザーとLEDをオフにする。"

#: ../3.1.10_alarm_bell.rst:210 ../3.1.10_alarm_bell.rst:438
msgid ""
"Main() contains the whole process of the program: firstly read the value "
"of the slide switch; if the toggle switch is toggled to the right (the "
"reading is 1), the function on() is called, the buzzer is driven to emit "
"sounds and the the red and the green LEDs blink. Otherwise, the buzzer "
"and the LED don’t work."
msgstr "Main()には、プログラムのプロセス全体が含まれている：まず、スライドスイッチの値を読み取る。トグルスイッチが右に切り替えられた場合（読み取り値が1）、関数on()が呼び出され、ブザーが駆動されて音が鳴り、赤と緑のLEDが点滅する。そうしないと、ブザーとLEDが機能しない。"

#: ../3.1.10_alarm_bell.rst:217
msgid "**For Python Language Users**"
msgstr "**Python言語ユーザー向け**"

#: ../3.1.10_alarm_bell.rst:219
msgid "**Step 2:** Change directory."
msgstr "**ステップ2：** ディレクトリを変更する。"

#: ../3.1.10_alarm_bell.rst:229
msgid "**Step 3:** Run."
msgstr "**ステップ3：** 実行する。"

#: ../3.1.10_alarm_bell.rst:243
msgid "**Code**"
msgstr "**コード**"

#: ../3.1.10_alarm_bell.rst:247
 
msgid ""
"You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, "
"you need to go to  source code path like ``davinci-kit-for-raspberry-"
"pi/python``."
msgstr ""
"以下のコードを **変更/リセット/コピー/実行/停止** できます。 ただし、その前に、 ``davinci-kit-for-raspberry-pi/python`` のようなソースコードパスに移動する必要があります。"

#: ../3.1.10_alarm_bell.rst:344
msgid ""
"Here, we import the **Threading** module and it allows you to do multiple"
" things at once, while normal programs can only execute code from top to "
"bottom. With **Threading** modules, the LED and the buzzer can work "
"separately."
msgstr ""
"ここでは、 **Threading** "
"モジュールをインポートし、複数のことを一度に行えるようにするが、通常のプログラムはコードを上から下にしか実行できない。 **Threading**"
" モジュールを使用すると、LEDとブザーを個別に動作させることができる。"

#: ../3.1.10_alarm_bell.rst:396
msgid "Start the Buzz, and set the duty cycle to 50%."
msgstr "バズを開始し、デューティサイクルを50％に設定する。"

#: ../3.1.10_alarm_bell.rst:398
msgid ""
"Create **2** separate threads so that the LED and the buzzer can work at "
"the same time."
msgstr "LEDとブザ **ー** が同時に動作できるように、二つの個別のスレッドを作成する。"

#: ../3.1.10_alarm_bell.rst:401
 
msgid ""
"tBuzz = threading.Thread(target=buzzerWork) **:** Create the thread and "
"its prototype is as follows:"
msgstr ""
"tBuzz = threading.Thread（target = buzzerWork） **：** "
"スレッドを作成すると、そのプロトタイプは以下の通りである："

#: ../3.1.10_alarm_bell.rst:405
msgid ""
"class threading.Thread(group=None, target=None, name=None, args=(), "
"kwargs={}, \\*, daemon=None)"
msgstr ""
"class threading.Thread(group=None, target=None, name=None, args=(), "
"kwargs={}, \\*, daemon=None)"

#: ../3.1.10_alarm_bell.rst:407
 
msgid ""
"Among the construction methods, the principal parameter is **target**, we"
" need to assign a callable object (here are the functions **ledWork** and"
" **BuzzWork** ) to **target**."
msgstr ""
"構築メソッドの中で、主要なパラメーターは **ターゲット** であり、呼び出し可能なオブジェクト（ここでは関数 **ledWork** と "
"**BuzzWork** ）を **ターゲット** に割り当てる必要がある。"

#: ../3.1.10_alarm_bell.rst:411
msgid ""
"Next **start()** is called to start the thread object, ex., tBuzz.start()"
" is used to start the newly installed tBuzz thread."
msgstr ""
"次に、スレッドオブジェクトを開始するために **start()** "
"が呼び出される。たとえば、tBuzz.start()は、新しくインストールされたtBuzzスレッドを開始するために使用される。"

#: ../3.1.10_alarm_bell.rst:445
msgid "Phenomenon Picture"
msgstr "現象画像"

#~ msgid ""
#~ "If it does not work after running,"
#~ " please refer to :ref:`C code is "
#~ "not working?`."
#~ msgstr ""

