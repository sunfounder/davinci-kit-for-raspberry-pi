.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, d'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour enrichir vos comp√©tences.
    - **Aper√ßus exclusifs** : Soyez les premiers inform√©s des nouvelles annonces de produits.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et b√©n√©ficiez d'offres sp√©ciales lors d'√©v√©nements festifs.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _2.2.2_py_pi5:

2.2.2 Thermistance
====================

Introduction
--------------

Tout comme une photor√©sistance peut d√©tecter la lumi√®re, une thermistance est un 
dispositif √©lectronique sensible √† la temp√©rature. Elle peut √™tre utilis√©e pour 
r√©aliser des fonctions de contr√¥le de la temp√©rature, comme la cr√©ation d'une alarme thermique.

Composants n√©cessaires
----------------------

Pour ce projet, nous aurons besoin des composants suivants :

.. image:: ../python_pi5/img/2.2.2_thermistor_list.png


.. It's definitely convenient to buy a whole kit, here's the link: 

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Name	
..         - ITEMS IN THIS KIT
..         - LINK
..     *   - Raphael Kit
..         - 337
..         - |link_Raphael_kit|

.. You can also buy them separately from the links below.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - COMPONENT INTRODUCTION
..         - PURCHASE LINK

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`thermistor`
..         - |link_thermistor_buy|
..     *   - :ref:`adc0834`
..         - \-

Sch√©ma de circuit
--------------------

.. image:: ../python_pi5/img/2.2.2_thermistor_schematic_1.png

.. image:: ../python_pi5/img/2.2.2_thermistor_schematic_2.png


Proc√©dure exp√©rimentale
---------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.2.2_thermistor_circuit.png

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le fichier.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.2.2_Thermistor.py

Une fois le code lanc√©, la thermistance d√©tectera la temp√©rature ambiante, 
qui sera affich√©e √† l'√©cran apr√®s le calcul effectu√© par le programme.

.. warning::

    Si une erreur ``RuntimeError: Cannot determine SOC peripheral base address`` appara√Æt, veuillez consulter :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le chemin source du code, comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   # -*- coding: utf-8 -*-

   import ADC0834
   import time
   import math

   # Initialisation du module ADC0834
   ADC0834.setup()

   # Ex√©cution du processus dans un bloc try-except
   try:
       while True:
           # Lecture de la valeur analogique du capteur
           analogVal = ADC0834.getResult()

           # Conversion de la valeur analogique en tension
           Vr = 5 * float(analogVal) / 255

           # Calcul de la r√©sistance de la thermistance
           Rt = 10000 * Vr / (5 - Vr)

           # Calcul de la temp√©rature en Kelvin
           temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273,15 + 25)))

           # Conversion de Kelvin en Celsius
           Cel = temp - 273,15

           # Conversion de Celsius en Fahrenheit
           Fah = Cel * 1,8 + 32

           # Affichage de la temp√©rature en Celsius et en Fahrenheit
           print('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))

           # Attente de 0,2 seconde avant la prochaine lecture
           time.sleep(0.2)

   # Gestion de l'interruption clavier pour une terminaison propre
   except KeyboardInterrupt:
       # Lib√©ration des ressources de l'ADC0834
       ADC0834.destroy()


**Explication du code**

#. Cette section importe la biblioth√®que ADC0834 pour la conversion analogique-num√©rique, la biblioth√®que ``time`` pour impl√©menter des d√©lais, et la biblioth√®que ``math`` pour effectuer des op√©rations math√©matiques.

   .. code-block:: python

       #!/usr/bin/env python3
       # -*- coding: utf-8 -*-

       import ADC0834
       import time
       import math

#. Initialisation du module ADC0834 pour permettre la lecture des valeurs analogiques.

   .. code-block:: python

       # Initialisation du module ADC0834
       ADC0834.setup()

#. Impl√©mentation d'une boucle infinie pour la lecture continue des donn√©es. La boucle lit la valeur analogique de la thermistance, la convertit en tension, calcule la r√©sistance de la thermistance, puis la traduit en mesures de temp√©rature en Kelvin, Celsius et Fahrenheit. Elle affiche ensuite les temp√©ratures en Celsius et en Fahrenheit avec une pause de 0,2 seconde entre chaque lecture.

   .. code-block:: python

       # Ex√©cution du processus dans un bloc try-except
       try:
           while True:
               # Lecture de la valeur analogique du capteur
               analogVal = ADC0834.getResult()

               # Conversion de la valeur analogique en tension
               Vr = 5 * float(analogVal) / 255

               # Calcul de la r√©sistance de la thermistance
               Rt = 10000 * Vr / (5 - Vr)

               # Calcul de la temp√©rature en Kelvin
               temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273,15 + 25)))

               # Conversion de Kelvin en Celsius
               Cel = temp - 273,15

               # Conversion de Celsius en Fahrenheit
               Fah = Cel * 1,8 + 32

               # Affichage de la temp√©rature en Celsius et en Fahrenheit
               print('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))

               # Attente de 0,2 seconde avant la prochaine lecture
               time.sleep(0.2)

#. Capture de l'exception ``KeyboardInterrupt`` pour terminer proprement le programme et lib√©rer les ressources du module ADC0834.

   .. code-block:: python

       # Gestion de l'interruption clavier pour une terminaison propre
       except KeyboardInterrupt:
           # Lib√©ration des ressources de l'ADC0834
           ADC0834.destroy()
