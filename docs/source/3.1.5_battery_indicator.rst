.. note::

    Bonjour et bienvenue dans la communautÃ© SunFounder pour les passionnÃ©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au cÅ“ur de Raspberry Pi, Arduino et ESP32 avec d'autres passionnÃ©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : RÃ©solvez vos problÃ¨mes aprÃ¨s-vente et vos dÃ©fis techniques grÃ¢ce Ã  l'aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre & Partager** : Ã‰changez des astuces et des tutoriels pour perfectionner vos compÃ©tences.
    - **AperÃ§us exclusifs** : AccÃ©dez en avant-premiÃ¨re aux annonces de nouveaux produits et aux aperÃ§us exclusifs.
    - **RÃ©ductions spÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez Ã  des concours et Ã  des promotions spÃ©ciales pendant les fÃªtes.

    ðŸ‘‰ PrÃªt Ã  explorer et crÃ©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous dÃ¨s aujourd'hui !

3.1.5 Indicateur de batterie
===============================

Introduction
----------------

Dans ce cours, nous allons fabriquer un dispositif indicateur de batterie qui peut 
afficher visuellement le niveau de charge sur un bargraphe LED.

Composants
-------------

.. image:: img/list_Battery_Indicator.png
    :align: center

SchÃ©ma de cÃ¢blage
---------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO25       Pin 22   6        25
GPIO12       Pin 32   26       12
GPIO16       Pin 36   27       16
GPIO20       Pin 38   28       20
GPIO21       Pin 40   29       21
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
GPIO19       Pin 35   24       19
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: img/Schematic_three_one5.png
   :align: center

ProcÃ©dures expÃ©rimentales
-----------------------------

**Ã‰tape 1 :** Construisez le circuit.

.. image:: img/image248.png
   :width: 800
   :align: center

**Pour les utilisateurs du langage C**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Ã‰tape 2 :** AccÃ©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.5/

**Ã‰tape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.5_BatteryIndicator.c -lwiringPi

**Ã‰tape 4 :** ExÃ©cutez le fichier exÃ©cutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

AprÃ¨s l'exÃ©cution du programme, connectez sÃ©parÃ©ment la 3Ã¨me broche de l'ADC0834 et 
le GND Ã  des fils de sortie, puis reliez-les aux deux pÃ´les d'une batterie. Vous 
verrez que les LED correspondantes sur le bargraphe LED s'allument pour indiquer le 
niveau de charge (plage de mesure : 0-5V).

.. note::

    Si cela ne fonctionne pas aprÃ¨s l'exÃ©cution ou si un message d'erreur apparaÃ®t : \"wiringPi.h: Aucun fichier ou dossier de ce type Â», veuillez vous rÃ©fÃ©rer Ã  :ref:`C code is not working?`.

**Explication du code**

.. code-block:: c

    voidÂ LedBarGraph(intÂ value){
    Â Â Â Â for(intÂ i=0;i<10;i++){
    Â Â Â Â Â Â Â Â digitalWrite(pins[i],HIGH);
    Â Â Â Â }
    Â Â Â Â for(intÂ i=0;i<value;i++){
    Â Â Â Â Â Â Â Â digitalWrite(pins[i],LOW);
    Â Â Â Â }
    }

Cette fonction permet de contrÃ´ler l'allumage ou l'extinction des 10 LED du bargraphe LED. 
Nous commenÃ§ons par envoyer un signal de niveau haut aux 10 LED pour les Ã©teindre, puis 
nous dÃ©cidons combien de LED seront allumÃ©es en fonction de la valeur analogique reÃ§ue.

.. code-block:: c

    intÂ main(void)
    {
    Â Â Â Â ucharÂ analogVal;
    Â Â Â Â if(wiringPiSetup()Â ==Â -1){Â // Si l'initialisation de WiringPi Ã©choue, afficher un message Ã  l'Ã©cran
    Â Â Â Â Â Â Â Â printf("setupÂ wiringPiÂ failedÂ !");
    Â Â Â Â Â Â Â Â returnÂ 1;
    Â Â Â Â }
    Â Â Â Â pinMode(ADC_CS,Â Â OUTPUT);
    Â Â Â Â pinMode(ADC_CLK,Â OUTPUT);
    Â Â Â Â for(intÂ i=0;i<10;i++){Â Â Â Â Â Â Â // DÃ©finir les broches des LED en mode sortie
    Â Â Â Â Â Â Â Â pinMode(pins[i],Â OUTPUT);
    Â Â Â Â Â Â Â Â digitalWrite(pins[i],HIGH);
    Â Â Â Â }
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â analogValÂ =Â get_ADC_Result(0);
    Â Â Â Â Â Â Â Â LedBarGraph(analogVal/25);
    Â Â Â Â Â Â Â Â delay(100);
    Â Â Â Â }
    Â Â Â Â returnÂ 0;
    }

`analogVal` produit des valeurs (**0-255**) selon la variation de la tension (**0-5V**), 
par exemple, si une tension de 3V est dÃ©tectÃ©e sur une batterie, la valeur correspondante
 **152** s'affiche sur le voltmÃ¨tre.

Les **10** LED du bargraphe sont utilisÃ©es pour afficher les valeurs de `analogVal`. 
255/10=25, donc chaque augmentation de **25** de la valeur analogique allume une LED 
supplÃ©mentaire, par exemple, si `analogVal=150` (environ 3V), 6 LED s'allument.

**Pour les utilisateurs du langage Python**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Ã‰tape 2 :** AccÃ©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**Ã‰tape 3 :** ExÃ©cutez le fichier exÃ©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.5_BatteryIndicator.py

AprÃ¨s l'exÃ©cution du programme, connectez sÃ©parÃ©ment la 3Ã¨me broche de l'ADC0834 et 
le GND Ã  des fils de sortie, puis reliez-les aux deux pÃ´les d'une batterie. Vous 
verrez que les LED correspondantes sur le bargraphe LED s'allument pour indiquer 
le niveau de charge (plage de mesure : 0-5V).

**Code**

.. note::

    Vous pouvez **modifier/rÃ©initialiser/copier/exÃ©cuter/arrÃªter** le code ci-dessous. Mais avant cela, vous devez vous rendre sur le chemin du code source comme ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import ADC0834
    import time

    ledPins = [25, 12, 16, 20, 21, 5, 6, 13, 19, 26]

    def setup():
        GPIO.setmode(GPIO.BCM)
        ADC0834.setup()
        for i in ledPins:
            GPIO.setup(i, GPIO.OUT)
            GPIO.output(i, GPIO.HIGH)

    def LedBarGraph(value):
        for i in ledPins:
            GPIO.output(i,GPIO.HIGH)
        for i in range(value):
            GPIO.output(ledPins[i],GPIO.LOW)

    def destroy():
        GPIO.cleanup()

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            LedBarGraph(int(analogVal/25))

    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # Quand 'Ctrl+C' est pressÃ©, la fonction destroy() sera exÃ©cutÃ©e.
            destroy()

**Explication du code**

.. code-block:: python

    defÂ LedBarGraph(value):
    Â Â Â Â forÂ iÂ inÂ ledPins:
    Â Â Â Â Â Â Â Â GPIO.output(i,GPIO.HIGH)
    Â Â Â Â forÂ iÂ inÂ range(value):
    Â Â Â Â Â Â Â Â GPIO.output(ledPins[i],GPIO.LOW)

Cette fonction permet de contrÃ´ler l'allumage ou l'extinction des **10** LED du 
bargraphe LED. Nous commenÃ§ons par envoyer un signal de niveau haut aux **10** 
LED pour les Ã©teindre, puis nous dÃ©cidons combien de LED seront allumÃ©es en fonction 
de la valeur analogique reÃ§ue.

.. code-block:: python

    defÂ loop():
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â analogValÂ =Â ADC0834.getResult()
    Â Â Â Â Â Â Â Â LedBarGraph(int(analogVal/25))

`analogVal` produit des valeurs (**0-255**) selon la variation de la tension (**0-5V**), 
par exemple, si une tension de 3V est dÃ©tectÃ©e sur une batterie, la valeur correspondante 
**152** s'affiche sur le voltmÃ¨tre.

Les **10** LED du bargraphe sont utilisÃ©es pour afficher les valeurs de `analogVal`. 
255/10=25, donc chaque augmentation de **25** de la valeur analogique allume une LED 
supplÃ©mentaire, par exemple, si `analogVal=150` (environ 3V), 6 LED s'allument.


Image du phÃ©nomÃ¨ne
-----------------------

.. image:: img/image249.jpeg
   :align: center
