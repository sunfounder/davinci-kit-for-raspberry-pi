.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et b√©n√©ficiez de previews exclusives.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !


1.1.6 Matrice de LED
========================

Introduction
---------------------

Comme son nom l'indique, une matrice de LED est un r√©seau constitu√© de LED. 
L'allumage et l'extinction de ces LED permettent de cr√©er diff√©rents caract√®res et motifs.

Composants
------------------

.. image:: img/list_dot.png

Principe
----------------

**Matrice de LED**

En g√©n√©ral, les matrices de LED peuvent √™tre class√©es en deux types : cathode 
commune (CC) et anode commune (CA). Elles se ressemblent beaucoup ext√©rieurement, 
mais leur c√¢blage interne diff√®re. Vous pouvez les identifier par un test. Ce kit 
utilise une matrice CA. Vous pouvez voir l'inscription "788BS" sur le c√¥t√©.

Consultez la figure ci-dessous. Les broches sont dispos√©es aux deux extr√©mit√©s √† 
l'arri√®re. Prenez la face avec le marquage comme r√©f√©rence : les broches de ce c√¥t√© 
sont num√©rot√©es de 1 √† 8, et de l'autre c√¥t√© de 9 √† 16.

Vue externe :

.. image:: img/image84.png

Les figures ci-dessous montrent la structure interne. Dans une matrice CA, les "ROW" 
repr√©sentent l'anode de la LED, et les "COL" la cathode ; c'est l'inverse pour une 
matrice CC. Un point commun : pour les deux types, les broches 13, 3, 4, 10, 6, 11, 15 
et 16 correspondent aux COL, tandis que les broches 9, 14, 8, 12, 1, 7, 2 et 5 correspondent 
aux ROW. Si vous souhaitez allumer la premi√®re LED en haut √† gauche, dans une matrice CA, 
r√©glez la broche 9 sur High et la broche 13 sur Low ; pour une matrice CC, r√©glez la broche 
13 sur High et la broche 9 sur Low. Pour allumer toute la premi√®re colonne, pour une matrice 
CA, r√©glez la broche 13 sur Low et les ROW 9, 14, 8, 12, 1, 7, 2, et 5 sur High, alors que 
pour une CC, r√©glez la broche 13 sur High et les ROW 9, 14, 8, 12, 1, 7, 2, et 5 sur Low. 
Consultez les figures ci-dessous pour mieux comprendre.

Vue interne :

.. image:: img/image85.png
   :width: 400
   :align: center

Num√©rotation des broches correspondant aux rang√©es et colonnes ci-dessus :

=========== ====== ====== ===== ====== ===== ====== ====== ======
**COL**     **1**  **2**  **3** **4**  **5** **6**  **7**  **8**
**Pin No.** **13** **3**  **4** **10** **6** **11** **15** **16**
**ROW**     **1**  **2**  **3** **4**  **5** **6**  **7**  **8**
**Pin No.** **9**  **14** **8** **12** **1** **7**  **2**  **5**
=========== ====== ====== ===== ====== ===== ====== ====== ======

De plus, deux puces 74HC595 sont utilis√©es ici. L'une contr√¥le les rang√©es de la matrice de LED, tandis que l'autre g√®re les colonnes.

Sch√©ma de c√¢blage
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: img/schematic_dot.png
   :width: 800

Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit. Comme le c√¢blage est complexe, suivez les 
√©tapes une √† une. Ins√©rez d'abord le T-Cobbler, la matrice de LED et les deux puces 
74HC595 dans la breadboard. Connectez les broches 3,3 V et GND du T-Cobbler aux trous 
sur les deux c√¥t√©s de la carte, puis branchez la broche 16 et 10 des deux puces 74HC595 
√† VCC, et les broches 13 et 8 √† GND.

.. note::
   Dans l'image Fritzing ci-dessus, le c√¥t√© avec l'√©tiquette est orient√© vers le bas.

.. image:: img/image87.png
   :width: 800

**√âtape 2 :** Connectez la broche 11 des deux 74HC595 ensemble, puis √† GPIO27 ; ensuite, 
reliez la broche 12 des deux puces √† GPIO18 ; et enfin, connectez la broche 14 du 74HC595 
√† gauche √† GPIO17 et la broche 9 √† la broche 14 de la deuxi√®me puce 74HC595.

.. image:: img/image88.png
   :width: 800

**√âtape 3 :** Le 74HC595 √† droite est destin√© √† contr√¥ler les colonnes de la matrice LED. 
Consultez le tableau ci-dessous pour la correspondance. Les broches Q0-Q7 du 74HC595 sont 
reli√©es respectivement aux broches 13, 3, 4, 10, 6, 11, 15 et 16.


+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **74HC595**        | **Q0** | **Q1** | **Q2** | **Q3** | **Q4** | **Q5** | **Q6** | **Q7** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **LED Dot Matrix** | **13** | **3**  | **4**  | **10** | **6**  | **11** | **15** | **16** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+

.. image:: img/image89.png
   :width: 800

**√âtape 4 :** Connectez maintenant les rang√©es (ROW) de la matrice de LED. Le 74HC595 
situ√© √† gauche contr√¥le les rang√©es de la matrice. Consultez le tableau ci-dessous pour 
la correspondance. On peut observer que les broches Q0-Q7 du 74HC595 √† gauche sont 
respectivement reli√©es aux broches 9, 14, 8, 12, 1, 7, 2 et 5.

+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **74HC595**        | **Q0** | **Q1** | **Q2** | **Q3** | **Q4** | **Q5** | **Q6** | **Q7** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **LED Dot Matrix** | **9**  | **14** | **8**  | **12** | **1**  | **7**  | **2**  | **5**  |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+

.. image:: img/image90.png
   :width: 800

**√âtape 5 :** Acc√©dez au dossier contenant le code.

.. raw:: html

   <run></run>

.. code-block::

   cd ~/davinci-kit-for-raspberry-pi/c/1.1.6/

**√âtape 6 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

   gcc 1.1.6_LedMatrix.c -lwiringPi

**√âtape 7 :** Ex√©cutez le programme.

.. raw:: html

   <run></run>

.. code-block::

   sudo ./a.out

Apr√®s l'ex√©cution du code, la matrice de LED s'allume et s'√©teint ligne par ligne et colonne par colonne.

.. note::

   Si cela ne fonctionne pas apr√®s l'ex√©cution ou si un message d'erreur s'affiche : \"wiringPi.h: No such file or directory\", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

   #include <wiringPi.h>
   #include <stdio.h>

   #define   SDI   0   //entr√©e de donn√©es s√©rie
   #define   RCLK  1   //entr√©e d'horloge m√©moire (STCP)
   #define   SRCLK 2   //entr√©e d'horloge de registre √† d√©calage (SHCP)

   unsigned char code_H[20] = {0x01,0xff,0x80,0xff,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
   unsigned char code_L[20] = {0x00,0x7f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f};

   void init(void){
      pinMode(SDI, OUTPUT); 
      pinMode(RCLK, OUTPUT);
      pinMode(SRCLK, OUTPUT);

      digitalWrite(SDI, 0);
      digitalWrite(RCLK, 0);
      digitalWrite(SRCLK, 0);
   }

   void hc595_in(unsigned char dat){
      int i;
      for(i=0;i<8;i++){
         digitalWrite(SDI, 0x80 & (dat << i));
         digitalWrite(SRCLK, 1);
         delay(1);
         digitalWrite(SRCLK, 0);
      }
   }

   void hc595_out(){
      digitalWrite(RCLK, 1);
      delay(1);
      digitalWrite(RCLK, 0);
   }

   int main(void){
      int i;
      if(wiringPiSetup() == -1){ //si l'initialisation de wiring √©choue, afficher le message sur l'√©cran
         printf("setup wiringPi failed !");
         return 1;
      }
      init();
      while(1){
         for(i=0;i<sizeof(code_H);i++){
               hc595_in(code_L[i]);
               hc595_in(code_H[i]);
               hc595_out();
               delay(100);
         }

         for(i=sizeof(code_H);i>=0;i--){
               hc595_in(code_L[i]);
               hc595_in(code_H[i]);
               hc595_out();
               delay(100);
         }
      }

      return 0;
   }
**Explication du Code**

.. code-block:: c

   unsigned char code_H[20] = {0x01,0xff,0x80,0xff,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
   unsigned char code_L[20] = {0x00,0x7f,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f};

Le tableau `code_H` repr√©sente les √©l√©ments de la ligne de la matrice de LED, et le tableau `code_L` correspond aux √©l√©ments de la colonne. Lors de l'affichage des caract√®res, un √©l√©ment de la ligne et un de la colonne sont s√©lectionn√©s et assign√©s respectivement aux deux puces HC595. Ainsi, un motif est affich√© sur la matrice de LED.
Prenons le premier nombre de `code_H`, `0x01` et le premier nombre de `code_L`, `0x00` comme exemples.

0x01 converti en binaire devient 00000001 ; 0x00 converti en binaire devient 00000000.

Dans ce kit, on utilise une matrice de LED √† anode commune, donc seules les huit LED de la huiti√®me ligne s'allument.
Lorsque les conditions o√π `code_H` est 0xff et `code_L` est 0x7f sont remplies simultan√©ment, les 8 LED de la premi√®re colonne s'allument.

.. image:: img/anode_table.png

.. code-block:: c

   void hc595_in(unsigned char dat){
      int i;
      for(i=0;i<8;i++){
         digitalWrite(SDI, 0x80 & (dat << i));
         digitalWrite(SRCLK, 1);
         delay(1);
         digitalWrite(SRCLK, 0);

√âcrire la valeur de `dat` √† la broche SDI du HC595 bit par bit. La valeur initiale de SRCLK √©tait 0, et ici elle est d√©finie sur 1 pour g√©n√©rer une impulsion de front montant, puis transf√©rer la donn√©e de `pinSDI(DS)` au registre de d√©calage.

.. code-block:: c

   void hc595_out(){
      digitalWrite(RCLK, 1);
      delay(1);
      digitalWrite(RCLK, 0);

La valeur initiale de RCLK √©tait 0, et ici elle est d√©finie sur 1 pour g√©n√©rer une impulsion de front montant, puis transf√©rer les donn√©es du registre de d√©calage au registre de stockage.       

.. code-block:: c

   while(1){
      for(i=0;i<sizeof(code_H);i++){
         hc595_in(code_L[i]);
         hc595_in(code_H[i]);
         hc595_out();
         delay(100);
      }
   }

Dans cette boucle, les 20 √©l√©ments des deux tableaux `code_L` et `code_H` seront charg√©s dans les deux puces 74HC595 un par un. Ensuite, la fonction `hc595_out()` est appel√©e pour transf√©rer les donn√©es du registre de d√©calage au registre de stockage.
