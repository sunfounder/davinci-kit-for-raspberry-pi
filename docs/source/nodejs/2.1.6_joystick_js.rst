.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des conseils et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d‚Äôun acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.1.6 Joystick
================

Introduction
--------------

Dans ce projet, nous allons apprendre comment fonctionne un joystick. Nous 
manipulons le joystick et affichons les r√©sultats √† l'√©cran.

Composants
-----------

.. image:: ../img/image317.png


Sch√©ma de c√¢blage
-------------------

Lorsque les donn√©es du joystick sont lues, il y a des diff√©rences entre les axes : 
les donn√©es des axes X et Y sont analogiques et n√©cessitent l'utilisation de l'ADC0834 
pour convertir la valeur analogique en valeur num√©rique. Les donn√©es de l'axe Z sont 
num√©riques, vous pouvez donc utiliser directement le GPIO pour les lire, ou utiliser 
√©galement l'ADC pour les lire.

.. image:: ../img/image319.png


.. image:: ../img/image320.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image193.png

**√âtape 2 :** Acc√©dez au r√©pertoire contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node joystick.js

Une fois le code ex√©cut√©, bougez le joystick, les valeurs correspondantes 
de x, y, et Btn seront affich√©es √† l'√©cran.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    const adc = new ADC0834(17, 18, 22);
    const btn = new Gpio(25, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_UP,
    });

    setInterval(async() => {

        x_val = await adc.read(0);
        y_val = await adc.read(1);

        btn_val = btn.digitalRead();
        console.log(`x = ${x_val}, y = ${y_val}, btn = ${btn_val}\n`);
    }, 100);

**Explication du code**

.. code-block:: js

    const ADC0834 = require('./adc0834.js').ADC0834;

Nous importons le constructeur ``ADC0834`` pour utiliser le module adc0834.

.. code-block:: js

    setInterval(async() => {

        x_val = await adc.read(0);
        y_val = await adc.read(1);

        btn_val = btn.digitalRead();
        console.log(`x = ${x_val}, y = ${y_val}, btn = ${btn_val}\n`);
    }, 100);

Lors de la lecture simultan√©e des valeurs de plusieurs canaux de l'ADC0834, une 
programmation asynchrone est n√©cessaire. Nous cr√©ons ici une fonction de promesse, 
et utilisons l'instruction await de la fonction async pour √©crire cette t√¢che complexe 
de mani√®re plus √©l√©gante.

* `Promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_
* `Async Function <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_



Image du r√©sultat
--------------------

.. image:: ../img/image194.jpeg


