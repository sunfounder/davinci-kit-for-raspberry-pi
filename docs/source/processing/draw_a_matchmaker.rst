.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder pour les passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance experte** : R√©solvez vos probl√®mes apr√®s-vente et relevez des d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et b√©n√©ficiez de sneak peeks.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions et cadeaux festifs** : Participez √† des promotions sp√©ciales et √† des tirages au sort.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

Dessiner un Bonhomme d'Allumettes
=======================================

Vous utilisez maintenant l'environnement de d√©veloppement de Processing (PDE). 
Il n‚Äôy a pas grand-chose √† configurer : la grande zone est l‚Äô√©diteur de texte, 
et une rang√©e de boutons se trouve en haut ; il s'agit de la barre d‚Äôoutils. 
Sous l'√©diteur se trouve la zone de messages, et en dessous, la console. La zone 
de messages affiche des informations en une ligne, tandis que la console montre 
des d√©tails plus techniques.

Familiarisons-nous avec l‚Äôutilisation de Processing en dessinant un bonhomme d‚Äôallumettes.

**Code**

Copiez le code ci-dessous dans Processing et ex√©cutez-le. Une nouvelle fen√™tre s'ouvrira, 
et un bonhomme d'allumettes joyeux sera dessin√©.

.. code-block:: arduino

    size(200,200);
    background(92, 168, 0); 
    rectMode(CENTER);
    rect(100,120,20,60);
    ellipse(100,80,45,45);
    line(90,150,80,170);
    line(110,150,120,170);
    line(90,110,70,100);
    line(110,110,130,100);

.. image:: img/draw_one1.png

.. note:: 

    Si, en ex√©cutant le code, la zone de messages devient rouge et signale des erreurs, 
    c'est que quelque chose ne va pas dans le code. Assurez-vous de copier le code d'exemple 
    exactement tel qu‚Äôil est : les nombres doivent √™tre plac√©s entre parenth√®ses, s√©par√©s 
    par des virgules, et chaque ligne doit se terminer par un point-virgule.


**Comment √ßa marche ?**

L‚Äô√©l√©ment cl√© ici est de comprendre que la fen√™tre d'affichage peut √™tre vue comme une feuille de papier.

Chaque pixel de la fen√™tre d'affichage est une coordonn√©e (x,y) qui d√©termine la position 
d'un point dans l'espace. L'origine (0,0) se situe dans le coin sup√©rieur gauche, la 
direction positive de l'axe X est horizontale vers la droite, et celle de l'axe Y est 
verticale vers le bas.

Nous devons simplement sp√©cifier quelle forme et quelle couleur doivent appara√Ætre √† ces 
coordonn√©es.

Par exemple, dessinons un rectangle de 20 de large et de 60 de haut, avec les coordonn√©es 
(100,120) comme point central.

.. code-block:: arduino

    rectMode(CENTER);
    rect(100,120,20,60);

.. image:: img/draw_one_coodinate.png

Une fois que nous comprenons la relation entre la fen√™tre d'affichage et les axes, ce 
code devient simple. Il suffit de conna√Ætre quelques instructions de base pour dessiner 
des formes.

    * ``size(width, height)`` : D√©finit les dimensions de la fen√™tre d'affichage en pixels (largeur et hauteur).
    * ``background(red, green, blue)`` : D√©finit la couleur de fond de la fen√™tre d'affichage.
    * ``rectMode(mode)`` : Modifie la position d'origine de dessin des rectangles, en fonction du mode d√©fini.
    * ``rect(x, y, width, height)`` : Dessine un rectangle √† l'√©cran. 
    * ``ellipse(x, y, width, height)`` : Dessine une ellipse (ovale) √† l'√©cran. 
    * ``line(x1, y1, x2, y2)`` : Trace une ligne (un chemin direct entre deux points) sur l‚Äô√©cran.

For more please refer to `Processing Reference <https://processing.org/reference/>`_.






