# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-19 18:22+0800\n"
"PO-Revision-Date: 2021-08-06 10:44+0800\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../1.1.1_blinking_led.rst:2
msgid "1.1.1 Blinking LED"
msgstr "1.1.1 点滅LED"

#: ../1.1.1_blinking_led.rst:5
msgid "Introduction"
msgstr "前書き"

#: ../1.1.1_blinking_led.rst:7
msgid ""
"In this lesson, we will learn how to make a blinking LED by programming. "
"Through your settings, your LED can produce a series of interesting "
"phenomena. Now, go for it."
msgstr "このレッスンでは、プログラミングによってLEDを点滅させる方法を学習する。設定により、LEDは一連の興味深い現象を生成できる。今、行動しよう。"

#: ../1.1.1_blinking_led.rst:12
msgid "Components"
msgstr "部品"

#: ../1.1.1_blinking_led.rst:20
msgid ""
"In order to proceed smoothly, you need to bring your own Raspberry Pi, TF"
" card and Raspberry Pi power."
msgstr "スムーズに進めるには、独自のRaspberry Pi、TFカード、およびRaspberry Piの電源を用意する必要がある。"

#: ../1.1.1_blinking_led.rst:25
msgid "Principle"
msgstr "原理"

#: ../1.1.1_blinking_led.rst:27
msgid "**Breadboard**"
msgstr "**ブレッドボード**"

#: ../1.1.1_blinking_led.rst:29
msgid ""
"A breadboard is a construction base for prototyping of electronics. It is"
" used to build and test circuits quickly before finishing any circuit "
"design. And it has many holes into which components mentioned above can "
"be inserted like ICs and resistors as well as jumper wires. The "
"breadboard allows you to plug in and remove components easily."
msgstr "ブレッドボードは、電子装置のプロトタイピングの構築基盤である。それは回路設計を完了する前に、回路を迅速に作って、テストするために使用される。また、上記の部品をICや抵抗器、ジャンパー線などのように挿入できる多くの穴が搭載されている。ブレッドボードを使用すると、部品を簡単に差し込んだり、取り外したりすることができる。"

#: ../1.1.1_blinking_led.rst:35
msgid ""
"The picture shows the internal structure of a full+ breadboard. Although "
"these holes on the breadboard appear to be independent of each other, "
"they are actually connected to each other through metal strips "
"internally."
msgstr ""
"この写真は、full "
"+ブレッドボードの内部構造を示している。ブレッドボード上のこれらの穴は互いに独立しているように見えるが、実際には内部で金属ストリップを介して互いに接続されている。"

#: ../1.1.1_blinking_led.rst:42
msgid "**LED**"
msgstr "**LED**"

#: ../1.1.1_blinking_led.rst:44
msgid ""
"LED is a kind of diode. LED will shine only if the long pin of LED is "
"connected to the positive electrode and the short pin is connected to "
"negative electrode."
msgstr "LEDは一種のダイオードである。LEDの長いピンが正極に接続され、短いピンが負極に接続されている場合にのみ、LEDが点灯する。"

#: ../1.1.1_blinking_led.rst:48
msgid "image42"
msgstr "image42"

#: ../1.1.1_blinking_led.rst:50
msgid "image43"
msgstr "image43"

#: ../1.1.1_blinking_led.rst:52
msgid "|image42|\\ |image43|"
msgstr "|image42|\\ |image43|"

#: ../1.1.1_blinking_led.rst:54
msgid ""
"The LED can not be directly connected to power supply, which can damage "
"component. A resistor with 160Ω or larger (work in 5V) must be connected "
"in series in the circuit of LED."
msgstr "LEDを電源に直接接続することはできないため、部品に損傷を与える可能性がある。160Ω以上の抵抗（5V動作電圧）は、LEDの回路に直列に接続する必要がある。"

#: ../1.1.1_blinking_led.rst:60
msgid "**Resistor**"
msgstr "**抵抗器**"

#: ../1.1.1_blinking_led.rst:62
msgid ""
"Resistor is an electronic element that can limit the branch current. A "
"fixed resistor is a kind of resistor whose resistance cannot be changed, "
"while that of a potentiometer or a variable resistor can be adjusted."
msgstr "抵抗器は、分岐電流を制限できる電子素子である。固定抵抗器は抵抗値を変更できない抵抗器の一種であるが、ポテンショメータまたは可変抵抗器の抵抗値は調整できる。"

#: ../1.1.1_blinking_led.rst:66
msgid ""
"Fixed resistor is applied in this kit. In the circuit, it is essential to"
" protect the connected components. The following pictures show a real "
"object, 220Ω resistor and two generally used circuit symbols of resistor."
" Ω is the unit of resistance and the larger units include KΩ, MΩ, etc. "
"Their relationship can be shown as follows: 1 MΩ=1000 KΩ, 1 KΩ = 1000 Ω. "
"Normally, the value of resistance is marked on it. So if you see these "
"symbols in a circuit, it means that there is a resistor."
msgstr ""
"このキットには固定抵抗器が適用される。回路では、接続された部品を保護することは重要である。次の図は、実際の物体、220Ω抵抗器、および抵抗器汎用の二つの回路記号を示している。Ωは抵抗値の単位で、より大きな単位はKΩ、MΩなどである。それらの関係は次のように示している：1M="
" 1000KΩ、1KΩ=1000Ω。通常、抵抗値はマークされている。したがって、回路にこれらの記号が表示される場合、抵抗があることを意味する。"

#: ../1.1.1_blinking_led.rst:76
msgid "image45"
msgstr "image45"

#: ../1.1.1_blinking_led.rst:78
msgid "image46"
msgstr "image46"

#: ../1.1.1_blinking_led.rst:80
msgid "|image45|\\ |image46|"
msgstr "|image45|\\ |image46|"

#: ../1.1.1_blinking_led.rst:82
msgid ""
"When using a resistor, we need to know its resistance first. Here are two"
" methods: you can observe the bands on the resistor, or use a multimeter "
"to measure the resistance. You are recommended to use the first method as"
" it is more convenient and faster. To measure the value, use multimeter."
msgstr "抵抗器を使用する場合、まず抵抗値を知る必要がある。以下の二つの方法がある：抵抗の帯域を観察すること、またはマルチメーターを使用して抵抗を測定すること。より便利で迅速なので、一番目の方法をお勧めする。値を測定するには、マルチメーターを使用してください。"

#: ../1.1.1_blinking_led.rst:88
msgid "As shown in the card, each color stands for a number."
msgstr "カードに示されているように、各色は数字を表している。"

#: ../1.1.1_blinking_led.rst:93
msgid "Schematic Diagram"
msgstr "回路図"

#: ../1.1.1_blinking_led.rst:95
msgid ""
"In this experiment, connect a 220Ω resistor to the anode (the long pin of"
" the LED), then the resistor to 3.3 V, and connect the cathode (the short"
" pin) of the LED to GPIO17 of Raspberry Pi. Therefore, to turn on an LED,"
" we need to make GPIO17 low (0V) level. We can get this phenomenon by "
"programming."
msgstr ""
"この実験では、まず220Ωの抵抗器を陽極（LEDの長いピン）に接続し、それから抵抗器を3.3 "
"Vの電源に接続し、LEDの陰極（短いピン）をRaspberry "
"PiのGPIO17に接続する。したがって、LEDをオンにするには、GPIO17を低（0V）レベルにする必要がある。プログラミングを通じてこの現象を取得できる。"

#: ../1.1.1_blinking_led.rst:103
msgid ""
"**Pin11** refers to the 11th pin of the Raspberry Pi from left to right, "
"and its corresponding **wiringPi** and **BCM** pin numbers are shown in "
"the following table."
msgstr ""
"**Pin11** はRaspberry Piの左から11番目のピンを指し、それに対応する **wiringPi** と **BCM** "
"のピン番号は以下の表の通りです。"

#: ../1.1.1_blinking_led.rst:105
msgid ""
"In the C language related content, we make GPIO0 equivalent to 0 in the "
"wiringPi. Among the Python language related content, BCM 17 is 17 in the "
"BCM column of the following table. At the same time, they are the same as"
" the 11th pin on the Raspberry Pi, Pin 11."
msgstr ""
"C言語関連のコンテンツでは、wiringPiでGPIO0を0と同等にする。Python言語関連のコンテンツの中で、BCM "
"17は次の表のBCM列の17である。同時に、それらはRaspberry Piの11番目のピン-ピン11と同じである。"

#: ../1.1.1_blinking_led.rst:111
msgid "T-Board Name"
msgstr "Tボード名"

#: ../1.1.1_blinking_led.rst:111
msgid "physical"
msgstr "physical"

#: ../1.1.1_blinking_led.rst:111
msgid "wiringPi"
msgstr "wiringPi"

#: ../1.1.1_blinking_led.rst:111
msgid "BCM"
msgstr "BCM"

#: ../1.1.1_blinking_led.rst:112
msgid "GPIO17"
msgstr "GPIO17"

#: ../1.1.1_blinking_led.rst:112
msgid "Pin 11"
msgstr "Pin 11"

#: ../1.1.1_blinking_led.rst:112
msgid "0"
msgstr "0"

#: ../1.1.1_blinking_led.rst:112
msgid "17"
msgstr "17"

#: ../1.1.1_blinking_led.rst:120
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../1.1.1_blinking_led.rst:122
msgid "**Step 1:** Build the circuit."
msgstr "**ステップ1:** 回路を作る。"

#: ../1.1.1_blinking_led.rst:130
msgid "For C Language Users"
msgstr "C言語ユーザー向け"

#: ../1.1.1_blinking_led.rst:132
msgid "**Step 2:** Go to the folder of the code."
msgstr "**ステップ2:** コードのフォルダーに入る。"

#: ../1.1.1_blinking_led.rst:134 ../1.1.1_blinking_led.rst:367
msgid "If you use a screen, you're recommended to take the following steps."
msgstr "モニターを使用する場合は、次の手順を実行することをお勧めする。"

#: ../1.1.1_blinking_led.rst:136
msgid "Go to **/home/pi/** and find the folder **davinci-kit-for-raspberry-pi**."
msgstr "**/home/pi/** に入り、 **davinci-kit-for-raspberry-pi** フォルダーを見つけてください。"

#: ../1.1.1_blinking_led.rst:139
msgid ""
"Find **C** in the folder, right-click on it and select **Open in "
"Terminal**."
msgstr "フォルダー内で **C** を見つけて右クリックし、 **Open in Terminal** を選択する。"

#: ../1.1.1_blinking_led.rst:146
msgid ""
"Then a window will pop up as shown below. So now you've entered the path "
"of the code **1.1.1_BlinkingLed.c** ."
msgstr "それから以下のようなウィンドウがポップアップされる。これで、コード **1.1.1_BlinkingLed.c** のパスに入っていた。"

#: ../1.1.1_blinking_led.rst:153
msgid ""
"In the following lessons, we will use command to enter the code file "
"instead of right-clicking. But you can choose the method you prefer."
msgstr "次のレッスンでは、右クリックの代わりにコマンドを使用してコードファイルを入力する。ただし、お好みの方法を選択可能である。"

#: ../1.1.1_blinking_led.rst:157
msgid "If you log into the Raspberry Pi remotely, use ``cd`` to change directory:"
msgstr "Raspberry Piにリモートでログインする場合、 ``cd`` を使用してディレクトリを変更する："

#: ../1.1.1_blinking_led.rst:168
msgid "Change directory to the path of the code in this experiment via cd."
msgstr "この実験では、cdを使用してディレクトリをコードのパスに変更します。"

#: ../1.1.1_blinking_led.rst:170
msgid ""
"In either way, now you are in the folder C. The subsequent procedures "
"based on these two methods are the same. Let's move on."
msgstr "どちらにしても、現在はCフォルダにいることになります。この2つの方法に基づくその後の手順は同じです。次に進みましょう。"

#: ../1.1.1_blinking_led.rst:173
msgid "**Step 3:** Compile the code"
msgstr "**ステップ3:** コードをコンパイルする"

#: ../1.1.1_blinking_led.rst:184
msgid ""
"gcc is GNU Compiler Collection. Here, it functions like compiling the C "
"language file *1_BlinkingLed.c* and outputting an executable file."
msgstr ""
"gcc は GNU Compiler Collection "
"です。ここでは、C言語ファイル*1_BlinkingLed.c*をコンパイルし、実行ファイルを出力するような機能を持っています。"

#: ../1.1.1_blinking_led.rst:188
msgid ""
"In the command, ``-o`` means outputting (the character immediately "
"following -o is the filename output after compilation, and an executable "
"named ``BlinkingLed`` will generate here) and ``-lwiringPi`` is to load "
"the library wiringPi (``l`` is the abbreviation of library)."
msgstr ""
"コマンドでは、 ``-o`` は出力を意味し（-oの直後の文字はコンパイル後のファイル名出力であり、 ``BlinkingLed`` "
"という名前のEXEファイルがここで生成される）、 ``-lwiringPi`` はライブラリーのwiringPiをロードする（ ``l`` "
"はlibraryの省略形である）。"

#: ../1.1.1_blinking_led.rst:193
msgid "**Step 4:** Run the executable file output in the previous step."
msgstr "**ステップ4:** 前のステップで出力されたEXEファイルを実行する。"

#: ../1.1.1_blinking_led.rst:205
msgid ""
"To control the GPIO, you need to run the program, by the command, "
"sudo(superuser do). The command ``./`` indicates the current directory. "
"The whole command is to run the ``BlinkingLed`` in the current directory."
msgstr ""
"GPIOを制御するには、コマンドsudo（superuser do）でプログラムを実行してください。コマンド ``./`` "
"は現在のディレクトリを示している。コマンド全体は、現在のディレクトリで ``BlinkingLed`` を実行することである。"

#: ../1.1.1_blinking_led.rst:214 ../1.1.1_blinking_led.rst:406
msgid "After the code runs, you will see the LED flashing."
msgstr "コードの実行後、LEDが点滅する。"

#: ../1.1.1_blinking_led.rst:218
msgid ""
"If it does not work after running, please refer to :ref:`C code is not "
"working?`"
msgstr "実行後に機能しない場合は、:ref:`C code is not working?` を参照してください。"

#: ../1.1.1_blinking_led.rst:220
msgid ""
"If you want to edit the code file ``1.1.1_BlinkingLed.c``, press ``Ctrl +"
" C`` to stop running the code. Then type the following command to open "
"it:"
msgstr ""
"コードファイル ``1.1.1_BlinkingLed.c`` を編集する場合は、 ``Ctrl + C`` "
"を押してコードの実行を停止する。次に、次のコマンドを入力してそれを開く："

#: ../1.1.1_blinking_led.rst:233
msgid ""
"nano is a text editor tool. The command is used to open the code file "
"``1.1.1_BlinkingLed.c`` by this tool."
msgstr ""
"nanoはテキストエディターツールである。このコマンドは、このツールを通して、コードファイル ``1.1.1_BlinkingLed.c`` "
"を開くために使用される。"

#: ../1.1.1_blinking_led.rst:236
msgid ""
"Press ``Ctrl+X`` to exit. If you have modified the code, there will be a "
"prompt asking whether to save the changes or not. Type in ``Y`` (save) or"
" ``N`` (don’t save). Then press ``Enter`` to exit. Repeat ``Step 3`` and "
"``Step 4`` to see the effect after modifying."
msgstr ""
"``Ctrl + X`` を押して終了する。コードを修正した場合、変更を保存するかどうかを尋ねるプロンプトが表示される。 ``Y`` "
"（保存）または ``N`` （保存しない）を入力する。次に、 ``Enter`` キーを押して終了する。 ``ステップ3`` と "
"``ステップ4`` を繰り返して、修正後の効果を確認する。"

#: ../1.1.1_blinking_led.rst:245 ../1.1.1_blinking_led.rst:431
msgid "**Code**"
msgstr "**コード**"

#: ../1.1.1_blinking_led.rst:247
msgid "The program code is shown as follows:"
msgstr "プログラムコードは次のように表示される："

#: ../1.1.1_blinking_led.rst:275 ../1.1.1_blinking_led.rst:478
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../1.1.1_blinking_led.rst:281
msgid ""
"The hardware drive library is designed for the C language of Raspberry "
"Pi. Adding this library is conducive to the initialization of hardware, "
"and the output of I/O ports, PWM, etc."
msgstr ""
"ハードウェアドライブライブラリは、Raspberry "
"PiのC言語用に設計されている。このライブラリを追加すると、ハードウェアの初期化、およびI/Oポート、PWMなどの出力に役立つ。"

#: ../1.1.1_blinking_led.rst:289
msgid ""
"Standard I/O library. The pintf function used for printing the data "
"displayed on the screen is realized by this library. There are many other"
" performance functions for you to explore."
msgstr "標準I/Oライブラリ。画面に表示されるデータの印刷に使用されるpintf機能は、このライブラリによって実現される。他にも多くのパフォーマンス機能がある。"

#: ../1.1.1_blinking_led.rst:297
msgid ""
"Pin GPIO17 of the T_Extension Board is corresponding to the GPIO0 in "
"wiringPi. Assign GPIO0 to LedPin, LedPin represents GPIO0 in the code "
"later."
msgstr ""
"T_Extension "
"BoardのGPIO17ピンは、wiringPiのGPIO0に対応している。GPIO0をLedPinに割り当て、LedPinは後のコードでGPIO0を表す。"

#: ../1.1.1_blinking_led.rst:307
msgid ""
"This initialises wiringPi and assumes that the calling program is going "
"to be using the wiringPi pin numbering scheme."
msgstr "これにより、wiringPiが初期化され、呼び出しのプログラムがwiringPiピン番号スキームを使用することになると想定される。"

#: ../1.1.1_blinking_led.rst:310
msgid ""
"This function needs to be called with root privileges. When initialize "
"wiring failed, print message to screen. The function “return” is used to "
"jump out of the current function. Using return in main() function will "
"end the program."
msgstr "この関数を呼び出すには、ルート権限が必要である。配線の初期化に失敗すると、画面にメッセージが表示される。関数「return」は現在の関数から飛び出すために使用される。main()関数で関数「return」を使用すると、プログラムが終了する。"

#: ../1.1.1_blinking_led.rst:319
msgid "Set LedPin as output to write value to it."
msgstr "LedPinを出力として設定し、値を書き込む。"

#: ../1.1.1_blinking_led.rst:325
msgid ""
"Set GPIO0 as 0V (low level). Since the cathode of LED is connected to "
"GPIO0, thus the LED will light up if GPIO0 is set low. On the contrary, "
"set GPIO0 as high level, digitalWrite (LedPin, HIGH): LED will go out."
msgstr "GPIO0を0V（低レベル）に設定SURU。LEDの陰極はGPIO0に接続されているため、GPIO0が低レベルに設定されるとLEDが点灯する。それに反して、GPIO0を高レベルに設定すると（digitalWrite（LedPin、HIGH）)：LEDが消灯する。"

#: ../1.1.1_blinking_led.rst:333
#, python-format
msgid ""
"The printf function is a standard library function and its function "
"prototype is in the header file \"stdio.h\". The general form of the call"
" is: printf(\" format control string \", output table columns). The "
"format control string is used to specify the output format, which is "
"divided into format string and non-format string. The format string "
"starts with '%' followed by format characters, such as' %d 'for decimal "
"integer output. Unformatted strings are printed as prototypes. What is "
"used here is a non-format string, followed by \"\\n\" that is a newline "
"character, representing automatic line wrapping after printing a string."
msgstr ""
"printf関数は標準ライブラリ関数であり、その関数プロトタイプはヘッダーファイル「stdio.h」にあります。呼び出しの一般的な形式は次のとおりです。printf（\"フォーマット制御文字列\"、出力テーブルの列）。フォーマット制御文字列は、フォーマット文字列と非フォーマット文字列に分けられる出力フォーマットを指定するために使用されます。フォーマット文字列は「％」で始まり、10進整数出力の場合は「％d」などのフォーマット文字が続きます。"
" フォーマットされていない文字列はプロトタイプとして印刷されます。 "
"ここで使用されているのは、フォーマットされていない文字列であり、その後に改行文字である\"\\ n "
"\"が続きます。これは、文字列を印刷した後の自動行折り返しを表します。"

#: ../1.1.1_blinking_led.rst:347
msgid "Delay (500) keeps the current HIGH or LOW state for 500ms."
msgstr "Delay (500) は、現在のHIGHまたはLOW状態を500ms維持する。"

#: ../1.1.1_blinking_led.rst:349
msgid ""
"This is a function that suspends the program for a period of time. And "
"the speed of the program is determined by our hardware. Here we turn on "
"or off the LED. If there is no delay function, the program will run the "
"whole program very fast and continuously loop. So we need the delay "
"function to help us write and debug the program."
msgstr "これは、プログラムを一定期間中断する機能である。また、プログラムの速度はハードウェアによって決まる。ここで、LEDをオンまたはオフにする。遅延機能がない場合、プログラムはプログラム全体を非常に高速で実行し、継続的にループする。そのため、プログラムの作成とデバッグに役立つ遅延機能が必要である。"

#: ../1.1.1_blinking_led.rst:359
msgid ""
"Usually, it is placed behind the main function, indicating that the "
"function returns 0 on successful execution."
msgstr "通常、メイン関数の後ろに配置され、関数が正常に実行されると0を返すことを示す。"

#: ../1.1.1_blinking_led.rst:363
msgid "For Python Language Users"
msgstr "Python言語ユーザー向け"

#: ../1.1.1_blinking_led.rst:365
msgid "**Step 2:** Go to the folder of the code and run it."
msgstr "**ステップ2:** コードのフォルダーに入り、それを実行する。"

#: ../1.1.1_blinking_led.rst:369
msgid ""
"Find 1.1.1_BlinkingLed.py and double click it to open. Now you're in the "
"file."
msgstr "1.1.1_BlinkingLed.pyを見つけて、ダブルクリックして開く。今、ファイルに入った。"

#: ../1.1.1_blinking_led.rst:372
msgid ""
"Click **Run** ->\\ **Run Module** in the window and the following "
"contents will appear."
msgstr "ウィンドウで **Run** ->\\ **Run Module** をクリックすると、次の内容が表示される。"

#: ../1.1.1_blinking_led.rst:375
msgid ""
"To stop it from running, just click the X button on the top right to "
"close it and then you'll back to the code. If you modify the code, before"
" clicking **Run Module (F5)** you need to save it first. Then you can see"
" the results."
msgstr ""
"実行を停止するには、右上の「X」ボタンをクリックして閉じるだけで、コードに戻る。コードを変更する場合は、**Run Module (F5)** "
"をクリックする前に、まず保存しなければならない。その後、結果を確認できる。"

#: ../1.1.1_blinking_led.rst:380
msgid "If you log into the Raspberry Pi remotely, type in the command:"
msgstr "Raspberry Piにリモートでログインする場合、次のコマンドを入力する："

#: ../1.1.1_blinking_led.rst:391
msgid "Change directory to the path of the code in this experiment via ``cd``."
msgstr "``cd`` を使用して、この実験のコードのパスにディレクトリを変更できる。"

#: ../1.1.1_blinking_led.rst:393
msgid "**Step 3:** Run the code"
msgstr "**ステップ3:** コードを実行する"

#: ../1.1.1_blinking_led.rst:404
msgid "Here sudo - superuser do, and python means to run the file by Python."
msgstr "ここではsudo-superuser doとpythonは、Pythonでファイルを実行することを意味する。"

#: ../1.1.1_blinking_led.rst:408
msgid ""
"**Step 4:** If you want to edit the code file 1.1.1_BlinkingLed.py, press"
" ``Ctrl + C`` to stop running the code. Then type the following command "
"to open 1.1.1_BlinkingLed.py:"
msgstr ""
"**ステップ4:** コードファイル1.1.1_BlinkingLed.pyを編集する場合は、 ``Ctrl + C`` "
"を押してコードの実行を停止してください。それから次のコマンドを入力して1.1.1_BlinkingLed.pyを開く："

#: ../1.1.1_blinking_led.rst:421
msgid ""
"nano is a text editor tool. The command is used to open the code file "
"1.1.1_BlinkingLed.py by this tool."
msgstr "nanoはテキストエディターツールである。このツールは、コマンドを使用してコードファイル1.1.1_BlinkingLed.pyを開く。"

#: ../1.1.1_blinking_led.rst:424
msgid ""
"Press ``Ctrl+X`` to exit. If you have modified the code, there will be a "
"prompt asking whether to save the changes or not. Type in ``Y`` (save) or"
" ``N`` (don’t save)."
msgstr ""
"``Ctrl + X`` を押して終了する。コードを修正した場合、変更を保存するかどうかを尋ねるプロンプトが表示される。 ``Y`` "
"（保存）または ``N`` （保存しない）を入力する。"

#: ../1.1.1_blinking_led.rst:428
msgid ""
"Then press ``Enter`` to exit. Type in nano 1.1.1_BlinkingLed.py again to "
"see the effect after the change."
msgstr ""
"次に、 ``Enter`` を押して終了する。変更後の効果を確認するには、nano "
"1.1.1_BlinkingLed.pyをもう一度入力してください。"

#: ../1.1.1_blinking_led.rst:435
msgid ""
"You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, "
"you need to go to  source code path like ``davinci-kit-for-raspberry-"
"pi/python``."
msgstr ""
"以下のコードを **変更/リセット/コピー/実行/停止** できます。 ただし、その前に、 ``davinci-kit-for-raspberry-pi/python`` のようなソースコードパスに移動する必要があります。"

#: ../1.1.1_blinking_led.rst:484
msgid ""
"When the system detects this, it will search the installation path of "
"python in the env setting, then call the corresponding interpreter to "
"complete the operation. It’s to prevent the user not installing the "
"python onto the /usr/bin default path."
msgstr "システムがこれを検出すると、env設定でpythonの実装パスを検索し、対応するインタープリターを呼び出して操作を完了させる。その目的は、ユーザーがPythonを/usr/binのデフォルトパスに実装することを防止することである。"

#: ../1.1.1_blinking_led.rst:493
msgid ""
"In this way, import the RPi.GPIO library, then define a variable, GPIO to"
" replace RPI.GPIO in the following code."
msgstr "この方法で、RPi.GPIOライブラリをインポートし、変数GPIOを定義して、次のコードでRPI.GPIOを置き換える。"

#: ../1.1.1_blinking_led.rst:500
msgid "Import time package, for time delay function in the following program."
msgstr "次のプログラムの時間遅延機能を行うために、時間パッケージをインポートしなければならない。"

#: ../1.1.1_blinking_led.rst:506
msgid "LED connects to the GPIO17 of the T-shape extension board, namely, BCM 17."
msgstr "LEDはT字型拡張ボードのGPIO17、つまりBCM 17に接続している。"

#: ../1.1.1_blinking_led.rst:515
msgid "Set LedPin's mode to output, and initial level to High (3.3v)."
msgstr "LedPinのモードを出力に設定し、初期レベルを高（3.3v）に設定する。"

#: ../1.1.1_blinking_led.rst:517
msgid ""
"There are two ways of numbering the IO pins on a Raspberry Pi within "
"RPi.GPIO: BOARD numbers and BCM numbers. In our lessons, what we use is "
"BCM numbers. You need to set up every channel you are using as an input "
"or an output."
msgstr ""
"RPi.GPIO内のRaspberry "
"PiのIOピンに番号を付けるには、BOARDとBCM二つの番号付与方法がある。レッスンでは、使用しているのはBCM番号である。入力または出力として使用しているチャンネルをすべて設定する必要がある。"

#: ../1.1.1_blinking_led.rst:526
msgid ""
"Set GPIO17(BCM17) as 0V (low level). Since the cathode of LED is "
"connected to GPIO17, thus the LED will light up."
msgstr "GPIO17（BCM17）を0V（低レベル）に設定する。LEDのカソードはGPIO17に接続されているため、LEDが点灯する。"

#: ../1.1.1_blinking_led.rst:533
msgid ""
"Delay for 0.5 second. Here, the statement is delay function in C "
"language, the unit is second."
msgstr "0.5秒の遅延。ここで、ステートメントはC言語の遅延機能に似ており、単位は秒である。"

#: ../1.1.1_blinking_led.rst:540
msgid ""
"Define a destroy function for clean up everything after the script "
"finished."
msgstr "スクリプトの終了後にすべてを消去する破棄関数を定義する。"

#: ../1.1.1_blinking_led.rst:553
msgid ""
"This is the general running structure of the code. When the program "
"starts to run, it initializes the pin by running the setup(), and then "
"runs the code in the main() function to set the pin to high and low "
"levels. When 'Ctrl+C' is pressed, the program, destroy() will be  "
"executed."
msgstr ""
"これは、コードの一般的な実行構造である。プログラムの実行が開始されると、setup()を実行してピンを初期化し、main()関数でコードを実行してピンを高レベルと低レベルに設定する。「Ctrl"
" + C」を押すと、プログラムdestroy()が実行される。"

#: ../1.1.1_blinking_led.rst:560
msgid "Phenomenon Picture"
msgstr "現象画像"

#~ msgid ""
#~ "If it does not work after running,"
#~ " please refer to :ref:`C code is "
#~ "not working?`."
#~ msgstr ""

