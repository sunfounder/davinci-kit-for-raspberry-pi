.. note::

    Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts.

    **Why Join?**

    - **Expert Support**: Solve post-sale issues and technical challenges with help from our community and team.
    - **Learn & Share**: Exchange tips and tutorials to enhance your skills.
    - **Exclusive Previews**: Get early access to new product announcements and sneak peeks.
    - **Special Discounts**: Enjoy exclusive discounts on our newest products.
    - **Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions.

    ðŸ‘‰ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!

3.1.14 GAMEâ€“ Not Not
=======================

Introduction
--------------------

In this lesson, we will make an interesting game device, and we call it \"Not Not\".

During the game, the dot matrix will refresh an arrow randomly. What you need to do is to press the button in the opposite direction of the arrow within a limited time. If the time is up, or if the button in the same direction as the arrow is pressed, you are out.

This game can really practice your reverseÂ thinking, and now shall we have a try?

Components
---------------

.. image:: img/list_GAME_Not_Not.png
    :align: center

Schematic Diagram
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO20       Pin 38   28       20
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: img/Schematic_three_one14.png
   :align: center

Experimental Procedures
-----------------------------

**Step 1:** Build the circuit.

.. image:: img/image280.png
    :width: 800


**Step 2:** Go to the folder of code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.14/

**Step 3**: Compile.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.14_GAME_NotNot.c -lwiringPi

**Step 4**: Run.

.. raw:: html

   <run></run>

.. code-block::

     sudo ./a.out

After the program starts, a left or right arrow will be refreshed at
random on the dot matrix. What you need to do is to press the buttonÂ in
the opposite direction of the arrow within a limited time. Then
\"**âˆš**\" appears on the dot matrix. If the time is up, or if the
button in the same direction as the arrow is pressed, you are out and
the dot matrix displays \"x\". You can also add 2 new buttons or replace
them with Joystick keys for up, down, left and rightâ€” 4 directions to
increase the difficulty of the game.

.. note::

    If it does not work after running, or there is an error prompt: \"wiringPi.h: No such file or directory\", please refer to :ref:`C code is not working?`.


**Code Explanation**

Based on **1.1.6 LED Dot Matrix**, this lesson adds **2** buttons to
make an amusing game device. So, if you are not very familiar with the
dot matrix, please refer to :ref:`1.1.6 LED Dot Matrix`.

The whole program process is as below:

1. Randomly select an arrow direction and generate **timer 1**.

2. Display the arrow image on the dot matrix.

3. Judge the button input. If the button is pressed or **timer 1**
   reminds timeâ€™s up, judgement starts.

4. Display the image on the basis of a judging result; meanwhile,
   generate **timer 2**.

5. Rerun **step 1** when **timer 2** reminds timeâ€™s up.

.. code-block:: c

    structÂ GLYPH{
    Â Â Â Â charÂ *word;
    Â Â Â Â unsignedÂ charÂ code[8];
    };

    structÂ GLYPHÂ arrow[2]=
    {
    Â Â Â Â {"right",{0xFF,0xEF,0xDF,0x81,0xDF,0xEF,0xFF,0xFF}},
    Â Â Â Â //Â {"down",{0xFF,0xEF,0xC7,0xAB,0xEF,0xEF,0xEF,0xFF}},
    Â Â Â Â //Â {"up",{0xFF,0xEF,0xEF,0xEF,0xAB,0xC7,0xEF,0xFF}},Â Â Â Â 
    Â Â Â Â {"left",{0xFF,0xF7,0xFB,0x81,0xFB,0xF7,0xFF,0xFF}}
    };

    structÂ GLYPHÂ check[2]=
    {
    Â Â Â Â {"wrong",{0xFF,0xBB,0xD7,0xEF,0xD7,0xBB,0xFF,0xFF}},
    Â Â Â Â {"right",{0xFF,0xFF,0xF7,0xEB,0xDF,0xBF,0xFF,0xFF}}
    };

GLYPH structure works like a dictionary: the **word** attribute
corresponds to the **key** on the dictionary; the **code** attribute
corresponds to the **value**.

Here, code is used to store an array for dot matrix to display images
(an 8x8 bit array).

Here, the array **arrow** can be used to display the arrow pattern in
up, down, left and right directions on the LED dot matrix.

Now **down** and **up** are commented and uncomment them if needed.

The array **check** is used to display these two images: \"**Ã—**\" and
\"**âˆš**\".

.. code-block:: c

    charÂ *lookup(charÂ *key,structÂ GLYPHÂ *glyph,intÂ length){
    Â Â Â Â forÂ (intÂ i=0;i<length;i++)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â if(strcmp(glyph[i].word,key)==0){
    Â Â Â Â Â Â Â Â Â Â Â Â returnÂ glyph[i].code;
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }Â Â Â Â 
    }

The function **lookup()** works by \"checking the dictionary\". Define a
**key,** search the same words as **key** in the structure **GLYPH
\*glyph** and return the corresponding informationâ€” \"**code**\" of
the certain word.

The function **Strcmp()** is used to compare the identity of two
character strings **glyph[i].word** and **key**; if the identity is
judged, return **glyph[i].code** ( as shown).

.. code-block:: c

    voidÂ display(charÂ *glyphCode){
    Â Â Â Â for(intÂ i;i<8;i++){
    Â Â Â Â Â Â Â Â hc595_in(glyphCode[i]);
    Â Â Â Â Â Â Â Â hc595_in(0x80>>i);
    Â Â Â Â Â Â Â Â hc595_out();
    Â Â Â Â }
    }

Display the specified pattern on the dot matrix.

.. code-block:: c

    voidÂ createGlyph(){
    Â Â Â Â srand(time(NULL));
    Â Â Â Â intÂ i=rand()%(sizeof(arrow)/sizeof(arrow[0]));
    Â Â Â Â waypoint=arrow[i].word;
    Â Â Â Â stage="PLAY";
    Â Â Â Â alarm(2);
    }

The function **createGlyph()** is used to randomly select a direction
(the word attribute of an element in the array **arrow[]:**
\"**left**\", \"**right**\"... ). Set the stage as \"PLAY\" and start
a 2-second alarm clock function.

**srand(time(NULL)):** Initializes random seeds that are from the system
clock.

**(sizeof(arrow)/sizeof(arrow[0]))ï¼š** Get the length of the array, the
outcome is 2.

**rand()%2:** The remainder is **0** or **1,** gotten from dividing a
generated random number byÂ 2.

**waypoint=arrow[i].word:** The outcome should be \"right\" or \"left\".

.. code-block:: c

    voidÂ checkPoint(charÂ *inputKey){
    Â Â Â Â alarm(0)==0;
    Â Â Â Â if(inputKey==waypoint||inputKey=="empty")
    Â Â Â Â {
    Â Â Â Â Â Â Â Â waypoint="wrong";
    Â Â Â Â }
    Â Â Â Â else{
    Â Â Â Â Â Â Â Â waypoint="right";
    Â Â Â Â }
    Â Â Â Â stage="CHECK";
    Â Â Â Â alarm(1);
    }

checkPoint() is used to check the button input; if the button is not
pressed or the button in the same direction as the arrow is pressed, the
outcome of the waypoint is wrong and \"**x**\" appears on the dot
matrix. Otherwise, the waypoint is right and dot matrix displays
\"**âˆš**\". Here the **stage** is **CHECK,** and there can be set a
1-second alarm clock function.

alarm() is also called \"alarm clock\", in which a timer can be set, and
it sends **SIGALRM** signals to the progress when the defined time is
up.

.. code-block:: c

    voidÂ getKey(){
    Â Â Â Â ifÂ (digitalRead(AButtonPin)==1&&digitalRead(BButtonPin)==0)
    Â Â Â Â {checkPoint("right");}
    Â Â Â Â elseÂ ifÂ (digitalRead(AButtonPin)==0&&digitalRead(BButtonPin)==1)
    Â Â Â Â {checkPoint("left");}
    }

getKey() reads the states of the these two buttons; if the right button
is pressed, the parameter of the function checkPoint() is **right** and
if the left button is pressed, the parameter is **left**.

.. code-block:: c

    voidÂ timer(){
    Â Â Â Â ifÂ (stage=="PLAY"){
    Â Â Â Â Â Â Â Â checkPoint("empty");
    Â Â Â Â }
    Â Â Â Â elseÂ if(stage=="CHECK"){
    Â Â Â Â Â Â Â Â createGlyph();
    Â Â Â Â }
    }

Previously, timer() was called when set as the alarm() timeâ€™s up. Then
under the \"PLAY\" mode, checkPoint() is to be called to judge the
outcome. If the program is set to \"CHECK\" mode, the function
createGlyph() should be called to select new patterns.

.. code-block:: c

    voidÂ main(){
    Â Â Â Â setup();
    Â Â Â Â signal(SIGALRM,timer);
    Â Â Â Â createGlyph();
    Â Â Â Â charÂ *codeÂ =Â NULL;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â ifÂ (stageÂ ==Â "PLAY")
    Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â code=lookup(waypoint,arrow,sizeof(arrow)/sizeof(arrow[0]));
    Â Â Â Â Â Â Â Â Â Â Â Â display(code);
    Â Â Â Â Â Â Â Â Â Â Â Â getKey();
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â elseÂ if(stageÂ ==Â "CHECK")
    Â Â Â Â Â Â Â Â {
    Â Â Â Â Â Â Â Â Â Â Â Â codeÂ =Â lookup(waypoint,check,sizeof(check)/sizeof(check[0]));
    Â Â Â Â Â Â Â Â Â Â Â Â display(code);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â }
    }

The working of the function signal(SIGALRM,timer): calling the timer()
function when a SIGALRM signal (generated by the alarm clock function
alarm()) is received.

When the program starts, call createGlyph() one time at first and then
start the loop.

In the loop: under PLAY mode, the dot matrix displays arrow patterns and
check the button state; if under CHECK mode, what is displayed is
\"**x**\" or \"**âˆš**\".
