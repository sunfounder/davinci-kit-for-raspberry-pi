.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. √önete a otros apasionados y profundiza en el uso de Raspberry Pi, Arduino y ESP32.

    **¬øPor qu√© unirte?**

    - **Soporte de expertos**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _py_pi5_fan:

3.1.4 Ventilador Inteligente
===============================

Introducci√≥n
---------------

En este proyecto, usaremos motores, botones y termistores para construir 
un ventilador inteligente manual + autom√°tico, con velocidad de viento ajustable.

Componentes necesarios
---------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../python_pi5/img/4.1.10_smart_fan_list.png
    :width: 800
    :align: center

.. Es definitivamente conveniente comprar un kit completo; aqu√≠ tienes el enlace:

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Nombre
..         - ELEMENTOS EN ESTE KIT
..         - ENLACE
..     *   - Kit Raphael
..         - 337
..         - |link_Raphael_kit|

.. Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - INTRODUCCI√ìN AL COMPONENTE
..         - ENLACE DE COMPRA

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`power_module`
..         - \-
..     *   - :ref:`thermistor`
..         - |link_thermistor_buy|
..     *   - :ref:`l293d`
..         - \-
..     *   - :ref:`adc0834`
..         - \-
..     *   - :ref:`button`
..         - |link_button_buy|
..     *   - :ref:`motor`
..         - |link_motor_buy|

Diagrama esquem√°tico
------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.10_smart_fan_schematic.png
   :align: center

Procedimientos experimentales
-----------------------------

**Paso 1:** Construye el circuito.

.. image:: ../python_pi5/img/4.1.10_smart_fan_circuit.png

.. note::
    El m√≥dulo de alimentaci√≥n puede aplicar una bater√≠a de 9V con el 
    conector para bater√≠a de 9V incluido en el kit. Inserta el puente 
    del m√≥dulo de alimentaci√≥n en la franja de bus de 5V de la protoboard.

.. image:: ../python_pi5/img/4.1.10_smart_fan_battery.jpeg
   :align: center

**Paso 2:** Accede a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**Paso 3:** Ejecuta el programa.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 3.1.4_SmartFan.py

Al ejecutar el c√≥digo, enciende el ventilador presionando el bot√≥n. 
Cada vez que lo presionas, la velocidad se ajusta en un nivel hacia 
arriba o hacia abajo. Existen **5** niveles de velocidad: **0~4**. 
Cuando se ajusta al **nivel 4** y presionas el bot√≥n, el ventilador 
deja de funcionar con una velocidad de viento de **0**.

Una vez que la temperatura sube o baja m√°s de 2‚ÑÉ, la velocidad 
autom√°ticamente sube o baja un nivel.

C√≥digo
--------

.. note::
    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes, debes ir a la ruta del c√≥digo fuente, como ``raphael-kit/python-pi5``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from gpiozero import Motor, Button
   from time import sleep
   import ADC0834
   import math

   # Inicializa los pines GPIO para el bot√≥n y el control del motor
   BtnPin = Button(22)
   motor = Motor(forward=5, backward=6, enable=13)

   # Configura el m√≥dulo ADC0834 para la detecci√≥n de temperatura
   ADC0834.setup()

   # Variables para rastrear el nivel de velocidad del motor y las temperaturas
   level = 0
   currentTemp = 0
   markTemp = 0

   def temperature():
       """
       Reads and calculates the current temperature from the sensor.
       Returns:
           float: The current temperature in Celsius.
       """
       # Lee el valor anal√≥gico del m√≥dulo ADC0834
       analogVal = ADC0834.getResult()
       # Convierte el valor anal√≥gico a voltaje y luego a resistencia
       Vr = 5 * float(analogVal) / 255
       Rt = 10000 * Vr / (5 - Vr)
       # Calcula la temperatura en Celsius
       temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))
       Cel = temp - 273.15
       return Cel

   def motor_run(level):
       """
       Adjusts the motor speed based on the specified level.
       Args:
           level (int): Desired motor speed level.
       Returns:
           int: Adjusted motor speed level.
       """
       # Detiene el motor si el nivel es 0
       if level == 0:
           motor.stop()
           return 0
       # Limita el nivel a 4 para la velocidad m√°xima
       if level >= 4:
           level = 4
       # Ajusta la velocidad del motor
       motor.forward(speed=float(level / 4))
       return level

   def changeLevel():
       """
       Changes the motor speed level when the button is pressed and updates the reference temperature.
       """
       global level, currentTemp, markTemp
       print("Button pressed")
       # Cicla a trav√©s de los niveles 0-4
       level = (level + 1) % 5
       # Actualiza la temperatura de referencia
       markTemp = currentTemp

   # Asigna la funci√≥n changeLevel al evento de presionar el bot√≥n
   BtnPin.when_pressed = changeLevel

   def main():
       """
       Main function to continuously monitor and respond to temperature changes.
       """
       global level, currentTemp, markTemp
       # Establece la temperatura de referencia inicial
       markTemp = temperature()
       while True:
           # Lee continuamente la temperatura actual
           currentTemp = temperature()
           # Ajusta el nivel del motor seg√∫n la diferencia de temperatura
           if level != 0:
               if currentTemp - markTemp <= -2:
                   level -= 1
                   markTemp = currentTemp
               elif currentTemp - markTemp >= 2:
                   if level < 4:
                       level += 1
                   markTemp = currentTemp
           # Ejecuta el motor en el nivel ajustado
           level = motor_run(level)

   # Ejecuta la funci√≥n principal y maneja la interrupci√≥n por teclado
   try:
       main()
   except KeyboardInterrupt:
       # Detiene el motor cuando el script es interrumpido
       motor.stop()



Explicaci√≥n del C√≥digo
---------------------------

#. Importa clases para gestionar un motor y un bot√≥n, adem√°s de la funci√≥n ``sleep`` para introducir pausas. Tambi√©n importa la biblioteca ADC0834 para la detecci√≥n de temperatura y la biblioteca ``math`` para c√°lculos matem√°ticos.

   .. code-block:: python

       #!/usr/bin/env python3

       from gpiozero import Motor, Button
       from time import sleep
       import ADC0834
       import math

#. Configura el bot√≥n en el pin GPIO 22 y el motor con pines GPIO espec√≠ficos para su control. Inicializa el m√≥dulo ADC0834 para la medici√≥n de temperatura y define variables para monitorear el nivel de velocidad del motor y las temperaturas.

   .. code-block:: python

       # Inicializa los pines GPIO para el bot√≥n y el control del motor
       BtnPin = Button(22)
       motor = Motor(forward=5, backward=6, enable=13)

       # Inicializa el m√≥dulo ADC0834 para la detecci√≥n de temperatura
       ADC0834.setup()

       # Inicializa variables para rastrear el nivel de velocidad del motor y las temperaturas
       level = 0
       currentTemp = 0
       markTemp = 0

#. Define una funci√≥n para leer y calcular la temperatura desde el sensor, convirtiendo la lectura a grados Celsius.

   .. code-block:: python

       def temperature():
           """
           Reads and calculates the current temperature from the sensor.
           Returns:
               float: The current temperature in Celsius.
           """
           # Lee el valor anal√≥gico del m√≥dulo ADC0834
           analogVal = ADC0834.getResult()
           # Convierte el valor anal√≥gico a voltaje y luego a resistencia
           Vr = 5 * float(analogVal) / 255
           Rt = 10000 * Vr / (5 - Vr)
           # Calcula la temperatura en Celsius
           temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))
           Cel = temp - 273.15
           return Cel

#. Introduce una funci√≥n para ajustar la velocidad del motor de acuerdo con el nivel especificado.

   .. code-block:: python

       def motor_run(level):
           """
           Adjusts the motor speed based on the specified level.
           Args:
               level (int): Desired motor speed level.
           Returns:
               int: Adjusted motor speed level.
           """
           # Detiene el motor si el nivel es 0
           if level == 0:
               motor.stop()
               return 0
           # Limita el nivel a 4 para la velocidad m√°xima
           if level >= 4:
               level = 4
           # Ajusta la velocidad del motor
           motor.forward(speed=float(level / 4))
           return level

#. Implementa una funci√≥n para cambiar manualmente el nivel de velocidad del motor usando un bot√≥n y asocia esta funci√≥n al evento de pulsaci√≥n del bot√≥n.

   .. code-block:: python

       def changeLevel():
           """
           Changes the motor speed level when the button is pressed and updates the reference temperature.
           """
           global level, currentTemp, markTemp
           print("Button pressed")
           # Cicla a trav√©s de los niveles 0-4
           level = (level + 1) % 5
           # Actualiza la temperatura de referencia
           markTemp = currentTemp

       # Asigna la funci√≥n changeLevel al evento de pulsar el bot√≥n
       BtnPin.when_pressed = changeLevel

#. La funci√≥n principal, dise√±ada para ajustar continuamente la velocidad del motor en respuesta a las fluctuaciones de temperatura, monitorea constantemente los cambios.

   .. code-block:: python

       def main():
           """
           Main function to continuously monitor and respond to temperature changes.
           """
           global level, currentTemp, markTemp
           # Establece la temperatura de referencia inicial
           markTemp = temperature()
           while True:
               # Lee continuamente la temperatura actual
               currentTemp = temperature()
               # Ajusta el nivel del motor seg√∫n la diferencia de temperatura
               if level != 0:
                   if currentTemp - markTemp <= -2:
                       level -= 1
                       markTemp = currentTemp
                   elif currentTemp - markTemp >= 2:
                       if level < 4:
                           level += 1
                       markTemp = currentTemp
               # Ejecuta el motor en el nivel ajustado
               level = motor_run(level)

#. Ejecuta la funci√≥n principal y asegura que el motor se detenga si el script es interrumpido.

   .. code-block:: python

       # Ejecuta la funci√≥n principal y maneja la interrupci√≥n por teclado
       try:
           main()
       except KeyboardInterrupt:
           # Detiene el motor cuando el script es interrumpido
           motor.stop()


