.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Rejoignez d'autres amateurs pour explorer plus en profondeur le monde du Raspberry Pi, de l'Arduino et de l'ESP32.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† nos concours et promotions saisonni√®res.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Syst√®me de pr√©sence
========================

Dans ce projet, nous utilisons le module RFID MFRC522 et Cloud4RPi pour cr√©er un syst√®me de gestion des pr√©sences. Vous pouvez consulter les informations de pr√©sence sur Cloud4RPi ou ouvrir le fichier .csv local pour voir les enregistrements de pr√©sence.

En raison du d√©lai de transmission des donn√©es sur le r√©seau, le projet ne permet de pointer que lorsque la LED verte est allum√©e, et les donn√©es sont t√©l√©charg√©es lorsque la LED rouge est allum√©e.

Proc√©dures exp√©rimentales
----------------------------

Construisez le circuit.

.. image:: img/rfid1.png
    :align: center

Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/cloud4rpi-raspberrypi-python
    sudo nano attendance_system.py

Trouvez la ligne ci-dessous et renseignez le bon jeton d'appareil.

.. code-block:: python

    DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'

Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 attendance_system.py

Acc√©dez √† Cloud4RPi, ajoutez un nouveau panneau de contr√¥le nomm√© **project5** et ajoutez 2 widgets (text et graphique) via le bouton **Add widget**.

.. image:: img/rfid2.png
    :align: center

Une fois ajout√©s, vous pouvez consulter les enregistrements de pointage pour diff√©rentes p√©riodes sur le widget Graphique (quand la valeur de LED ON est True, cela signifie qu‚Äôune personne a point√©), et voir le nombre de personnes ayant point√© sur le widget Texte.

Vous pouvez √©galement trouver le fichier ``.csv`` avec la date sous le chemin ``~/cloud4rpi-raspberrypi-python``.

.. image:: img/rfid3.png
    :align: center

Ouvrez-le avec la commande suivante.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo nano attendance_sheet.2021.06.28.csv

De cette fa√ßon, vous pouvez lire les enregistrements de pointage pour diff√©rentes p√©riodes. √Ä gauche se trouve l'ID de diff√©rents modules RFID MFRC522, et √† droite, l'heure du pointage.

.. image:: img/rfid4.png
    :align: center

.. note::

    Si le nom de la personne est d√©j√† √©crit dans le module RFID MFRC522 et que l'ID est remplac√© par le texte dans le code (ce qui sera expliqu√© plus tard), la feuille de pr√©sence enregistrera alors le nom de chaque personne au lieu de l'ID de la carte.

Explication du code
-----------------------

.. code-block:: python

    RedPin = 13
    GreenPin = 11

    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(RedPin, GPIO.OUT, initial=GPIO.HIGH)
    GPIO.setup(GreenPin, GPIO.OUT, initial=GPIO.HIGH)

Configurer 2 LEDs en sortie et d√©finir la valeur initiale √† haute.

.. code-block:: python

    def get_time():
        time.time()
        year = str(time.strftime('%Y',time.localtime(time.time())))
        month = str(time.strftime('%m',time.localtime(time.time())))
        day = str(time.strftime('%d',time.localtime(time.time())))
        hour = str(time.strftime('%H',time.localtime(time.time())))
        minute = str(time.strftime('%M',time.localtime(time.time())))
        second = str(time.strftime('%S',time.localtime(time.time())))
        present_time = year + '.' + month + '.' + day + '.' + hour + '.' + minute + '.' + second
        present_date = year + '.' + month + '.' + day
        return present_date, present_time

Utilisez la fonction ``get_time()`` pour obtenir l'horodatage actuel et renvoyer deux valeurs. ``present_date`` correspond √† la date et ``present_time`` √† l'heure pr√©cise.

.. code-block:: python

    attendance = False
    GPIO.output(GreenPin, GPIO.LOW)
    GPIO.output(RedPin, GPIO.HIGH)
	print("Reading...Please place the card...")
    id, text = reader.read()
	print("ID: %s\nText: %s" % (id,text))
    GPIO.output(RedPin, GPIO.LOW)
    GPIO.output(GreenPin, GPIO.HIGH)

Tout d'abord, nous d√©finissons ``attendance`` sur False, ce qui signifie qu'aucune personne n'a point√©.

Puis, nous passons GreenPin √† un niveau bas pour l'allumer, et RedPin √† un niveau haut pour l'√©teindre, indiquant que le syst√®me de pr√©sence fonctionne normalement.

Lorsque quelqu'un pointe, l'ID et le texte de la carte seront imprim√©s. Si la LED rouge est allum√©e et que la LED verte est √©teinte, cela signifie que le pointage a r√©ussi et le r√©sultat est envoy√© √† Cloud4RPi.

Pendant cette p√©riode, le syst√®me de pr√©sence est en √©tat de veille jusqu'au d√©but du prochain cycle (LED verte allum√©e).

.. code-block:: python

    if not id in attendance_list:
        attendance = True
        attendance_list.append(id)
        present_date, present_time = get_time()
        attendance_statistics[id] = present_time
        with open('attendance_sheet.' + present_date + '.csv', 'w') as f:
            [f.write('{0}  {1}\n'.format(key, value)) for key, value in attendance_statistics.items()]

Tout d'abord, v√©rifiez si l'identifiant est d√©j√† pr√©sent dans ``attendance_list`` gr√¢ce √† une instruction ``if``. Si ce n'est pas le cas, cela signifie que le pointage est valide, et l'identifiant est ajout√© √† ``attendance_list``. Ensuite, r√©cup√©rez l'horodatage actuel et utilisez l'identifiant comme cl√© du dictionnaire ``attendance_statistics`` et ``present_time`` comme valeur correspondante. Ainsi, le dictionnaire ``attendance_statistics`` stocke l'heure de pointage de l'identifiant actuel.

Enfin, √©crivez le contenu du dictionnaire ``attendance_statistics`` dans un fichier .csv, nomm√© ``'attendance_sheet.' + present_date + '.csv'``, afin de conserver les informations de pr√©sence de mani√®re chronologique.

.. note::

    Si vous avez pr√©alablement enregistr√© le nom de la personne dans le module RFID MFRC522, remplacez l'``id`` par ``text``, ce qui permettra d'enregistrer le nom de la personne dans la feuille de pr√©sence au lieu de l'identifiant.

.. code-block:: python

    def get_num():
        return len(attendance_list)

Retourne la longueur de la liste ``attendance_list``, c‚Äôest-√†-dire le nombre de personnes ayant point√©.
