.. note::

    Bonjour, bienvenue dans la communautÃ© SunFounder pour les passionnÃ©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profondÃ©ment dans lâ€™univers du Raspberry Pi, Arduino et ESP32 avec dâ€™autres amateurs.

    **Pourquoi nous rejoindre ?**

    - **Support dâ€™experts** : RÃ©solvez vos problÃ¨mes aprÃ¨s-vente et relevez des dÃ©fis techniques avec lâ€™aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre & Partager** : Ã‰changez des astuces et des tutoriels pour amÃ©liorer vos compÃ©tences.
    - **AperÃ§us exclusifs** : AccÃ©dez en avant-premiÃ¨re aux annonces de nouveaux produits et bÃ©nÃ©ficiez dâ€™aperÃ§us exclusifs.
    - **RÃ©ductions spÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez Ã  des promotions spÃ©ciales et Ã  des tirages au sort.

    ðŸ‘‰ PrÃªt Ã  explorer et Ã  crÃ©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous dÃ¨s aujourdâ€™hui !

Metronome
====================

Dans ce projet, nous allons crÃ©er un mÃ©tronome, qui est divisÃ© en 5 niveaux. Plus le niveau est Ã©levÃ©, plus le signal sonore du buzzer est rapide.

.. image:: img/metronome.png

**CÃ¢blage**

.. image:: img/image106.png

.. note::

    Un buzzer actif est utilisÃ© ici, identifiable par un autocollant blanc sur sa surface.

**Code**

.. code-block:: Arduino

    import processing.io.*;

    int level = 0;
    int buzzerPin = 17;
    int levelRange=5;
    Slider mySlider;

    void setup() {
        size(400, 200);
        frameRate(50);
        mySlider = new Slider(width * 0.2,height * 0.4,width * 0.8,height * 0.6,0,levelRange,level);
        GPIO.pinMode(buzzerPin, GPIO.OUTPUT);
    }

    void draw() {

        background(255);
        mySlider.show();
        if(level==0){
            GPIO.digitalWrite(buzzerPin, GPIO.HIGH);
        }else if((frameCount/5) % (levelRange-level+1) ==0){
            GPIO.digitalWrite(buzzerPin, GPIO.LOW);
        }else{
            GPIO.digitalWrite(buzzerPin, GPIO.HIGH);
        }
    }

    void mouseDragged(){
        level = mySlider.dragPoint(mouseX,mouseY);
    }

    class Slider{
        float slotPointAX;
        float slotPointBX;
        float slotPointAY;
        float slotPointBY;
        float linePoint;
        float depth;
        int maxRange;
        int minRange;
        int value;

        Slider(float ax, float ay, float bx, float by, int min, int max, int v){
            slotPointAX = ax;
            slotPointAY = ay;
            slotPointBX = bx;
            slotPointBY = by;
            maxRange = max;
            minRange = min;
            value = v;
            linePoint = slotPointAX;// + map(value, minRange, maxRange, slotPointAX, slotPointBX);
            depth = (slotPointBY - slotPointAY)*0.75;
        }

        void show(){
            rectMode(CORNERS);
            fill(200);
            stroke(255,0,0);
            rect(slotPointAX, slotPointAY, slotPointBX, slotPointBY);
            fill(255,0,0);
            rect(slotPointAX, slotPointAY, linePoint, slotPointBY);
            fill(200);
            textSize(depth);
            text(minRange, slotPointAX, slotPointBY+depth);
            text(maxRange, slotPointBX, slotPointBY+depth);
            text(value, linePoint, slotPointAY);
        }

        int dragPoint(float mx, float my){
            if(mx>=slotPointAX && mx<=slotPointBX && my>=slotPointAY && my<=slotPointBY){
                value = int(map(mx,slotPointAX,slotPointBX,minRange,maxRange));
                linePoint = map(value,minRange,maxRange,slotPointAX,slotPointBX);
            }
            return value;
        }
    }

**Comment Ã§a fonctionne ?**

Ici, nous avons crÃ©Ã© une classe ``Slider`` qui agit comme un **widget**.

.. code-block:: arduino

    Slider(ax, ay, bx, by, min, max, v)

Lors de la dÃ©claration, sept paramÃ¨tres doivent Ãªtre passÃ©s.

Les quatre premiers dÃ©terminent la taille du widget, correspondant aux coordonnÃ©es (x1, y1) du point de dÃ©part en haut Ã  gauche et (x2, y2) du point en bas Ã  droite.

Les trois derniers dÃ©finissent la plage de valeurs (min Ã  max) et la valeur initiale.

La classe dispose de deux mÃ©thodes principales. La premiÃ¨re, ``dragPoint()``, permet de rendre le curseur glissable et de renvoyer la valeur actuelle de la position du curseur.

.. code-block:: arduino

    int dragPoint(float mx, float my){
        if(mx>=slotPointAX && mx<=slotPointBX && my>=slotPointAY && my<=slotPointBY){
            value = int(map(mx,slotPointAX,slotPointBX,minRange,maxRange));
            linePoint = map(value,minRange,maxRange,slotPointAX,slotPointBX);
        }
        return value;
    }

La seconde mÃ©thode, ``show()``, affiche le curseur, tout en indiquant la plage de valeurs et la valeur actuelle.

.. code-block:: arduino

    void show(){
        rectMode(CORNERS);
        fill(200);
        stroke(255,0,0);
        rect(slotPointAX, slotPointAY, slotPointBX, slotPointBY);
        fill(255,0,0);
        rect(slotPointAX, slotPointAY, linePoint, slotPointBY);
        fill(200);
        textSize(depth);
        text(minRange, slotPointAX, slotPointBY+depth);
        text(maxRange, slotPointBX, slotPointBY+depth);
        text(value, linePoint, slotPointAY);
    }

Pour plus d'informations, veuillez consulter la `Processing Reference <https://processing.org/reference/>`_.
