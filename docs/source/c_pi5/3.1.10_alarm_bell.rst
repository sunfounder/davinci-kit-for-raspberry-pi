.. note::

    Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts.

    **Why Join?**

    - **Expert Support**: Solve post-sale issues and technical challenges with help from our community and team.
    - **Learn & Share**: Exchange tips and tutorials to enhance your skills.
    - **Exclusive Previews**: Get early access to new product announcements and sneak peeks.
    - **Special Discounts**: Enjoy exclusive discounts on our newest products.
    - **Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions.

    ðŸ‘‰ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!

3.1.10 Alarm Bell
=====================

Introduction
-----------------

In this course, we will make a manual alarm device. You can replace the
toggle switch with a thermistor or a photosensitive sensor to make a
temperature alarm or a light alarm.

Components
---------------

.. image:: img/list_Alarm_Bell.png
    :align: center

Schematic Diagram
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: img/Schematic_three_one10.png
   :align: center

Experimental Procedures
-----------------------------

**Step 1**: Build the circuit.

.. image:: img/image266.png
   :alt: Alarm Bell_bb
   :width: 800

**Step 2**: Change directory.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.10/

**Step 3**: Compile.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.10_AlarmBell.c -lwiringPi -lpthread

**Step 4**: Run.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

After the program starts, the toggle switch will be toggled to the
right, and the buzzer will give out alarm sounds. At the same time, the
red and green LEDs will flash at a certain frequency.

.. note::

    If it does not work after running, or there is an error prompt: \"wiringPi.h: No such file or directory\", please refer to :ref:`C code is not working?`.


**Code Explanation**

.. code-block:: c

    #includeÂ <pthread.h>

In this code, you'll use a new library, pthread.h, which is a set of
common thread libraries and can realize multithreading. We add the
**-lpthread** parameter at compile time for the independent working of
the LED and the buzzer.

.. code-block:: c

    voidÂ *ledWork(voidÂ *arg){Â Â Â Â Â Â Â 
    Â Â Â Â while(1)Â Â Â Â 
    Â Â Â Â {Â Â Â 
    Â Â Â Â Â Â Â Â if(flag==0){
    Â Â Â Â Â Â Â Â Â Â Â Â pthread_exit(NULL);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â digitalWrite(ALedPin,HIGH);
    Â Â Â Â Â Â Â Â delay(500);
    Â Â Â Â Â Â Â Â digitalWrite(ALedPin,LOW);
    Â Â Â Â Â Â Â Â digitalWrite(BLedPin,HIGH);
    Â Â Â Â Â Â Â Â delay(500);
    Â Â Â Â Â Â Â Â digitalWrite(BLedPin,LOW);
    Â Â Â Â }
    }

The function ledWork() helps to set the working state of these 2 LEDs:
it keeps the green LED lighting up for 0.5s and then turns off;
similarly, keeps the red LED lighting up for 0.5s and then turns off.

.. code-block:: c

    voidÂ *buzzWork(voidÂ *arg){
    Â Â Â Â while(1)
    Â Â Â Â {
    Â Â Â Â Â Â Â Â if(flag==0){
    Â Â Â Â Â Â Â Â Â Â Â Â pthread_exit(NULL);
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â if((note>=800)||(note<=130)){
    Â Â Â Â Â Â Â Â Â Â Â Â pitchÂ =Â -pitch;
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â note=note+pitch;
    Â Â Â Â Â Â Â Â softToneWrite(BeepPin,note);
    Â Â Â Â Â Â Â Â delay(10);
    Â Â Â Â }
    }

The function buzzWork() is used to set the working state of the buzzer.
Here we set the frequency as between 130 and 800, to accumulate or decay
at an interval of 20.

.. code-block:: c

    voidÂ on(){
    Â Â Â Â flagÂ =Â 1;
    Â Â Â Â if(softToneCreate(BeepPin)Â ==Â -1){
    Â Â Â Â Â Â Â Â printf("setupÂ softToneÂ failedÂ !");
    Â Â Â Â Â Â Â Â return;Â 
    Â Â Â Â }Â Â Â Â 
    Â Â Â Â pthread_tÂ tLed;Â Â Â Â Â 
    Â Â Â Â pthread_create(&tLed,NULL,ledWork,NULL);Â Â Â Â 
    Â Â Â Â pthread_tÂ tBuzz;Â Â 
    Â Â Â Â pthread_create(&tBuzz,NULL,buzzWork,NULL);Â Â Â Â Â Â 
    }

In the function on():

1) Define the mark \"flag=1\", indicating the ending of the control
   thread.

2) Create a software-controlled tone pin **BeepPin**.

3) Create two separate threads so that the LED and the buzzer can work
   at the same time.

**pthread_t tLed:** Declare a thread **tLed**.

**pthread_create(&tLed,NULL,ledWork,NULL)ï¼š** Create the thread and its
prototype is as follows:

int pthread_create(pthread_t \*restrict tidp,const pthread_attr_t
\*restrict_attr,void*ï¼ˆ*start_rtn)(void*),void \*restrict arg);

**Return the Value**

If successful, return \"**0**\"ï¼›otherwise, return the **fall number**
\"**-1**\".

**Parameter**

| The first parameter is a pointer to the thread identifier.
| The second one is used to set the thread attribute.
| The third one is the starting address of the thread running function.
| The last one is the one that runs the function.

.. code-block:: c

    voidÂ off(){
    Â Â Â Â flagÂ =Â 0;
    Â Â Â Â softToneStop(BeepPin);
    Â Â Â Â digitalWrite(ALedPin,LOW);
    Â Â Â Â digitalWrite(BLedPin,LOW);
    }


The function Off() defines \"flag=0\" so as to exit the threads
**ledWork** and **BuzzWork** and then turn off the buzzer and the LED.

.. code-block:: c

    intÂ main(){Â Â Â Â Â Â Â 
    Â Â Â Â setup();Â 
    Â Â Â Â intÂ lastStateÂ =Â 0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â intÂ currentStateÂ =Â digitalRead(switchPin);
    Â Â Â Â Â Â Â Â ifÂ ((currentStateÂ ==Â 1)&&(lastState==0)){
    Â Â Â Â Â Â Â Â Â Â Â Â on();
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â elseÂ if((currentStateÂ ==Â 0)&&(lastState==1)){
    Â Â Â Â Â Â Â Â Â Â Â Â off();
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â }
    Â Â Â Â returnÂ 0;
    }

Main() contains the whole process of the program: firstly read the value
of the slide switch; if the toggle switch is toggled to the right (the
reading is 1), the function on() is called, the buzzer is driven to emit
sounds and the the red and the green LEDs blink. Otherwise, the buzzer
and the LED donâ€™t work.
