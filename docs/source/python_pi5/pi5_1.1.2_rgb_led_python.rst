.. note::

    Bonjour et bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 ! Plongez-vous plus profond√©ment dans le monde du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et tirages au sort** : Participez √† des promotions sp√©ciales et √† des cadeaux durant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.1.2_py_pi5:

1.1.2 LED RVB
====================

Introduction
--------------

Dans ce projet, nous allons contr√¥ler une LED RVB pour qu'elle affiche diff√©rentes couleurs.

Composants n√©cessaires
--------------------------

Pour ce projet, nous aurons besoin des composants suivants : 

.. image:: ../python_pi5/img/1.1.2_rgb_led_list.png
    :align: center

.. raw:: html

   <br/>

Sch√©ma de c√¢blage
----------------------

Apr√®s avoir connect√© les broches R, G et B √† une r√©sistance de limitation de courant, connectez-les respectivement aux GPIO17, GPIO18 et GPIO27. La patte la plus longue (GND) de la LED doit √™tre connect√©e √† la masse (GND) du Raspberry Pi. Lorsque les trois broches re√ßoivent des valeurs PWM diff√©rentes, la LED RVB affichera diff√©rentes couleurs.

============ ======== ===
T-Board Name physical BCM
GPIO17       Pin 11   17
GPIO18       Pin 12   18
GPIO27       Pin 13   27
============ ======== ===

.. image:: ../python_pi5/img/1.1.2_rgb_led_schematic.png

Proc√©dure exp√©rimentale
--------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../python_pi5/img/1.1.2_rgbLed_circuit.png

**√âtape 2 :** Ouvrir le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cuter le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.2_rgbLed.py

Apr√®s l'ex√©cution du code, vous verrez que la LED RVB affiche les couleurs 
rouge, verte, bleue, jaune, rose et cyan.

.. warning::

    Si vous recevez un message d'erreur tel que ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. 
    Mais avant cela, vous devez acc√©der au chemin source du code comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, 
    vous pouvez l'ex√©cuter directement pour observer le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import RGBLED
   from time import sleep

   # D√©finir une liste de couleurs pour la LED RVB au format RVB (Rouge, Vert, Bleu).
   # Chaque composant de couleur varie de 0 (√©teint) √† 1 (intensit√© maximale).
   COLORS = [(1, 0, 0), (0, 1, 0), (0.2, 0.1, 1), (1, 1, 0), (1, 0, 1), (0, 1, 1)]

   # Initialiser une LED RVB. Connecter le composant rouge au GPIO 17, le vert au GPIO 18, et le bleu au GPIO 27.
   rgb_led = RGBLED(red=17, green=18, blue=27)

   try:
       # Parcourir en continu les couleurs d√©finies.
       while True:
           for color in COLORS:
               # R√©gler la LED RVB sur la couleur actuelle.
               rgb_led.color = color
               # Afficher la couleur actuelle dans la console.
               print(f"Color set to: {color}")
               # Attendre 1 seconde avant de passer √† la couleur suivante.
               sleep(1)

   except KeyboardInterrupt:
       # G√©rer une interruption clavier (Ctrl+C) pour sortir de la boucle proprement.
       # La gestion des broches GPIO est automatiquement prise en charge par GPIO Zero lors de la fin du script.
       pass


**Explication du code**

#. Cela importe la classe ``RGBLED`` de la biblioth√®que ``gpiozero`` pour contr√¥ler une LED RVB, et la biblioth√®que ``time`` pour g√©rer les pauses dans le code.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import RGBLED
       from time import sleep

       # D√©finir une liste de couleurs pour la LED RVB au format RVB (Rouge, Vert, Bleu).
       # Chaque composant de couleur varie de 0 (√©teint) √† 1 (intensit√© maximale).

#. La liste ``COLORS`` contient des tuples repr√©sentant diff√©rentes couleurs au format RVB. En attribuant des valeurs de modulation de largeur d'impulsion (PWM) diff√©rentes √† chacune des broches R, G et B via l'attribut ``led_rvb.color``, la LED peut produire une vari√©t√© de couleurs. Les valeurs de PWM varient de 0 √† 1, o√π 0 repr√©sente aucune intensit√© (√©teint) et 1 repr√©sente l'intensit√© maximale pour chaque composant de couleur.

#. Par exemple, d√©finir ``rgb_led.color = (1, 0, 0)`` allume la LED en rouge, car cela r√®gle l'intensit√© maximale pour le composant rouge tout en gardant le vert et le bleu √©teints. De m√™me, des combinaisons vari√©es de ces valeurs permettent de cr√©er diff√©rentes couleurs. Cette technique de m√©lange de couleurs par PWM permet de cr√©er un large √©ventail de couleurs sur la LED RVB.

   .. code-block:: python    
       
       COLORS = [(1, 0, 0), (0, 1, 0), (0.2, 0.1, 1), (1, 1, 0), (1, 0, 1), (0, 1, 1)]

#. Une LED RVB est initialis√©e avec ses composants rouge, vert et bleu connect√©s respectivement aux broches GPIO 17, 18 et 27.

   .. code-block:: python

       # Initialize an RGB LED. Connect the red component to GPIO 17, green to GPIO 18, and blue to GPIO 27.
       rgb_led = RGBLED(red=17, green=18, blue=27)

#. La boucle ``while True:`` parcourt en continu les couleurs d√©finies dans ``COULEURS``. Pour chaque couleur, ``rgb_led.color = color`` r√®gle la LED sur cette couleur, et ``sleep(1)`` met le programme en pause pendant 1 seconde. 

   .. code-block:: python

       try:
           # Parcourir en continu les couleurs d√©finies.
           while True:
               for color in COLORS:
                   # R√©gler la LED RVB sur la couleur actuelle.
                   rgb_led.color = color
                   # Afficher la couleur actuelle dans la console.
                   print(f"Color set to: {color}")
                   # Attendre 1 seconde avant de passer √† la couleur suivante.
                   sleep(1)

#. Cette section g√®re proprement une ``KeyboardInterrupt`` (comme l'appui sur Ctrl+C). L'instruction ``pass`` est utilis√©e ici comme un espace r√©serv√© pour indiquer qu'aucune action sp√©cifique n'est n√©cessaire lors de l'interruption, car GPIO Zero g√®re automatiquement le nettoyage des broches GPIO.

   .. code-block:: python

       except KeyboardInterrupt:
           # G√©rer une interruption clavier (Ctrl+C) pour sortir de la boucle proprement.
           # La gestion des broches GPIO est automatiquement prise en charge par GPIO Zero lors de la fin du script.
           pass
