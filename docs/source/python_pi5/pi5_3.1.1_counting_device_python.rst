.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _py_pi5_counting_device:

3.1.1 Z√§hleinrichtung
=======================

Einf√ºhrung
-----------------

In diesem Projekt erstellen wir ein Z√§hlsystem mit Ziffernanzeige, bestehend aus einem PIR-Sensor und einer 4-stelligen Segmentanzeige. Sobald der PIR-Sensor erkennt, dass jemand vorbeigeht, wird die Zahl auf der 4-stelligen Segmentanzeige um 1 erh√∂ht. Dieser Z√§hler kann verwendet werden, um die Anzahl der Personen zu z√§hlen, die einen Durchgang passieren.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/4.1.7_counting_device_list_1.png
    :align: center

.. image:: ../python_pi5/img/4.1.7_counting_device_list_2.png
    :align: center



Schaltplan
----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.7_counting_device_schematic.png
   :align: center

Experimentelle Verfahren
-----------------------------

**Schritt 1**: Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/4.1.7_counting_device_circuit.png


**Schritt 2**: Wechseln Sie zum Codeverzeichnis.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3**: F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.1_CountingDevice_zero.py

Nachdem der Code ausgef√ºhrt wurde, wird die Zahl auf der 4-stelligen Segmentanzeige um 1 erh√∂ht, wenn der PIR-Sensor jemanden passieren sieht.

An dem PIR-Modul gibt es zwei Potentiometer: eines zur Einstellung der Empfindlichkeit und das andere zur Einstellung der Erkennungsdistanz. Um eine optimale Funktion des PIR-Moduls zu gew√§hrleisten, sollten Sie beide im Uhrzeigersinn bis zum Anschlag drehen.

.. image:: ../python_pi5/img/4.1.7_PIR_TTE.png
    :width: 400
    :align: center

.. warning::

    Wenn die Fehlermeldung ``RuntimeError: Cannot determine SOC peripheral base address`` angezeigt wird, lesen Sie bitte :ref:`faq_soc`

**Code**

.. note::
    Sie k√∂nnen den unten stehenden Code **modifizieren, zur√ºcksetzen, kopieren, ausf√ºhren oder stoppen**. Bevor Sie das tun, gehen Sie bitte zum Quellcodepfad wie ``raphael-kit/python-pi5``. Nachdem Sie den Code ge√§ndert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um das Ergebnis zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import OutputDevice, MotionSensor

   # Initialisieren des PIR-Bewegungssensors an GPIO 26
   pir = MotionSensor(26)

   # Initialisieren der Schieberegisterpins
   SDI = OutputDevice(24)    # Serieller Dateneingang
   RCLK = OutputDevice(23)   # Register-Taktsignal
   SRCLK = OutputDevice(18)  # Schieberegister-Taktsignal

   # Initialisieren der 7-Segment-Anzeigepins
   placePin = [OutputDevice(pin) for pin in (10, 22, 27, 17)]

   # Definieren der Zifferncodes f√ºr die 7-Segment-Anzeige
   number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

   # Z√§hler f√ºr die angezeigte Zahl
   counter = 0

   def clearDisplay():
       # L√∂scht die Anzeige, indem alle Segmente ausgeschaltet werden
       for _ in range(8):
           SDI.on()
           SRCLK.on()
           SRCLK.off()
       RCLK.on()
       RCLK.off()

   def hc595_shift(data):
       # Verschiebt Daten in das 74HC595-Schieberegister
       for i in range(8):
           SDI.value = 0x80 & (data << i)
           SRCLK.on()
           SRCLK.off()
       RCLK.on()
       RCLK.off()

   def pickDigit(digit):
       # Aktiviert eine spezifische Ziffer der 7-Segment-Anzeige
       for pin in placePin:
           pin.off()
       placePin[digit].on()

   def display():
       # Aktualisiert die Anzeige mit dem aktuellen Z√§hlerstand
       global counter
       clearDisplay()
       pickDigit(0)
       hc595_shift(number[counter % 10])

       clearDisplay()
       pickDigit(1)
       hc595_shift(number[counter % 100//10])

       clearDisplay()
       pickDigit(2)
       hc595_shift(number[counter % 1000//100])

       clearDisplay()
       pickDigit(3)
       hc595_shift(number[counter % 10000//1000])

   def loop():
       # Hauptprogrammschleife zur Aktualisierung der Anzeige und √úberpr√ºfung auf Bewegung
       global counter
       currentState = 0
       lastState = 0
       while True:
           display()
           currentState = 1 if pir.motion_detected else 0
           if currentState == 1 and lastState == 0:
               counter += 1
           lastState = currentState

   try:
       loop()
   except KeyboardInterrupt:
       # Schaltet alle Pins aus, wenn das Skript unterbrochen wird
       SDI.off()
       SRCLK.off()
       RCLK.off()
       pass


**Code-Erkl√§rung**

#. Diese Zeile importiert die Klassen ``OutputDevice`` und ``MotionSensor`` aus der Bibliothek ``gpiozero``. ``OutputDevice`` kann eine LED, ein Motor oder jedes Ger√§t sein, das Sie als Ausgabe steuern m√∂chten. Der ``MotionSensor`` ist typischerweise ein PIR-Sensor (Passiver Infrarotsensor) zur Bewegungserkennung.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import OutputDevice, MotionSensor

#. Initialisiert den PIR-Bewegungssensor, der an den GPIO-Pin 26 angeschlossen ist.

   .. code-block:: python

       # Initialisieren des PIR-Bewegungssensors an GPIO 26
       pir = MotionSensor(26)

#. Initialisiert GPIO-Pins, die mit dem seriellen Dateneingang (SDI), dem Register-Taktsignal (RCLK) und dem Schieberegister-Taktsignal (SRCLK) des Schieberegisters verbunden sind.

   .. code-block:: python

       # Initialisieren der Schieberegisterpins
       SDI = OutputDevice(24)    # Serieller Dateneingang
       RCLK = OutputDevice(23)   # Register-Taktsignal
       SRCLK = OutputDevice(18)  # Schieberegister-Taktsignal

#. Initialisiert die Pins f√ºr jede Ziffer der 7-Segment-Anzeige und definiert die Bin√§rcodes f√ºr die Anzeige der Zahlen 0-9.

   .. code-block:: python

       # Initialisieren der 7-Segment-Anzeigepins
       placePin = [OutputDevice(pin) for pin in (10, 22, 27, 17)]

       # Definieren der Zifferncodes f√ºr die 7-Segment-Anzeige
       number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

#. L√∂scht die 7-Segment-Anzeige, indem alle Segmente ausgeschaltet werden, bevor die n√§chste Ziffer angezeigt wird.

   .. code-block:: python

       def clearDisplay():
           # L√∂scht die Anzeige, indem alle Segmente ausgeschaltet werden
           for _ in range(8):
               SDI.on()
               SRCLK.on()
               SRCLK.off()
           RCLK.on()
           RCLK.off()

#. Verschiebt ein Byte Daten in das 74HC595-Schieberegister und steuert damit die Anzeigesegmente.

   .. code-block:: python

       def hc595_shift(data):
           # Verschiebt Daten in das 74HC595-Schieberegister
           for i in range(8):
               SDI.value = 0x80 & (data << i)
               SRCLK.on()
               SRCLK.off()
           RCLK.on()
           RCLK.off()

#. W√§hlt aus, welche Ziffer der 7-Segment-Anzeige aktiviert werden soll. Jede Ziffer wird von einem separaten GPIO-Pin gesteuert.

   .. code-block:: python

       def pickDigit(digit):
           # Aktiviert eine spezifische Ziffer der 7-Segment-Anzeige
           for pin in placePin:
               pin.off()
           placePin[digit].on()

#. Initiiert die Anzeige f√ºr die Einerziffer zuerst, gefolgt von der Aktivierung der Anzeige f√ºr die Zehnerziffer. Anschlie√üend werden die Anzeigen f√ºr die Hunderter- und Tausenderziffern in dieser Reihenfolge aktiviert. Diese schnelle Abfolge von Aktivierungen erzeugt die Illusion einer kontinuierlichen vierstelligen Anzeige.

   .. code-block:: python

       def display():
           # Aktualisiert die Anzeige mit dem aktuellen Z√§hlerstand
           global counter
           clearDisplay()
           pickDigit(0)
           hc595_shift(number[counter % 10])

           clearDisplay()
           pickDigit(1)
           hc595_shift(number[counter % 100//10])

           clearDisplay()
           pickDigit(2)
           hc595_shift(number[counter % 1000//100])

           clearDisplay()
           pickDigit(3)
           hc595_shift(number[counter % 10000//1000])

#. Definiert die Hauptprogrammschleife, in der die Anzeige kontinuierlich aktualisiert wird und der Zustand des PIR-Sensors √ºberpr√ºft wird. Wenn eine Bewegung erkannt wird, wird der Z√§hler erh√∂ht.

   .. code-block:: python

       def loop():
           # Hauptprogrammschleife zur Aktualisierung der Anzeige und √úberpr√ºfung auf Bewegung
           global counter
           currentState = 0
           lastState = 0
           while True:
               display()
               currentState = 1 if pir.motion_detected else 0
               if currentState == 1 und lastState == 0:
                   counter += 1
               lastState = currentState

#. F√ºhrt die Hauptprogrammschleife aus und stellt sicher, dass das Skript mit einem Tastaturbefehl (Ctrl+C) unterbrochen werden kann, wobei alle Pins f√ºr einen sauberen Ausstieg ausgeschaltet werden.

   .. code-block:: python

       try:
           loop()
       except KeyboardInterrupt:
           # Schaltet alle Pins aus, wenn das Skript unterbrochen wird
           SDI.off()
           SRCLK.off()
           RCLK.off()
           pass
