.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

1.3.4 Relais
==============

Einf√ºhrung
------------------

In dieser Lektion lernen wir, ein Relais zu verwenden. Es ist eine der am h√§ufigsten verwendeten Komponenten im automatischen Steuerungssystem. Wenn die Spannung, der Strom, die Temperatur, der Druck usw. den vorgegebenen Wert erreichen, √ºberschreiten oder unterschreiten, wird das Relais den Stromkreis anschlie√üen oder unterbrechen, um das Ger√§t zu steuern und zu sch√ºtzen.

Komponenten
----------------

.. image:: media/list_1.3.4.png


Prinzip
---------

**Diode**

Eine Diode ist eine zweipolige Komponente in der Elektronik mit einem unidirektionalen Stromfluss. 
Es bietet einen geringen Widerstand in Richtung des Stromflusses und einen hohen Widerstand in der entgegengesetzten Richtung. 
Dioden werden meistens verwendet, um Sch√§den an Bauteilen zu vermeiden, 
insbesondere aufgrund elektromotorischer Kraft in Schaltkreisen, 
die normalerweise polarisiert sind.

.. image:: media/image344.png


Die beiden Anschl√ºsse einer Diode sind polarisiert, wobei das positive Ende als Anode und das negative Ende als Kathode bezeichnet wird. 
Die Kathode besteht √ºblicherweise aus Silber oder hat ein Farbband. 
Die Steuerung der Stromflussrichtung ist eines der Hauptmerkmale von Dioden - der Strom in einer Diode flie√üt von Anode zu Kathode. 
Das Verhalten einer Diode √§hnelt dem Verhalten eines R√ºckschlagventils. Eine der wichtigsten Eigenschaften einer Diode ist die nichtlineare Stromspannung. 
Wenn eine h√∂here Spannung an die Anode angeschlossen ist, flie√üt Strom von Anode zu Kathode, 
und der Prozess wird als Vorw√§rtsvorspannung bezeichnet. 
Wenn jedoch die h√∂here Spannung an die Kathode angeschlossen ist, 
leitet die Diode keine Elektrizit√§t, und der Prozess wird als Sperrvorspannung bezeichnet.

**Relais**

Wie wir vielleicht wissen, ist Relais ein Ger√§t, das verwendet wird, um eine Verbindung zwischen zwei oder mehr Punkten oder Ger√§ten als Reaktion auf das angelegte Eingangssignal herzustellen. Mit anderen Worten, Relais stellen eine Isolation zwischen der Steuerung und dem Ger√§t bereit, da Ger√§te sowohl mit Wechselstrom als auch mit Gleichstrom arbeiten k√∂nnen. Sie empfangen jedoch Signale von einem Mikrocontroller, der mit Gleichstrom arbeitet, weshalb ein Relais erforderlich ist, um die L√ºcke zu schlie√üen. Das Relais ist √§u√üerst n√ºtzlich, wenn Sie eine gro√üe Menge an Strom oder Spannung mit einem kleinen elektrischen Signal steuern m√ºssen.

Jedes Relais besteht aus 5 Teilen:

**Elektromagnet** - Er besteht aus einem Eisenkern, der durch eine Drahtspule gewickelt ist. Wenn Elektrizit√§t durchgelassen wird, wird sie magnetisch. Daher wird es Elektromagnet genannt.

**Anker** - Der bewegliche Magnetstreifen wird als Anker bezeichnet. Wenn Strom durch sie flie√üt, wird die Spule erregt, wodurch ein Magnetfeld erzeugt wird, das verwendet wird, um die normalerweise offenen (N/O) oder normalerweise geschlossenen (N/C) Punkte zu erzeugen oder zu brechen. Der Anker kann sowohl mit Gleichstrom (DC) als auch mit Wechselstrom (AC) bewegt werden.

**Feder** - Wenn am Elektromagneten keine Str√∂me durch die Spule flie√üen, zieht die Feder den Anker weg, sodass der Stromkreis nicht abgeschlossen werden kann.

Satz elektrischer **Kontakte** - Es gibt zwei Kontaktpunkte:

* Normalerweise offen - verbunden, wenn das Relais aktiviert ist, und getrennt, wenn es inaktiv ist.

* Normalerweise geschlossen - nicht angeschlossen, wenn das Relais aktiviert ist, und angeschlossen, wenn es inaktiv ist. aktiviert ist,

**Molded frame** - Die Relais sind zum Schutz mit Kunststoff bedeckt.

**Funktionieren des Relais**

Das Funktionsprinzip des Relais ist einfach. Wenn das Relais mit Strom versorgt wird, flie√üen Str√∂me durch die Steuerspule. Infolgedessen beginnt der Elektromagnet zu erregen. Dann wird der Anker von der Spule angezogen, bewegliche Kontakt zusammezihen, wodurch eine Verbindung mit den normalerweise offenen Kontakten hergestellt wird. Der Stromkreis mit der Last wird also erregt. Ein Unterbrechen des Stromkreises w√§re dann ein √§hnlicher Fall, da der bewegliche Kontakt unter der Kraft der Feder zu den normalerweise geschlossenen Kontakten hochgezogen wird. Auf diese Weise kann das Ein- und Ausschalten des Relais den Zustand eines Lastkreises steuern.

.. image:: media/image142.jpeg


Schematische Darstellung
----------------------------

.. image:: media/image345.png


Experimentelle Verfahren
-----------------------------------

Schritt 1: Bauen Sie die Schaltung auf.

.. image:: media/image144.png
    :width: 800

    

F√ºr Benutzer in C-Sprache
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: √ñffnen Sie die Kodedatei.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.3.4

Schritt 3: Kompilieren Sie den Code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.4_Relay.c -lwiringPi


Schritt 4: F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Nachdem die Kode ausgef√ºhrt wurde, leuchtet die LED auf. 
Au√üerdem k√∂nnen Sie ein Ticktock h√∂ren, 
das durch das Unterbrechen des normalerweise geschlossenen Kontakts und das Schlie√üen des normalerweise offenen Kontakts verursacht wird.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #define RelayPin 0

    int main(void){
        if(wiringPiSetup() == -1){ //when initialize wiring failed, print message to screen
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(RelayPin, OUTPUT);   //set GPIO17(GPIO0) output
        while(1){
            // Tick
            printf("Relay Open......\n");
            delay(100);
            digitalWrite(RelayPin, LOW);
            delay(1000);
            // Tock
            printf("......Relay Close\n");
            delay(100);
            digitalWrite(RelayPin, HIGH);
            delay(1000);
        }

        return 0;
    }

**Code Erkl√§rung**

.. code-block:: c

    digitalWrite(RelayPin, LOW);

Stellen Sie den I/O -Anschluss auf einen niedrigen Niveau (0V) ein, 
damit der Transistor nicht erregt und die Spule nicht mit Strom versorgt wird. 
Es gibt keine elektromagnetische Kraft, daher √∂ffnet sich das Relais und die LED leuchtet nicht.

.. code-block:: c

    digitalWrite(RelayPin, HIGH);

Stellen Sie den I/O -Anschluss auf einen hohen Niveau (5V) ein, 
um den Transistor mit Strom zu versorgen. 
Die Spule des Relais wird mit Strom versorgt und erzeugt elektromagnetische Kraft. 
Das Relais schlie√üt, die LED leuchtet auf.

F√ºr Python-Benutzer
^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: √ñffnen Sie die Codedatei.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python


Schritt 3: Ausf√ºhren.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.4_Relay.py

W√§hrend der Code l√§uft, leuchtet die LED. 
Au√üerdem k√∂nnen Sie ein Ticktock h√∂ren, 
das durch das Unterbrechen des normalerweise geschlossenen Kontakts und das Schlie√üen des normalerweise offenen Kontakts verursacht wird.

**Code**

.. note::

    Sie k√∂nnen den folgenden Code **√Ñndern/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen** . Zuvor m√ºssen Sie jedoch zu einem Quellcodepfad wie ``davinci-kit-for-raspberry-pi/python`` gehen.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    # Set GPIO17 as control pin
    relayPin = 17

    # Define a setup function for some setup
    def setup():
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set relayPin's mode to output,
        # and initial level to High(3.3v)
        GPIO.setup(relayPin, GPIO.OUT, initial=GPIO.HIGH)

    # Define a main function for main process
    def main():
        while True:
            print ('Relay open...')
            # Tick
            GPIO.output(relayPin, GPIO.LOW)
            time.sleep(1)
            print ('...Relay close')
            # Tock
            GPIO.output(relayPin, GPIO.HIGH)
            time.sleep(1)

    # Define a destroy function for clean up everything after
    # the script finished
    def destroy():
        # Turn off LED
        GPIO.output(relayPin, GPIO.HIGH)
        # Release resource
        GPIO.cleanup()                    

    # If run this script directly, do:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # When 'Ctrl+C' is pressed, the child program
        # destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()

**Code Erkl√§rung**

.. code-block:: python

    GPIO.output(relayPin, GPIO.LOW)

Stellen Sie die Pins des Transistors auf einen niedrigen Niveau ein, damit das Relais ge√∂ffnet wird. Die LED leuchtet nicht.

.. code-block:: python

    time.sleep(1)

1 Sekunde warten.

.. code-block:: python

    GPIO.output(relayPin, GPIO.HIGH)

Stellen Sie die Pins des Transistors auf einen niedrigen Niveau ein, um das Relais zu bet√§tigen. Die LED leuchtet auf.

Ph√§nomen Bild
------------------

.. image:: media/image145.jpeg