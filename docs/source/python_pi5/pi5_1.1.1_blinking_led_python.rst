.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _1.1.1_py_pi5:

1.1.1 Blinkende LED
=========================

Einf√ºhrung
-----------------

In diesem Projekt lernen wir, wie man eine LED blinken l√§sst, indem wir sie programmieren.
Durch Ihre Einstellungen kann Ihre LED eine Reihe von interessanten
Ph√§nomenen erzeugen. Jetzt legen Sie los.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten:

.. image:: ../python_pi5/img/1.1.1_blinking_led_list.png
    :width: 800
    :align: center


Schaltplan
---------------------

In diesem Experiment verbinden wir den GPIO-Pin 17 des Raspberry Pi mit der Anode (langer Pin) der LED, dann die Kathode (kurzer Pin) der LED mit einem Widerstand und schlie√ülich das andere Ende des Widerstands mit dem GND-Pin des Raspberry Pi. Um die LED einzuschalten, m√ºssen wir GPIO17 auf hoch (3,3 V) setzen. Dieses Ph√§nomen k√∂nnen wir durch Programmierung erreichen.

.. note::

    **Pin11** bezieht sich auf den 11. Pin des Raspberry Pi von links nach rechts, und die entsprechenden **BCM**-Pinnummern sind in der folgenden Tabelle angegeben.

Unter den mit der Python-Sprache zusammenh√§ngenden Inhalten ist BCM 17 die Nummer 17 in der
Spalte BCM der folgenden Tabelle. Gleichzeitig entspricht dies dem
11. Pin am Raspberry Pi, Pin 11.

============ ======== ===
T-Board Name physical BCM
GPIO17       Pin 11   17
============ ======== ===

.. image:: ../python_pi5/img/1.1.1_blinking_led_schematic.png
    :width: 800
    :align: center

Experimentelle Verfahren
-----------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/1.1.1_blinking_led_circuit.png
    :width: 800
    :align: center

**Schritt 2:** Gehen Sie zum Ordner des Codes und f√ºhren Sie ihn aus.

1. Wenn Sie einen Bildschirm verwenden, wird empfohlen, die folgenden Schritte zu befolgen.

Finden Sie `1.1.1_BlinkingLed_zero.py` und doppelklicken Sie darauf, um es zu √∂ffnen. Jetzt befinden Sie sich in der
Datei.

Klicken Sie auf **Run** ->\ **Run Module** im Fenster, und die folgenden
Inhalte erscheinen.

Um das Ausf√ºhren zu stoppen, klicken Sie einfach auf das X oben rechts,
um es zu schlie√üen und dann gelangen Sie zur√ºck zum Code. Wenn Sie den Code √§ndern,
m√ºssen Sie ihn zuerst speichern, bevor Sie auf **Run Module (F5)** klicken. Dann k√∂nnen
Sie die Ergebnisse sehen.

2. Wenn Sie sich remote in den Raspberry Pi einloggen, geben Sie den Befehl ein:

.. raw:: html

   <run></run>

.. code-block::

   cd ~/davinci-kit-for-raspberry-pi/python-pi5

.. note::
    Wechseln Sie √ºber ``cd`` in das Verzeichnis des Codes in diesem Experiment.

**Schritt 3:** F√ºhren Sie den Code aus

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 1.1.1_BlinkingLed_zero.py

.. note::
    Hier bedeutet sudo - superuser do, und python bedeutet, die Datei mit Python auszuf√ºhren.

Nachdem der Code ausgef√ºhrt wurde, sehen Sie, wie die LED blinkt.

**Schritt 4:** Wenn Sie die Code-Datei `1.1.1_BlinkingLed_zero.py` bearbeiten m√∂chten,
dr√ºcken Sie ``Ctrl + C``, um die Ausf√ºhrung des Codes zu stoppen. Geben Sie dann den folgenden
Befehl ein, um `1.1.1_BlinkingLed_zero.py` zu √∂ffnen:

.. raw:: html

   <run></run>

.. code-block::

   nano 1.1.1_BlinkingLed_zero.py

.. note::
    nano ist ein Texteditor-Tool. Der Befehl wird verwendet, um die
    Code-Datei `1.1.1_BlinkingLed_zero.py` mit diesem Tool zu √∂ffnen.

Dr√ºcken Sie ``Ctrl+X``, um zu beenden. Wenn Sie den Code ge√§ndert haben, erscheint eine
Aufforderung, ob die √Ñnderungen gespeichert werden sollen oder nicht. Geben Sie ``Y`` (speichern)
oder ``N`` (nicht speichern) ein.

Dr√ºcken Sie dann ``Enter``, um zu beenden. Geben Sie nano `1.1.1_BlinkingLed_zero.py` erneut ein, um
die Auswirkungen nach der √Ñnderung zu sehen.

**Code**

Das Folgende ist der Programmkode:

.. note::

   Sie k√∂nnen den unten stehenden Code **Modifizieren/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen**. Aber bevor Sie das tun, m√ºssen Sie zum Quellcode-Pfad wie ``davinci-kit-for-raspberry-pi/python-pi5`` gehen. Nachdem Sie den Code ge√§ndert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um die Auswirkungen zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   from time import sleep

   # Initialisieren Sie eine LED, die mit GPIO-Pin 17 verbunden ist, unter Verwendung der GPIO Zero-Bibliothek.
   led = LED(17)

   try:
      # Beginnen Sie eine unendliche Schleife, um den LED-Zustand zu wechseln.
      while True:
         # Schalten Sie die LED ein und geben Sie eine Nachricht auf der Konsole aus.
         led.on()
         print('...LED EIN')

         # Warten Sie 0,5 Sekunden mit eingeschalteter LED.
         sleep(0.5)

         # Schalten Sie die LED aus und geben Sie eine Nachricht auf der Konsole aus.
         led.off()
         print('LED AUS...')

         # Warten Sie 0,5 Sekunden mit ausgeschalteter LED.
         sleep(0.5)

   except KeyboardInterrupt:
      # Behandeln Sie eine Tastaturunterbrechung (Ctrl+C) auf elegante Weise, indem Sie die Schleife beenden.
      # GPIO Zero k√ºmmert sich beim Beenden automatisch um die Bereinigung der GPIO-Einstellungen.
      pass


**Code-Erkl√§rung**

#. Wenn das System dies erkennt, sucht es den Installationspfad von python in der env-Einstellung und ruft den entsprechenden Interpreter auf, um die Operation abzuschlie√üen. Es dient dazu, zu verhindern, dass der Benutzer python nicht auf den Standardpfad ``/usr/bin`` installiert hat.

   .. code-block:: python

       #!/usr/bin/env python3

#. Diese Zeilen importieren die notwendigen Klassen und Funktionen. ``LED`` von ``gpiozero`` zur LED-Steuerung und ``sleep`` von ``time`` f√ºr Verz√∂gerungen.

   .. code-block:: python

       from gpiozero import LED
       from time import sleep

#. Diese Zeile erstellt ein LED-Objekt, das mit dem GPIO-Pin 17 verbunden ist.

   .. code-block:: python

       # Initialisieren Sie eine LED, die mit GPIO-Pin 17 verbunden ist, unter Verwendung der GPIO Zero-Bibliothek.
       led = LED(17)

#. Eine unendliche Schleife wird mit ``while True:`` gestartet. Innerhalb der Schleife wird die LED eingeschaltet (``led.on()``) und eine Nachricht wird ausgegeben. Das Programm pausiert dann f√ºr 0,5 Sekunden (``sleep(0.5)``). Danach wird die LED ausgeschaltet (``led.off()``), eine weitere Nachricht wird ausgegeben, und das Programm pausiert erneut f√ºr 0,5 Sekunden.

   .. code-block:: python

       try:
           # Beginnen Sie eine unendliche Schleife, um den LED-Zustand zu wechseln.
           while True:
               # Schalten Sie die LED ein und geben Sie eine Nachricht auf der Konsole aus.
               led.on()
               print('...LED EIN')

               # Warten Sie 0,5 Sekunden mit eingeschalteter LED.
               sleep(0.5)

               # Schalten Sie die LED aus und geben Sie eine Nachricht auf der Konsole aus.
               led.off()
               print('LED AUS...')

               # Warten Sie 0,5 Sekunden mit ausgeschalteter LED.
               sleep(0.5)

#. Der ``except``-Block f√§ngt eine ``KeyboardInterrupt``-Ausnahme (wie das Dr√ºcken von Ctrl+C) ab und beendet die Schleife sicher. Das ``pass``-Statement wird hier als Platzhalter verwendet, um anzuzeigen, dass bei einer Unterbrechung keine spezifische Aktion unternommen wird.

   .. code-block:: python

       except KeyboardInterrupt:
           # Behandeln Sie eine Tastaturunterbrechung (Ctrl+C) auf elegante Weise, indem Sie die Schleife beenden.
           # GPIO Zero k√ºmmert sich beim Beenden automatisch um die Bereinigung der GPIO-Einstellungen.
           pass
