.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 aux c√¥t√©s d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions et cadeaux festifs** : Participez √† des tirages au sort et √† des offres promotionnelles sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.2.1_py_pi5:

1.2.1 Buzzer actif
======================

Introduction
----------------

Dans ce projet, nous allons apprendre √† activer un buzzer actif √† l'aide d'un transistor PNP.

Composants requis
---------------------

Dans ce projet, nous aurons besoin des composants suivants :

.. image:: ../python_pi5/img/1.2.1_active_buzzer_list.png

.. raw:: html

   <br/>


Sch√©ma de c√¢blage
----------------------

Dans cette exp√©rience, un buzzer actif, un transistor PNP et une r√©sistance de 1kŒ© 
sont utilis√©s entre la base du transistor et le GPIO pour prot√©ger le transistor. 
Lorsque le GPIO17 du Raspberry Pi fournit un niveau haut (3,3 V), le transistor 
devient conducteur en raison de la saturation de courant, et le buzzer √©met un son. 
En revanche, lorsque le niveau bas est appliqu√© au GPIO, le transistor se coupe et le 
buzzer s'arr√™te.

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ===

.. image:: ../python_pi5/img/1.2.1_active_buzzer_schematic.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit. (Le buzzer actif poss√®de une √©tiquette blanche sur la surface et un fond noir.)

.. image:: ../python_pi5/img/1.2.1_ActiveBuzzer_circuit.png

**√âtape 2 :** Ouvrez le fichier de code.
.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le script.
.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.2.1_ActiveBuzzer.py

Lorsque le code s'ex√©cute, le buzzer √©met un bip.

.. warning::

    Si le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address`` appara√Æt, consultez :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification du code, vous pouvez l'ex√©cuter directement pour observer le r√©sultat.
.. raw:: html

    <run></run>
.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Buzzer
   from time import sleep

   # Initialiser un objet Buzzer sur le GPIO 17
   buzzer = Buzzer(17)

   try:
       while True:
           # Activer le buzzer
           print('Buzzer On')
           buzzer.on()
           sleep(0.1)  # Laisser le buzzer activ√© pendant 0,1 seconde

           # D√©sactiver le buzzer
           print('Buzzer Off')
           buzzer.off()
           sleep(0.1)  # Laisser le buzzer d√©sactiv√© pendant 0,1 seconde

   except KeyboardInterrupt:
       # G√©rer une interruption clavier (Ctrl+C) pour arr√™ter proprement le script
       pass


**Explication du code**

1. Ces lignes importent la classe ``Buzzer`` de la biblioth√®que ``gpiozero`` ainsi que la fonction ``sleep`` du module ``time``.

   .. code-block:: python
       
       #!/usr/bin/env python3
       from gpiozero import Buzzer
       from time import sleep

2. Cette ligne cr√©e un objet ``Buzzer`` connect√© au GPIO 17 du Raspberry Pi.
    
   .. code-block:: python
       
       # Initialiser un objet Buzzer sur le GPIO 17
       buzzer = Buzzer(17)

3. Dans une boucle infinie (``while True``), le buzzer est activ√© et d√©sactiv√© toutes les 0,1 secondes. Les instructions ``print`` fournissent un retour d'information dans la console pour chaque action.
      
   .. code-block:: python
       
       try:
           while True:
               # Activer le buzzer
               print('Buzzer On')
               buzzer.on()
               sleep(0.1)  # Laisser le buzzer activ√© pendant 0,1 seconde

               # D√©sactiver le buzzer
               print('Buzzer Off')
               buzzer.off()
               sleep(0.1)  # Laisser le buzzer d√©sactiv√© pendant 0,1 seconde

4. Ce segment assure que le programme peut √™tre interrompu proprement √† l'aide d'une interruption clavier (Ctrl+C) sans g√©n√©rer d'erreurs.
      
   .. code-block:: python
       
       except KeyboardInterrupt:
       # G√©rer une interruption clavier (Ctrl+C) pour arr√™ter proprement le script
       pass
      
