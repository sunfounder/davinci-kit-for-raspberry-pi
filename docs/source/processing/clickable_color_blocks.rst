.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales lors des p√©riodes de f√™te.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Blocs de Couleurs Cliquables
================================

Nous avons d√©j√† essay√© de dessiner un point cliquable pour contr√¥ler la LED, alors allons plus loin et dessinons 3 carr√©s color√©s pour ajuster les couleurs RVB !

.. image:: img/colorful_square.png

**C√¢blage**

.. image:: img/image61.png

**Code**

.. code-block:: arduino

    import processing.io.*; // utiliser la biblioth√®que GPIO

    int[] pins = { 17, 18, 27 };

    void setup() {
        for (int i = 0; i < pins.length; i++) {
            GPIO.pinMode(pins[i], GPIO.OUTPUT);
        }
        size(300, 100);
        background(255);
    }

    void draw() {
        fill(255, 0, 0);
        rect(0, 0, width/3, height);

        fill(0,255,0);
        rect(width/3, 0, 2*width/3, height);

        fill(0,0,255);
        rect(2*width/3, 0, width, height);
    }

    void mouseClicked() {
        for (int i = 0; i < pins.length; i++) {
            GPIO.digitalWrite(pins[i],GPIO.LOW);
        }
        if (mouseX<width/3){
            GPIO.digitalWrite(pins[0],GPIO.HIGH);
        }else if (mouseX>width/3&&mouseX<2*width/3){
            GPIO.digitalWrite(pins[1],GPIO.HIGH);
        }else if (mouseX>2*width/3){
            GPIO.digitalWrite(pins[2],GPIO.HIGH);
        }        
    }

**Comment √ßa fonctionne ?**

Ce projet est tr√®s similaire au :ref:`Clickable Dot`, √† la diff√©rence qu'il affine les conditions de d√©termination de l'√©v√©nement de clic de la souris.

On dessine d'abord trois blocs de couleur dans la fonction ``draw()``, puis on d√©termine quel bloc de couleur a √©t√© cliqu√© en se basant sur la valeur de ``mouseX`` (la coordonn√©e X de la souris). Ensuite, on allume la couleur correspondante de la LED RVB.

**Et si on allait plus loin ?**

En utilisant l'addition des couleurs, nous pouvons faire afficher sept couleurs diff√©rentes √† la LED RVB : ajouter du rouge au vert donne du jaune ; combiner les trois couleurs primaires donne du blanc. Maintenant, c'est √† vous d'essayer !

Pour plus d'informations, veuillez consulter la `Processing Reference <https://processing.org/reference/>`_.
