.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d‚Äôun acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de remises exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.2.2 Thermistance
====================

Introduction
---------------

Tout comme la photor√©sistance peut d√©tecter la lumi√®re, la thermistance 
est un composant √©lectronique sensible √† la temp√©rature, qui peut √™tre 
utilis√© pour r√©aliser des fonctions de contr√¥le de temp√©rature, telles 
que la cr√©ation d'une alarme de surchauffe.

Composants
-------------

.. image:: ../img/list_2.2.2_thermistor.png



Sch√©ma de c√¢blage
--------------------

.. image:: ../img/image323.png


.. image:: ../img/image324.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image202.png

**√âtape 2 :** Acc√©dez au r√©pertoire contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node thermistor.js

Lorsque le code s‚Äôex√©cute, la thermistance d√©tecte la temp√©rature ambiante, 
qui sera affich√©e sur l‚Äô√©cran une fois les calculs effectu√©s par le programme.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    exports.ADC0834 = ADC0834;

    const adc = new ADC0834(17, 18, 27);

    setInterval(() => {
      adc.read(0).then((value) => {
        var Vr = 5 * value / 255;
        var Rt = 10000 * Vr / (5 - Vr);
        var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
        var cel = (temp - 273.15).toFixed(2);
        var Fah = (cel * 1.8 + 32).toFixed(2);
        console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 1000);

**Explication du code**

.. code-block:: js

    setInterval(() => {
      adc.read(0).then((value) => {
        var Vr = 5 * value / 255;
        var Rt = 10000 * Vr / (5 - Vr);
        var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
        var cel = (temp - 273.15).toFixed(2);
        var Fah = (cel * 1.8 + 32).toFixed(2);
        console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 1000);

Nous pouvons lire la ``valeur`` de la thermistance avec l‚Äôinstruction ``adc.read(0).then((value) => {...})``.
.. code-block:: js

    var Vr = 5 * value / 255;
    var Rt = 10000 * Vr / (5 - Vr);
    var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
    var cel = (temp - 273.15).toFixed(2);
    var Fah = (cel * 1.8 + 32).toFixed(2);
    console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);

Ces op√©rations permettent de convertir la valeur de la thermistance en une temp√©rature en degr√©s Celsius.

.. code-block:: js

    var Vr = 5 * value / 255;
    var Rt = 10000 * Vr / (5 - Vr);

Ces deux lignes de code calculent la distribution de la tension √† partir des valeurs lues, en obtenant Rt (la r√©sistance de la thermistance).

.. code-block:: js

    var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));  

Ce code substitue Rt dans la formule **TK=1/(ln(RT/RN)/B+1/TN)** pour obtenir la temp√©rature en Kelvin.

.. code-block:: js

    var cel = (temp - 273.15).toFixed(2);

Cette ligne convertit la temp√©rature de Kelvin en Celsius avec deux d√©cimales.

.. code-block:: js

    var Fah = (cel * 1.8 + 32).toFixed(2);

Cette ligne convertit la temp√©rature de Celsius en Fahrenheit avec deux d√©cimales.

.. code-block:: js

    console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);

Affiche la temp√©rature en Celsius, en Fahrenheit ainsi que leurs unit√©s sur le terminal.

Image du r√©sultat
--------------------

.. image:: ../img/image203.jpeg
