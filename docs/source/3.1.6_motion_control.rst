.. note:: 

    Ciao e benvenuto nella Community SunFounder su Facebook per gli appassionati di Raspberry Pi, Arduino e ESP32! Approfondisci il mondo di Raspberry Pi, Arduino e ESP32 insieme ad altri appassionati.

    **PerchÃ© unirsi?**

    - **Supporto da esperti**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue abilitÃ .
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci sui nuovi prodotti e alle anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti piÃ¹ recenti.
    - **Promozioni e Concorsi**: Partecipa a giveaway e promozioni festive.

    ðŸ‘‰ Pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

3.1.6 Controllo del Movimento
================================

Introduzione
--------------------

In questa lezione, realizzeremo un semplice dispositivo per rilevamento e 
controllo del movimento. Lâ€™MPU6050 Ã¨ utilizzato come sensore e il motore 
passo-passo come dispositivo di controllo. Con lâ€™MPU6050 montato su un guanto, 
puoi controllare il motore passo-passo ruotando il polso.

Componenti
--------------

.. image:: img/list_Motion_Control.png
    :align: center

Schema Elettrico
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: img/Schematic_three_one6.png
   :align: center

Procedure Sperimentali
---------------------------

**Step 1:** Costruisci il circuito.

.. image:: img/image251.png
   :alt: 3.1.6 Motion Control_bb
   :width: 800
   :align: center

**Per gli Utenti di Linguaggio C**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Step 2**: Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.6/

**Step 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.6_MotionControl.c -lwiringPi -lm

**Step 4**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Dopo l'esecuzione del codice, se l'angolo di inclinazione dellâ€™ 
**MPU6050** sull'`Y <https://cn.bing.com/dict/search?q=Y&FORM=BDVSP6&mkt=zh-cn>`__-`axis <https://cn.bing.com/dict/search?q=axis&FORM=BDVSP6&mkt=zh-cn>`__
Ã¨ superiore a **45** â„ƒ, il motore passo-passo ruota in senso antiorario; 
se Ã¨ inferiore a **-45** â„ƒ, il motore ruota in senso orario.

.. note::

    Se non funziona dopo l'esecuzione o appare un messaggio di errore come: \"wiringPi.h: No such file or directory\", consulta :ref:`Il codice C non funziona?`.

**Spiegazione del Codice**

.. code-block:: c

    doubleÂ mpu6050(){
    Â Â Â Â acclXÂ =Â read_word_2c(0x3B);
    Â Â Â Â acclYÂ =Â read_word_2c(0x3D);
    Â Â Â Â acclZÂ =Â read_word_2c(0x3F);
    Â Â Â Â acclX_scaledÂ =Â acclXÂ /Â 16384.0;
    Â Â Â Â acclY_scaledÂ =Â acclYÂ /Â 16384.0;
    Â Â Â Â acclZ_scaledÂ =Â acclZÂ /Â 16384.0;
    Â Â Â Â doubleÂ angle=get_y_rotation(acclX_scaled,Â acclY_scaled,Â acclZ_scaled);
    Â Â Â Â returnÂ angle;
    }
mpu6050 ottiene l'angolo di inclinazione nella direzione dell'asse Y.

.. code-block:: c

    voidÂ rotary(charÂ direction){
    Â Â Â Â if(directionÂ ==Â 'c'){
    Â Â Â Â Â Â Â Â for(intÂ j=0;j<4;j++){
    Â Â Â Â Â Â Â Â Â Â Â Â for(intÂ i=0;i<4;i++)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {digitalWrite(motorPin[i],0x99>>jÂ &Â (0x08>>i));}
                delayMicroseconds(stepSpeed);
            }        
        }
    Â Â Â Â elseÂ if(directionÂ =='a'){
    Â Â Â Â Â Â Â Â for(intÂ j=0;j<4;j++){
    Â Â Â Â Â Â Â Â Â Â Â Â for(intÂ i=0;i<4;i++)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {digitalWrite(motorPin[i],0x99<<jÂ &Â (0x80>>i));}
                delayMicroseconds(stepSpeed);
            }   
        }
    }

Se la direzione ricevuta Ã¨ \'**c**\', il motore passo-passo ruota in senso 
orario; se la direzione Ã¨ \'**a**\', il motore ruota in senso antiorario. 
Per maggiori dettagli sul calcolo della direzione di rotazione del motore 
passo-passo, consulta :ref:`1.3.3 Motore Passo-passo`.

.. code-block:: c

    intÂ main()
    {
        setup();
    Â Â Â Â doubleÂ angle;
    Â Â Â Â while(1)Â {
    Â Â Â Â Â Â Â Â angleÂ =Â mpu6050();
    Â Â Â Â Â Â Â Â ifÂ (angleÂ >=45){rotary('a');}
    Â Â Â Â Â Â Â Â elseÂ ifÂ (angle<=-45){rotary('c');}
        }
    Â Â Â Â returnÂ 0;
    }

L'angolo di inclinazione nella direzione dell'asse Y viene letto dall'
**mpu6050** e, se Ã¨ superiore a **45** â„ƒ, il motore passo-passo ruota 
in senso antiorario; se inferiore a **-45** â„ƒ, il motore ruota in senso orario.

**Per Utenti Python**
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Step 2**: Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**Step 3**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.6_MotionControl.py

Dopo l'esecuzione del codice, se l'angolo di inclinazione dell'**mpu6050** 
sull'asse `Y <https://cn.bing.com/dict/search?q=Y&FORM=BDVSP6&mkt=zh-cn>`__\ **-**\ `axis <https://cn.bing.com/dict/search?q=axis&FORM=BDVSP6&mkt=zh-cn>`__
is larger than **45** â„ƒ, the stepper motor rotates anticlockwise; if Ã¨ maggiore di **45** â„ƒ, il motore passo-passo ruota in senso 
antiorario; se inferiore a **-45** â„ƒ, ruota in senso orario.

**Codice**

.. note::

    Puoi **Modificare/Reimpostare/Copiare/Eseguire/Arrestare** il codice qui sotto. Prima di fare ciÃ², vai al percorso del codice sorgente come ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import smbus
    import math
    import time

    # Registri di gestione dell'alimentazione
    power_mgmt_1 = 0x6b
    power_mgmt_2 = 0x6c

    bus = smbus.SMBus(1) 
    address = 0x68     
    bus.write_byte_data(address, power_mgmt_1, 0)

    # Pin del motore passo-passo
    motorPin = (18,23,24,25) 
    rolePerMinute =15
    stepsPerRevolution = 2048
    stepSpeed = (60/rolePerMinute)/stepsPerRevolution

    # mpu6050
    def read_byte(adr):
        return bus.read_byte_data(address, adr)

    def read_word(adr):
        high = bus.read_byte_data(address, adr)
        low = bus.read_byte_data(address, adr+1)
        val = (high << 8) + low
        return val

    def read_word_2c(adr):
        val = read_word(adr)
        if (val >= 0x8000):
            return -((65535 - val) + 1)
        else:
            return val

    def dist(a,b):
        return math.sqrt((a*a)+(b*b))

    def get_y_rotation(x,y,z):
        radians = math.atan2(x, dist(y,z))
        return -math.degrees(radians)

    def get_x_rotation(x,y,z):
        radians = math.atan2(y, dist(x,z))
        return math.degrees(radians)

    def mpu6050():
        accel_xout = read_word_2c(0x3b)
        accel_yout = read_word_2c(0x3d)
        accel_zout = read_word_2c(0x3f)
        accel_xout_scaled = accel_xout / 16384.0
        accel_yout_scaled = accel_yout / 16384.0
        accel_zout_scaled = accel_zout / 16384.0
        angle=get_y_rotation(accel_xout_scaled, accel_yout_scaled, accel_zout_scaled)
        return angle

    # Motore passo-passo
    def rotary(direction):
        if(direction == 'c'):   
            for j in range(4):
                for i in range(4):
                    GPIO.output(motorPin[i],0x99>>j & (0x08>>i))
                time.sleep(stepSpeed)

        elif(direction == 'a'):
            for j in range(4):
                for i in range(4):
                    GPIO.output(motorPin[i],0x99<<j & (0x80>>i))
                time.sleep(stepSpeed)


    def setup():
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        for i in motorPin:
            GPIO.setup(i, GPIO.OUT)


    def loop():
        while True:
            angle=mpu6050()
            if angle >=45 :
                rotary('a')
            elif angle <=-45:
                rotary('c')

    def destroy():
        GPIO.cleanup()   

    if __name__ == '__main__':    
        setup()
        try:
            loop()        
        except KeyboardInterrupt:
            destroy()

**Spiegazione del Codice** 

.. code-block:: python

    defÂ mpu6050():
    Â Â Â Â accel_xoutÂ =Â read_word_2c(0x3b)
    Â Â Â Â accel_youtÂ =Â read_word_2c(0x3d)
    Â Â Â Â accel_zoutÂ =Â read_word_2c(0x3f)
    Â Â Â Â accel_xout_scaledÂ =Â accel_xoutÂ /Â 16384.0
    Â Â Â Â accel_yout_scaledÂ =Â accel_youtÂ /Â 16384.0
    Â Â Â Â accel_zout_scaledÂ =Â accel_zoutÂ /Â 16384.0
    Â Â Â Â angle=get_y_rotation(accel_xout_scaled,Â accel_yout_scaled,Â accel_zout_scaled)
    Â Â Â Â returnÂ angle

mpu6050 ottiene l'angolo di inclinazione nella direzione dellâ€™asse Y.

.. code-block:: python

    defÂ rotary(direction):
    Â Â Â Â if(directionÂ ==Â 'c'):Â Â Â 
    Â Â Â Â Â Â Â Â forÂ jÂ inÂ range(4):
    Â Â Â Â Â Â Â Â Â Â Â Â forÂ iÂ inÂ range(4):
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â GPIO.output(motorPin[i],0x99>>jÂ &Â (0x08>>i))
                time.sleep(stepSpeed)

    Â Â Â Â elif(directionÂ ==Â 'a'):
    Â Â Â Â Â Â Â Â forÂ jÂ inÂ range(4):
    Â Â Â Â Â Â Â Â Â Â Â Â forÂ iÂ inÂ range(4):
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â GPIO.output(motorPin[i],0x99<<jÂ &Â (0x80>>i))
                time.sleep(stepSpeed)

Se la direzione ricevuta Ã¨ **c**, il motore passo-passo ruota in senso 
orario; se Ã¨ **a**, il motore ruota in senso antiorario. Per maggiori 
dettagli sul calcolo della direzione di rotazione del motore passo-passo, 
consulta :ref:`1.3.3 Motore Passo-passo`.

.. code-block:: python

    defÂ loop():
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â angle=mpu6050()
    Â Â Â Â Â Â Â Â ifÂ angleÂ >=45Â :
                rotary('a')
    Â Â Â Â Â Â Â Â elifÂ angleÂ <=-45:
                rotary('c')

L'angolo di inclinazione nella direzione dell'asse **Y** viene letto da 
**mpu6050**. Se Ã¨ superiore a **45** â„ƒ, viene chiamata la funzione rotary() 
per far ruotare il motore passo-passo in senso antiorario; se Ã¨ inferiore a 
**-45** â„ƒ, il motore ruota in senso orario.

Immagine del Fenomeno
--------------------------

.. image:: img/image252.jpeg
   :align: center