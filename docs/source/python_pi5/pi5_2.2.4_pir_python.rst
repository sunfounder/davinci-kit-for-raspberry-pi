.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et des offres sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pi5_pir:

2.2.4 PIR
===========

Introduction
----------------

Dans ce projet, nous allons utiliser des capteurs pyros√©lectriques infrarouges pour 
d√©tecter la pr√©sence humaine. Lorsque quelqu'un s'approche, la LED s'allume automatiquement. 
Sinon, elle s'√©teint. Ce capteur de mouvement infrarouge est capable de d√©tecter le 
rayonnement infrarouge √©mis par les √™tres humains et les animaux.


Composants n√©cessaires
-------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.2.4_pir_list.png

.. raw:: html

   <br/>


Sch√©ma de c√¢blage
---------------------

.. image:: ../python_pi5/img/2.2.4_pir_schematic.png


Proc√©dure exp√©rimentale
--------------------------

**√âtape 1 :** Montez le circuit.

.. image:: ../python_pi5/img/2.2.4_pir_circuit.png

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.4_PIR.py

Lorsque le code s'ex√©cute, le capteur PIR d√©tecte l'environnement et fait briller la LED RGB en jaune si une pr√©sence est d√©tect√©e. 

Il y a deux potentiom√®tres sur le module PIR : l'un permet de r√©gler la sensibilit√©, l'autre la distance de d√©tection. Pour un meilleur fonctionnement du module PIR, tournez-les tous les deux dans le sens antihoraire jusqu'√† la but√©e.

.. image:: ../python_pi5/img/2.2.4_PIR_TTE.png
    :width: 400
    :align: center

.. warning::

    En cas de message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le chemin source du code, tel que ``davinci-kit-for-raspberry-pi/python-pi5``.
    
.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import RGBLED, MotionSensor
   from time import sleep

   # Initialiser la LED RGB et le capteur de mouvement PIR avec la biblioth√®que GPIO Zero
   led = RGBLED(red=18, green=27, blue=22)  # LED RGB connect√©e aux broches GPIO 18 (Rouge), 27 (Vert), 22 (Bleu)
   pir = MotionSensor(17)  # Capteur PIR connect√© √† la broche GPIO 17

   try:
       # Surveiller en continu les mouvements et mettre √† jour la couleur de la LED
       while True:
           if pir.motion_detected:  # V√©rifier si le capteur PIR d√©tecte un mouvement
               led.color = (1, 1, 0)  # R√©gler la couleur de la LED en jaune (Rouge + Vert)
           else:
               led.color = (0, 0, 1)  # R√©gler la couleur de la LED en bleu (seulement le Bleu)
           sleep(0.1)  # Pause courte pour r√©duire la charge CPU

   except KeyboardInterrupt:
       # G√©rer l'interruption clavier (Ctrl+C) pour quitter proprement la boucle
       pass


**Explication du code**

#. Importe la classe ``RGBLED`` pour contr√¥ler une LED RGB et la classe ``MotionSensor`` pour la d√©tection de mouvement depuis la biblioth√®que GPIO Zero. Importe √©galement la fonction ``sleep`` pour introduire des d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import RGBLED, MotionSensor
       from time import sleep

#. Initialise une LED RGB avec des composants rouge, vert et bleu connect√©s respectivement aux broches GPIO 18, 27 et 22. Initialise √©galement un capteur PIR sur la broche GPIO 17.

   .. code-block:: python

       # Initialiser la LED RGB et le capteur de mouvement PIR avec la biblioth√®que GPIO Zero
       led = RGBLED(red=18, green=27, blue=22)  # LED RGB connect√©e aux broches GPIO 18 (Rouge), 27 (Vert), 22 (Bleu)
       pir = MotionSensor(17)  # Capteur PIR connect√© √† la broche GPIO 17

#. Le programme entre dans une boucle infinie, surveillant en continu les mouvements d√©tect√©s par le capteur PIR. Si un mouvement est d√©tect√©, la LED devient jaune (m√©lange de rouge et vert). En l'absence de mouvement, la LED devient bleue. Un d√©lai court de 0,1 seconde r√©duit la charge CPU.

   .. code-block:: python

       try:
           # Surveiller en continu les mouvements et mettre √† jour la couleur de la LED
           while True:
               if pir.motion_detected:  # V√©rifier si le capteur PIR d√©tecte un mouvement
                   led.color = (1, 1, 0)  # R√©gler la couleur de la LED en jaune (Rouge + Vert)
               else:
                   led.color = (0, 0, 1)  # R√©gler la couleur de la LED en bleu (seulement le Bleu)
               sleep(0.1)  # Pause courte pour r√©duire la charge CPU

       except KeyboardInterrupt:
           # G√©rer l'interruption clavier (Ctrl+C) pour quitter proprement la boucle
           pass

