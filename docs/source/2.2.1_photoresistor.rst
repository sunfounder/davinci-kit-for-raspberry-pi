.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.2.1 Photoresistor
====================

Introduction
--------------

La photoresistance est un composant couramment utilis√© pour mesurer l'intensit√© 
lumineuse ambiante dans la vie quotidienne. Elle aide le contr√¥leur √† reconna√Ætre 
le jour et la nuit et √† r√©aliser des fonctions de contr√¥le de la lumi√®re, comme les 
lampes nocturnes. Ce projet est tr√®s similaire au potentiom√®tre, mais au lieu de 
changer la tension, il permet de d√©tecter la lumi√®re.

Composants
-------------

.. image:: img/list_2.2.1_photoresistor.png


Principe
------------

Une photoresistance, ou cellule photo√©lectrique, est une r√©sistance variable contr√¥l√©e 
par la lumi√®re. La r√©sistance d'une photoresistance diminue √† mesure que l'intensit√© 
lumineuse incidente augmente ; en d'autres termes, elle pr√©sente une photoconductivit√©. 
Une photoresistance peut √™tre utilis√©e dans des circuits d√©tecteurs sensibles √† la lumi√®re, 
ainsi que dans des circuits de commutation activ√©s par la lumi√®re ou l'obscurit√©.

.. image:: img/image196.png
    :width: 200
    :align: center


Sch√©ma de principe
----------------------

.. image:: img/image321.png


.. image:: img/image322.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image198.png
    :width: 800



Pour les utilisateurs de langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.1/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.1_Photoresistor.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Le programme se lance et la luminosit√© de la LED variera en fonction de 
l'intensit√© de la lumi√®re d√©tect√©e par la photoresistance.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message 
    d'erreur indiquant : \"wiringPi.h: Aucun fichier ou r√©pertoire de ce 
    type\", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.
**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <softPwm.h>

    typedef unsigned char uchar;
    typedef unsigned int uint;

    #define     ADC_CS    0
    #define     ADC_CLK   1
    #define     ADC_DIO   2
    #define     LedPin    3

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Start bit
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Mode entr√©e unique
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Impair
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,odd);  delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // S√©lection
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,sel);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);

        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);

        for(i=0;i<8;i++)
        {
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);

            pinMode(ADC_DIO, INPUT);
            dat1=dat1<<1 | digitalRead(ADC_DIO);
        }

        for(i=0;i<8;i++)
        {
            dat2 = dat2 | ((uchar)(digitalRead(ADC_DIO))<<i);
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
        }

        digitalWrite(ADC_CS,1);
        pinMode(ADC_DIO, OUTPUT);
        return(dat1==dat2) ? dat1 : 0;
    }

    int main(void)
    {
        uchar analogVal;
        if(wiringPiSetup() == -1){ // Si l'initialisation de WiringPi √©choue, afficher un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }
        softPwmCreate(LedPin,  0, 100);
        pinMode(ADC_CS,  OUTPUT);
        pinMode(ADC_CLK, OUTPUT);

        while(1){
            analogVal = get_ADC_Result(0);
            printf("Current analogVal : %d\n", analogVal);
            delay(100);
            softPwmWrite(LedPin, analogVal);
            delay(100);
        }
        return 0;
    }

**Explication du code**

Les codes ici sont les m√™mes que dans la section 2.1.4 Potentiom√®tre. Si vous avez d'autres questions, veuillez consulter l'explication du code dans **2.1.4 Potentiom√®tre.c** pour plus de d√©tails.

Pour les utilisateurs de Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.1_Photoresistor.py

Le programme s'ex√©cute et la luminosit√© de la LED variera en fonction de 
l'intensit√© lumineuse d√©tect√©e par la photoresistance.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code comme ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import ADC0834
    import time

    LedPin = 22

    def setup():
        global led_val
        # Configurer les modes GPIO en num√©rotation BCM
        GPIO.setmode(GPIO.BCM)
        # D√©finir le mode de LedPin en sortie avec un niveau initial √† High (3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Configurer LedPin en canal PWM avec une fr√©quence de 2 KHz
        led_val = GPIO.PWM(LedPin, 2000)

        # Initialiser avec une valeur de 0
        led_val.start(0)

    def destroy():
        # Arr√™ter tous les canaux PWM
        led_val.stop()
        # Lib√©rer les ressources
        GPIO.cleanup()

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)

    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # Lorsque 'Ctrl+C' est press√©, la fonction destroy() sera ex√©cut√©e.
            destroy()

**Explication du code**

.. code-block:: python

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)

Lire la valeur analogique de CH0 d'ADC0834. Par d√©faut, la fonction getResult() est 
utilis√©e pour lire la valeur de CH0. Si vous souhaitez lire d'autres canaux, veuillez 
entrer 1, 2 ou 3 dans les parenth√®ses de la fonction getResult(). Ensuite, il suffit 
d'afficher la valeur avec la fonction print. Comme l'√©l√©ment de changement est le cycle 
de service de LedPin, la formule de calcul analogVal*100/255 est n√©cessaire pour convertir 
analogVal en pourcentage. Enfin, la fonction ChangeDutyCycle() est appel√©e pour √©crire ce 
pourcentage dans LedPin.


Photo du ph√©nom√®ne
------------------------

.. image:: img/image199.jpeg
