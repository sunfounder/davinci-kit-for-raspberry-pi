.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder pour les passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres amateurs.

    **Pourquoi nous rejoindre ?**

    - **Support d‚Äôexperts** : R√©solvez vos probl√®mes apr√®s-vente et relevez des d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et b√©n√©ficiez d‚Äôaper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions sp√©ciales et √† des tirages au sort.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

Gonfler le point
===========================

Nous allons maintenant construire un circuit permettant de contr√¥ler la taille d‚Äôun point √† l‚Äôaide d‚Äôun bouton.  
Lorsque nous appuyons sur le bouton, le point grossit rapidement ; lorsque nous le rel√¢chons, le point diminue progressivement, donnant l‚Äôimpression qu‚Äôun ballon se gonfle.

.. image:: img/dot_size.png

**C√¢blage**

.. image:: img/button_pressed.png

**Code**

.. code-block:: arduino

    import processing.io.*;
    int buttonPin = 18; 

    float diameter;

    void setup() {
        size(200, 200);
        frameRate(64); //set frame rate
        GPIO.pinMode(buttonPin, GPIO.INPUT_PULLUP); 
        diameter = width*0.5;
    }

    void draw() {
        if (GPIO.digitalRead(buttonPin)==GPIO.LOW) {
            if(diameter<width*0.8) {diameter=diameter+5;}
        } else {
            if(diameter>=width*0.2) {diameter--;}
        } 
        background(192, 16, 18);
        ellipse(width/2, height/2,diameter, diameter);
    }

**Comment √ßa fonctionne ?**


Contrairement aux deux projets pr√©c√©dents qui utilisaient la fonction de sortie du GPIO, ce projet exploite la fonction d'entr√©e.

La fonction ``GPIO.pinMode()`` est utilis√©e pour configurer ``buttonPin`` en mode entr√©e avec r√©sistance pull-up, ce qui force automatiquement la broche √† un √©tat HAUT par d√©faut.

Ensuite, la fonction ``GPIO.digitalRead()`` permet de lire la valeur de ``buttonPin``. Lorsque cette valeur est BAS, cela signifie que le bouton est enfonc√© ; dans ce cas, le diam√®tre du point augmente de 5. Si le bouton est rel√¢ch√©, le diam√®tre du point diminue de 1.

Pour plus de d√©tails, consultez la `Processing Reference <https://processing.org/reference/>`_.
