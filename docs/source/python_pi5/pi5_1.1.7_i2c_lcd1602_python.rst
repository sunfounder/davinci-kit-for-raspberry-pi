.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 aux c√¥t√©s d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions et cadeaux festifs** : Participez √† des tirages au sort et √† des offres promotionnelles pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.1.7_py_pi5:

1.1.7 √âcran LCD1602 I2C
==========================

Introduction
---------------

Le LCD1602 est un √©cran √† cristaux liquides de type caract√®re, capable d'afficher 32 caract√®res (16*2) simultan√©ment.

Composants requis
--------------------

Dans ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/1.1.7_i2c_lcd_list.png

.. raw:: html

   <br/>


Sch√©ma de c√¢blage
--------------------

============ ========
T-Board Name physical
SDA1         Pin 3
SCL1         Pin 5
============ ========

.. image:: ../python_pi5/img/1.1.7_i2c_lcd_schematic.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/1.1.7_i2c_lcd1602_circuit.png


**√âtape 2 :** Configurez l'I2C (voir :ref:`i2c_config`. Si l'I2C est d√©j√† configur√©, passez cette √©tape.)

**√âtape 3 :** Acc√©dez au r√©pertoire du code.
.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 4 :** Ex√©cutez.
.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.7_Lcd1602.py

Une fois le code ex√©cut√©, vous verrez le message ``Greetings!, From SunFounder`` s'afficher sur l'√©cran LCD.

.. note::

    * Si vous obtenez l'erreur ``FileNotFoundError: [Errno 2] No such file or directory: '/dev/i2c-1'``, consultez la section :ref:`i2c_config` pour activer l'I2C.
    * Si vous recevez l'erreur ``ModuleNotFoundError: No module named 'smbus2'``, ex√©cutez la commande suivante : ``sudo pip3 install smbus2``.
    * Si l'erreur ``OSError: [Errno 121] Remote I/O error`` s'affiche, cela signifie que le module est mal c√¢bl√© ou d√©fectueux.
    * Si le code et le c√¢blage sont corrects, mais que l'√©cran LCD n'affiche toujours rien, ajustez le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

.. warning::

    Si le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address`` appara√Æt, consultez :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification du code, vous pouvez l'ex√©cuter directement pour observer le r√©sultat.
.. raw:: html

    <run></run>
.. code-block:: python

   #!/usr/bin/env python3
   import LCD1602  # Importation du module pour interfacer avec le LCD1602
   import time     # Importation du module pour les fonctions de temporisation

   def setup():
       # Initialiser le LCD avec l'adresse I2C 0x27 et activer le r√©tro√©clairage
       LCD1602.init(0x27, 1) 
       # Afficher le message 'Greetings!' en haut √† gauche (ligne 0, colonne 0)
       LCD1602.write(0, 0, 'Greetings!') 
       # Afficher le message 'From SunFounder' sur la deuxi√®me ligne (ligne 1, colonne 1)
       LCD1602.write(1, 1, 'From SunFounder') 
       time.sleep(2)  # Afficher les messages pendant 2 secondes

   try:
       setup()  # Ex√©cuter la fonction de configuration pour initialiser le LCD et afficher les messages
       
   except KeyboardInterrupt:
       # Effacer l'affichage du LCD en cas d'interruption clavier (ex: Ctrl+C)
       LCD1602.clear()
       pass  # Continuer sans autre action


**Explication du Code**

1. Ce fichier est un script open source pour contr√¥ler l'√©cran LCD1602 via I2C, facilitant son utilisation.

   .. code-block:: python

       import LCD1602  # Importation du module pour interfacer avec le LCD1602

2. La fonction initialise le syst√®me I2C avec l'adresse de l'appareil d√©sign√©e. Le premier param√®tre correspond √† l'adresse de l'appareil I2C, d√©tectable avec la commande i2cdetect (voir l'annexe pour plus de d√©tails). L'adresse du LCD1602 est g√©n√©ralement 0x27.

   .. code-block:: python

       # Initialiser le LCD avec l'adresse I2C 0x27 et activer le r√©tro√©clairage
       LCD1602.init(0x27, 1) 

3. ``LCD1602.write`` est utilis√© pour afficher des messages sur l'√©cran LCD. Les deux premiers param√®tres indiquent la position de la ligne et de la colonne, le troisi√®me est le message. Vous verrez maintenant s'afficher ¬´ Greetings! From SunFounder ¬ª sur l'√©cran LCD.

   .. code-block:: python

       # Afficher le message 'Greetings!' en haut √† gauche (ligne 0, colonne 0)
       LCD1602.write(0, 0, 'Greetings!') 
       # Afficher le message 'From SunFounder' sur la deuxi√®me ligne (ligne 1, colonne 1)
       LCD1602.write(1, 1, 'From SunFounder') 

