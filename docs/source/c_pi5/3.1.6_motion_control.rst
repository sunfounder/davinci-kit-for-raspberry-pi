.. note::

    Bonjour et bienvenue dans la communautÃ© des passionnÃ©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionnÃ©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : RÃ©solvez les problÃ¨mes aprÃ¨s-vente et relevez vos dÃ©fis techniques grÃ¢ce Ã  l'aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprenez et Partagez** : Ã‰changez des astuces et des tutoriels pour perfectionner vos compÃ©tences.
    - **AperÃ§us exclusifs** : BÃ©nÃ©ficiez d'un accÃ¨s anticipÃ© aux nouvelles annonces de produits et aux avant-premiÃ¨res.
    - **RÃ©ductions spÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez Ã  des concours et Ã  des promotions lors des fÃªtes.

    ğŸ‘‰ PrÃªt Ã  explorer et Ã  crÃ©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous dÃ¨s aujourd'hui !

3.1.6 ContrÃ´le de Mouvement
=============================

Introduction
--------------

Dans cette leÃ§on, nous allons crÃ©er un dispositif simple de dÃ©tection et de contrÃ´le 
de mouvement. Le **MPU6050** est utilisÃ© comme capteur, et le moteur pas-Ã -pas est 
utilisÃ© comme dispositif de contrÃ´le. Avec le **MPU6050** montÃ© sur un gant, vous pouvez 
contrÃ´ler le moteur pas-Ã -pas en tournant votre poignet.

Composants
--------------

.. image:: img/list_Motion_Control.png
    :align: center

SchÃ©ma de cÃ¢blage
--------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: img/Schematic_three_one6.png
   :align: center


ProcÃ©dures expÃ©rimentales
-----------------------------

**Ã‰tape 1 :** Construisez le circuit.

.. image:: img/image251.png
   :alt: 3.1.6 Motion Control_bb
   :width: 800
   :align: center


**Ã‰tape 2 :** AccÃ©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.6/

**Ã‰tape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.6_MotionControl.c -lwiringPi -lm

**Ã‰tape 4 :** ExÃ©cutez le fichier exÃ©cutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Lorsque le code est lancÃ©, si l'angle d'inclinaison du **mpu6050** sur l'axe 
`Y <https://cn.bing.com/dict/search?q=Y&FORM=BDVSP6&mkt=zh-cn>`__-`axis <https://cn.bing.com/dict/search?q=axis&FORM=BDVSP6&mkt=zh-cn>`__
supÃ©rieur Ã  **45** Â°, le moteur pas-Ã -pas tourne dans le sens inverse des aiguilles 
d'une montre ; s'il est infÃ©rieur Ã  **-45** Â°, le moteur tourne dans le sens des 
aiguilles d'une montre.

.. note::

    Si cela ne fonctionne pas aprÃ¨s l'exÃ©cution, ou s'il y a un message d'erreur indiquant : Â« wiringPi.h : Aucun fichier ou rÃ©pertoire de ce type Â», veuillez consulter :ref:`C code is not working?`.


**Explication du Code**

.. code-block:: c

    doubleÂ mpu6050(){
    Â Â Â Â acclXÂ =Â read_word_2c(0x3B);
    Â Â Â Â acclYÂ =Â read_word_2c(0x3D);
    Â Â Â Â acclZÂ =Â read_word_2c(0x3F);
    Â Â Â Â acclX_scaledÂ =Â acclXÂ /Â 16384.0;
    Â Â Â Â acclY_scaledÂ =Â acclYÂ /Â 16384.0;
    Â Â Â Â acclZ_scaledÂ =Â acclZÂ /Â 16384.0;
    Â Â Â Â doubleÂ angle=get_y_rotation(acclX_scaled,Â acclY_scaled,Â acclZ_scaled);
    Â Â Â Â returnÂ angle;
    }

`mpu6050` rÃ©cupÃ¨re l'angle d'inclinaison dans la direction de l'axe Y.

.. code-block:: c

    voidÂ rotary(charÂ direction){
    Â Â Â Â if(directionÂ ==Â 'c'){
    Â Â Â Â Â Â Â Â for(intÂ j=0;j<4;j++){
    Â Â Â Â Â Â Â Â Â Â Â Â for(intÂ i=0;i<4;i++)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {digitalWrite(motorPin[i],0x99>>jÂ &Â (0x08>>i));}
                delayMicroseconds(stepSpeed);
            }        
        }
    Â Â Â Â elseÂ if(directionÂ =='a'){
    Â Â Â Â Â Â Â Â for(intÂ j=0;j<4;j++){
    Â Â Â Â Â Â Â Â Â Â Â Â for(intÂ i=0;i<4;i++)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {digitalWrite(motorPin[i],0x99<<jÂ &Â (0x80>>i));}
                delayMicroseconds(stepSpeed);
            }   
        }
    }

Si la direction reÃ§ue est `c`, le moteur pas-Ã -pas tourne dans le sens des aiguilles 
d'une montre ; si la direction est `a`, le moteur tourne dans le sens inverse. Consultez
:ref:`1.3.3 Stepper Motor` pour plus de dÃ©tails sur le calcul de la direction de 
rotation du moteur pas-Ã -pas.

.. code-block:: c

    intÂ main()
    {
        setup();
    Â Â Â Â doubleÂ angle;
    Â Â Â Â while(1)Â {
    Â Â Â Â Â Â Â Â angleÂ =Â mpu6050();
    Â Â Â Â Â Â Â Â ifÂ (angleÂ >=45){rotary('a');}
    Â Â Â Â Â Â Â Â elseÂ ifÂ (angle<=-45){rotary('c');}
        }
    Â Â Â Â returnÂ 0;
    }

L'angle d'inclinaison dans la direction de l'axe Y est lu depuis **mpu6050**. 
Si l'angle est supÃ©rieur Ã  **45Â°**, le moteur pas-Ã -pas tourne dans le sens 
inverse des aiguilles d'une montre ; s'il est infÃ©rieur Ã  **-45Â°**, le moteur 
tourne dans le sens des aiguilles d'une montre.

