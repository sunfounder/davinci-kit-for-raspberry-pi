# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-19 18:22+0800\n"
"PO-Revision-Date: 2021-05-27 18:14+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../1.2.2_passive_buzzer.rst:2
msgid "1.2.2 Passive Buzzer"
msgstr "1.2.2 パッシブブザー"

#: ../1.2.2_passive_buzzer.rst:5
msgid "Introduction"
msgstr "前書き"

#: ../1.2.2_passive_buzzer.rst:7
msgid "In this lesson, we will learn how to make a passive buzzer play music."
msgstr "このレッスンでは、パッシブブザーで音楽を再生する方法を学習する。"

#: ../1.2.2_passive_buzzer.rst:10
msgid "Components"
msgstr "部品"

#: ../1.2.2_passive_buzzer.rst:16
msgid "Schematic Diagram"
msgstr "回路図"

#: ../1.2.2_passive_buzzer.rst:18
msgid ""
"In this experiment, a passive buzzer, a PNP transistor and a 1k resistor "
"are used between the base of the transistor and GPIO to protect the "
"transistor."
msgstr "この実験では、トランジスタを保護するために、トランジスタのベースとGPIOの間にパッシブブザー、PNPトランジスタ、および1k抵抗器を使用する。"

#: ../1.2.2_passive_buzzer.rst:22
msgid ""
"When GPIO17 is given different frequencies, the passive buzzer will emit "
"different sounds; in this way, the buzzer plays music."
msgstr "GPIO17に異なる周波数が与えられると、パッシブブザーは異なる音を出す。このようにして、ブザーは音楽を再生する。"

#: ../1.2.2_passive_buzzer.rst:29
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../1.2.2_passive_buzzer.rst:31
msgid "**Step 1**: Build the circuit."
msgstr "**ステップ1：** 回路を作る。"

#: ../1.2.2_passive_buzzer.rst:39
msgid "For C Language Users"
msgstr "C言語ユーザー向け"

#: ../1.2.2_passive_buzzer.rst:41
msgid "**Step 2**: Change directory."
msgstr "**ステップ2：** ディレクトリを変更する。"

#: ../1.2.2_passive_buzzer.rst:51
msgid "**Step 3**: Compile."
msgstr "**ステップ3：** "

#: ../1.2.2_passive_buzzer.rst:61
msgid "**Step 4**: Run."
msgstr "**ステップ4：** 実行。"

#: ../1.2.2_passive_buzzer.rst:71 ../1.2.2_passive_buzzer.rst:247
msgid "The code run, the buzzer plays a piece of music."
msgstr "コードが実行されると、ブザーが音楽を再生する。"

#: ../1.2.2_passive_buzzer.rst:75
msgid ""
"If it does not work after running, please refer to :ref:`C code is not "
"working?`"
msgstr "実行後に機能しない場合は、:ref:`C code is not working?` を参照してください。"

#: ../1.2.2_passive_buzzer.rst:77 ../1.2.2_passive_buzzer.rst:249
msgid "**Code**"
msgstr "**コード**"

#: ../1.2.2_passive_buzzer.rst:155 ../1.2.2_passive_buzzer.rst:326
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../1.2.2_passive_buzzer.rst:171
msgid ""
"These frequencies of each note are as shown. CL refers to low note, CM "
"middle note, CH high note, 1-7 correspond to the notes C, D, E, F, G, A, "
"B."
msgstr "各音の周波数は以下のように示している。CL－低音、CM－中音、CH－高音、1～7は音C、D、E、F、G、A、Bに対応する。"

#: ../1.2.2_passive_buzzer.rst:182
msgid ""
"The array, song_1[] stores a musical score of a song in which beat_1[] "
"refers to the beat of each note in the song (0.5s for each beat)."
msgstr "配列song_1 []は曲の楽譜を保存する。beat_1[]は曲の各音符の拍を表す（1拍ごとに0.5秒）。"

#: ../1.2.2_passive_buzzer.rst:191
msgid ""
"This creates a software controlled tone pin. You can use any GPIO pin and"
" the pin numbering will be that of the wiringPiSetup() function you used."
" The return value is 0 for success. Anything else and you should check "
"the global errnovariable to see what went wrong."
msgstr "これにより、ソフトウェア制御のトーンピンが作成される。任意のGPIOピンを使用でき、ピンの番号は使用したwiringPiSetup()関数の番号になる。成功した場合の戻り値は0である。それ以外の場合は、グローバル変数errnoをチェックして、何が問題なのかを確認する必要がある。"

#: ../1.2.2_passive_buzzer.rst:203
msgid "Employ a for statement to play song_1."
msgstr "song_1を再生するためにfor statementを使用する。"

#: ../1.2.2_passive_buzzer.rst:205
msgid ""
"In the judgment condition, **i<sizeof(song_1)/4**\\ ，“devide by 4” is "
"used because the array song_1[] is an array of the data type of integer, "
"and each element takes up four bytes."
msgstr ""
"判断条件 **i<sizeof(song_1)/4** では、 配列song_1 "
"[]は整数のデータ型の配列であり、各要素は4拍を占有するため、「devide by 4」が使用されている。"

#: ../1.2.2_passive_buzzer.rst:209
msgid ""
"The number of elements in song_1 (the number of musical notes) is gotten "
"by deviding sizeof(song_4) by 4."
msgstr "song_1の要素の数（音符の数）は、sizeof（song_4）を4で割ることによって得られる。"

#: ../1.2.2_passive_buzzer.rst:212
msgid ""
"To enable each note to play for beat \\* 500ms, the function "
"delay(beat_1[i] \\* 500) is called."
msgstr "各音符を拍* 500msで再生できるようにするには、関数delay（beat_1 [i] * 500）が呼び出される。"

#: ../1.2.2_passive_buzzer.rst:215
msgid "The prototype of softToneWrite(BuzPin, song_1[i])："
msgstr "softToneWrite（BuzPin、song_1 [i]）のプロトタイプ："

#: ../1.2.2_passive_buzzer.rst:221
msgid ""
"This updates the tone frequency value on the given pin. The tone does not"
" stop playing until you set the frequency to 0."
msgstr "これにより、指定されたピンのトーン周波数値が更新される。周波数を0に設定するまで、トーンの再生は停止しない。"

#: ../1.2.2_passive_buzzer.rst:225
msgid "For Python Language Users"
msgstr "Python言語ユーザー向け"

#: ../1.2.2_passive_buzzer.rst:227
msgid "**Step 2: Change directory.**"
msgstr "**ステップ2：ディレクトリを変更する。**"

#: ../1.2.2_passive_buzzer.rst:237
msgid "**Step 3: Run.**"
msgstr "**ステップ3：実行する。**"

#: ../1.2.2_passive_buzzer.rst:253
 
msgid ""
"You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, "
"you need to go to  source code path like ``davinci-kit-for-raspberry-"
"pi/python``."
msgstr ""
"以下のコードを **変更/リセット/コピー/実行/停止** できます。 ただし、その前に、 ``davinci-kit-for-raspberry-pi/python`` のようなソースコードパスに移動する必要があります。"

#: ../1.2.2_passive_buzzer.rst:334
msgid ""
"These are the frequencies of each note. The first 0 is to skip CL[0] so "
"that the number 1-7 corresponds to the CDEFGAB of the tone."
msgstr "これらは各音符の周波数である。番号1〜7が音色のCDEFGABに対応するように、最初の0はCL [0]をスキップする。"

#: ../1.2.2_passive_buzzer.rst:344
msgid "These arrays are the notes of a song."
msgstr "これらの配列は歌の音符である。"

#: ../1.2.2_passive_buzzer.rst:352
msgid "Every sound beat (each number) represents the ⅛ beat, or 0.5s"
msgstr "すべての音符の拍（各番号）は、⅛拍で、つまり0.5秒を表す"

#: ../1.2.2_passive_buzzer.rst:359
msgid ""
"Define pin Buzzer as PWM pin, then set its frequency to 440 and "
"Buzz.start(50) is used to run PWM. What’s more, set the duty cycle to "
"50%."
msgstr "ピンブザーをPWMピンとして定義し、その周波数を440に設定し、Buzz.start（50）を使用してPWMを実行する。さらに、デューティサイクルを50％に設定する。"

#: ../1.2.2_passive_buzzer.rst:368
msgid ""
"Run a for loop, then the buzzer will play the notes in the array song_1[]"
" with the beats in the beat_1[] array, ."
msgstr "for 文を実行すると、ブザーは配列song_1 []の音符をbeat_1 []配列の拍で再生する。"

#: ../1.2.2_passive_buzzer.rst:371
msgid "Now you can hear the passive buzzer playing music."
msgstr "これで、パッシブブザーが音楽を再生していることが聞こえる。"

#: ../1.2.2_passive_buzzer.rst:374
msgid "Phenomenon Picture"
msgstr "現象画像"

#~ msgid ""
#~ "If it does not work after running,"
#~ " please refer to :ref:`C code is "
#~ "not working?`."
#~ msgstr ""

