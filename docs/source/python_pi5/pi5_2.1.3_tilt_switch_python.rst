.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres enthousiastes.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] pour nous rejoindre d√®s aujourd'hui !

.. _2.1.3_py_pi5:

2.1.3 Interrupteur √† bascule
================================

Introduction
---------------

Il s'agit d'un interrupteur √† bascule √† bille avec une petite bille en 
m√©tal √† l'int√©rieur. Il est utilis√© pour d√©tecter les inclinaisons de faible angle.

Composants n√©cessaires
---------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/2.1.3_tilt_switch_list.png

.. raw:: html

   <br/>

Sch√©ma de circuit
--------------------

.. image:: ../python_pi5/img/2.1.3_tilt_switch_schematic_1.png

.. image:: ../python_pi5/img/2.1.3_tilt_switch_schematic_2.png


Proc√©dure exp√©rimentale
--------------------------

**√âtape 1 :** Montez le circuit.

.. image:: ../python_pi5/img/2.1.3_tilt_switch_circuit.png

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.3_Tilt_zero.py

Placez l'interrupteur √† la verticale, la LED verte s'allumera. Si vous 
l'inclinez, "Tilt!" s'affichera sur l'√©cran et la LED rouge s'allumera. 
Replacez-le √† la verticale, et la LED verte se rallumera.

.. warning::

    En cas d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`. 

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source, tel que ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, vous pouvez ex√©cuter le code pour observer le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Importation des classes LED et Button

   # Initialisation du d√©tecteur d'inclinaison et des LEDs avec GPIO Zero
   TiltPin = Button(17, pull_up=False)  # Capteur d'inclinaison connect√© √† la broche GPIO 17, sans r√©sistance pull-up
   green_led = LED(27)  # LED verte connect√©e √† la broche GPIO 27
   red_led = LED(22)   # LED rouge connect√©e √† la broche GPIO 22

   def detect():
       """
       Detect the tilt sensor state and control the LEDs.
       Turns on the red LED and turns off the green LED when tilted.
       Turns off the red LED and turns on the green LED when not tilted.
       """
       if TiltPin.is_pressed:  # V√©rifier si le capteur est inclin√©
           print('    *************')
           print('    *   Tilt!   *')
           print('    *************')
           red_led.on()   # Allumer la LED rouge
           green_led.off()  # √âteindre la LED verte
       else:  # Si le capteur n'est pas inclin√©
           red_led.off()  # √âteindre la LED rouge
           green_led.on()  # Allumer la LED verte

   try:
       while True:
           # V√©rifier continuellement l'√©tat du capteur d'inclinaison et mettre √† jour les LEDs
           TiltPin.when_pressed = detect
           TiltPin.when_released = detect

   except KeyboardInterrupt:
       # G√©rer une interruption clavier (Ctrl+C) pour sortir proprement de la boucle
       pass


**Explication du code**

#. Cette ligne d√©finit le script pour √™tre ex√©cut√© avec Python 3 et importe les classes ``LED`` et ``Button`` de ``gpiozero`` pour contr√¥ler les p√©riph√©riques GPIO.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Importation des classes LED et Button

#. Initialise le capteur d'inclinaison connect√© √† la broche GPIO 17 (avec r√©sistance pull-up d√©sactiv√©e) et deux LEDs connect√©es aux broches GPIO 27 et 22.

   .. code-block:: python

       # Initialisation du d√©tecteur d'inclinaison et des LEDs avec GPIO Zero
       TiltPin = Button(17, pull_up=False)  # Capteur d'inclinaison connect√© √† la broche GPIO 17, sans r√©sistance pull-up
       green_led = LED(27)  # LED verte connect√©e √† la broche GPIO 27
       red_led = LED(22)   # LED rouge connect√©e √† la broche GPIO 22

#. D√©finit la fonction ``detect``, qui v√©rifie l'√©tat du capteur d'inclinaison. Si inclin√©, elle allume la LED rouge et √©teint la LED verte. Si non inclin√©, elle fait l'inverse.

   .. code-block:: python

       def detect():
           """
           Detect the tilt sensor state and control the LEDs.
           Turns on the red LED and turns off the green LED when tilted.
           Turns off the red LED and turns on the green LED when not tilted.
           """
           if TiltPin.is_pressed:  # V√©rifier si le capteur est inclin√©
               print('    *************')
               print('    *   Tilt!   *')
               print('    *************')
               red_led.on()   # Allumer la LED rouge
               green_led.off()  # √âteindre la LED verte
           else:  # Si le capteur n'est pas inclin√©
               red_led.off()  # √âteindre la LED rouge
               green_led.on()  # Allumer la LED verte

#. La boucle principale affecte la fonction ``detect`` aux √©v√©nements ``when_pressed`` et ``when_released`` du capteur. Le bloc ``try-except`` g√®re une interruption clavier pour une terminaison propre du script.

   .. code-block:: python

       try:
           while True:
               # V√©rifier continuellement l'√©tat du capteur d'inclinaison et mettre √† jour les LEDs
               TiltPin.when_pressed = detect
               TiltPin.when_released = detect

       except KeyboardInterrupt:
           # G√©rer une interruption clavier (Ctrl+C) pour sortir proprement de la boucle
           pass

