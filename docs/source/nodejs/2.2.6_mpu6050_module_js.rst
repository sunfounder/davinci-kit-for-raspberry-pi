.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d‚Äôexperts** : R√©solvez les probl√®mes post-achat et les d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour enrichir vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d‚Äôun acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

2.2.6 Module MPU6050
========================

Introduction
---------------

Le MPU-6050 est le premier et le seul dispositif de suivi de mouvement √† 6 axes 
au monde (gyroscope √† 3 axes et acc√©l√©rom√®tre √† 3 axes), con√ßu pour les smartphones, 
les tablettes et les capteurs portables. Il se distingue par ses faibles co√ªts, sa 
faible consommation d'√©nergie et ses performances √©lev√©es.

Dans cette exp√©rience, nous utiliserons le bus I2C pour obtenir les valeurs des capteurs 
d'acc√©l√©ration sur trois axes et du gyroscope sur trois axes pour le module MPU6050 et 
les afficherons √† l‚Äô√©cran.

Composants
--------------

.. image:: ../img/list_2.2.6.png



Sch√©ma de c√¢blage
---------------------

Le MPU6050 communique avec le microcontr√¥leur via l‚Äôinterface de bus I2C. Les broches 
SDA1 et SCL1 doivent √™tre connect√©es aux broches correspondantes.

.. image:: ../img/image330.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Montez le circuit.

.. image:: ../img/image227.png


**√âtape 2 :** Configurez l'I2C (voir l'annexe :ref:`i2c configuration`. Si vous avez d√©j√† configur√© l'I2C, passez cette √©tape.)

**√âtape 3 :** Acc√©dez au r√©pertoire du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 4 :** Installez les d√©pendances.

.. raw:: html

   <run></run>

.. code-block::

    sudo npm install mpu6050-gyro

**√âtape 5 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node mpu6050_module.js

Une fois le code ex√©cut√©, l‚Äôangle de d√©viation sur les axes X et Y, ainsi que 
l‚Äôacc√©l√©ration et la vitesse angulaire sur chaque axe mesur√©s par le MPU6050 
seront affich√©s √† l‚Äô√©cran apr√®s le calcul.

**Code**

.. code-block:: js

    var gyro = require("mpu6050-gyro");
    
    var address = 0x68; // Adresse du MPU6050
    var bus = 1; // Bus I2C utilis√©   
    var gyro = new gyro(bus, address);
    
    async function update_telemetry() {
        
        var gyro_xyz = gyro.get_gyro_xyz();
        var accel_xyz = gyro.get_accel_xyz();
        
        var gyro_data = {
            gyro_xyz: gyro_xyz,
            accel_xyz: accel_xyz,
            rollpitch: gyro.get_roll_pitch( gyro_xyz, accel_xyz )
        }
        
        console.log(gyro_data);
        
        setTimeout(update_telemetry, 500);
    }
    
    if ( gyro ) {
        update_telemetry();
    }

**Explication du code**

.. code-block:: js

    var gyro = require("mpu6050-gyro");
    
    var address = 0x68; //MPU6050 address
    var bus = 1; //i2c bus used   
    var gyro = new gyro( bus,address );

Importer le module ``mpu6050-gyro``, sp√©cifier l'adresse du MPU6050 et cr√©er 
l‚Äôobjet gyro pour appeler les fonctions encapsul√©es dans le module.

.. note::
    About this module, please refer to: https://www.npmjs.com/package/mpu6050-gyro

.. code-block:: js

    var gyro_xyz = gyro.get_gyro_xyz();
    var accel_xyz = gyro.get_accel_xyz();
    
    var gyro_data = {
        gyro_xyz: gyro_xyz,
        accel_xyz: accel_xyz,
        rollpitch: gyro.get_roll_pitch( gyro_xyz, accel_xyz )
    }
    
    console.log(gyro_data);
    
    setTimeout(update_telemetry, 500);

Le module encapsule trois fonctions disponibles :

``gyro.get_gyro_xyz()`` : Renvoie un objet JSON avec les donn√©es brutes X, Y, Z du gyroscope.

``gyro.get_accel_xyz()`` : Renvoie un objet JSON avec les donn√©es brutes X, Y, Z de l'acc√©l√©rom√®tre.

``gyro.get_roll_pitch(gyro_xyz, accel_xyz)`` : Renvoie un objet JSON avec les angles de roulis et de tangage en degr√©s.

Image du ph√©nom√®ne
----------------------

.. image:: ../img/image228.jpeg
