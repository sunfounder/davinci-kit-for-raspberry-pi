.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur du Raspberry Pi, de l‚ÄôArduino et de l‚ÄôESP32 aux c√¥t√©s d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des tirages au sort et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pi5_alarm:

3.1.3 Alarme de Recul
========================

Introduction
---------------

Dans ce projet, nous allons utiliser un √©cran LCD, un buzzer et des capteurs 
ultrasoniques pour cr√©er un syst√®me d‚Äôassistance au stationnement en marche 
arri√®re. Nous pourrons le placer sur un v√©hicule t√©l√©command√© pour simuler le 
processus r√©el de recul d‚Äôune voiture dans un garage.

Composants N√©cessaires
-------------------------

Pour ce projet, nous aurons besoin des composants suivants :

.. image:: ../python_pi5/img/4.1.9_reversing_alarm_list.png
    :width: 800
    :align: center

.. C'est certainement plus pratique d'acheter un kit complet, voici le lien : 

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Nom	
..         - COMPOSANTS DANS CE KIT
..         - LIEN
..     *   - Kit Raphael
..         - 337
..         - |link_Raphael_kit|

.. Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - INTRODUCTION DU COMPOSANT
..         - LIEN D'ACHAT

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`buzzer`
..         - \-
..     *   - :ref:`transistor`
..         - |link_transistor_buy|
..     *   - :ref:`ultrasonic_sensor`
..         - |link_ultrasonic_buy|
..     *   - :ref:`i2c_lcd1602`
..         - |link_i2clcd1602_buy|

Sch√©ma de C√¢blage
----------------------

Le capteur ultrasonique d√©tecte la distance entre lui-m√™me et l'obstacle, qui 
sera affich√©e sur l'√©cran LCD sous forme de valeur num√©rique. Simultan√©ment, 
le capteur active le buzzer, √©mettant des sons d‚Äôalerte de fr√©quences diff√©rentes 
selon la valeur de la distance.

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO17       Pin 11   0        17
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.9_reversing_alarm_schematic.png
   :align: center

Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Montez le circuit.

.. image:: ../python_pi5/img/4.1.9_reversing_alarm_circuit.png
    :align: center

**√âtape 2 :** Changez le r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le programme.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.3_ReversingAlarm.py

Lorsque le programme s‚Äôex√©cute, le module de capteur ultrasonique d√©tecte la 
distance jusqu‚Äô√† l‚Äôobstacle, affiche l‚Äôinformation sur l‚Äô√©cran LCD1602 et √©met 
des tonalit√©s d‚Äôavertissement dont la fr√©quence varie en fonction de la distance d√©tect√©e.

.. note::

    * Si vous recevez l'erreur ``FileNotFoundError: [Errno 2] No such file or directory: '/dev/i2c-1'``, veuillez consulter :ref:`i2c_config` pour activer l'I2C.
    * Si vous recevez l'erreur ``ModuleNotFoundError: No module named 'smbus2'``, ex√©cutez la commande ``sudo pip3 install smbus2``.
    * Si l'erreur ``OSError: [Errno 121] Remote I/O error`` appara√Æt, cela signifie que le module est mal c√¢bl√© ou qu‚Äôil est d√©fectueux.
    * Si le code et le c√¢blage sont corrects, mais que l'√©cran LCD n'affiche toujours pas de contenu, vous pouvez tourner le potentiom√®tre √† l'arri√®re pour augmenter le contraste.


.. warning::

    Si un message d'erreur du type ``RuntimeError: Cannot determine SOC peripheral base address`` appara√Æt, veuillez vous r√©f√©rer √† :ref:`faq_soc`.

**Code**

.. note::
    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Cependant, avant cela, assurez-vous d'√™tre dans le r√©pertoire source comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, vous pouvez ex√©cuter le code pour observer les r√©sultats.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import LCD1602
    import time
    from gpiozero import DistanceSensor, Buzzer

    # Initialisation du capteur ultrasonique avec les broches GPIO
    sensor = DistanceSensor(echo=24, trigger=23)  # Broche Echo : GPIO 24, Broche Trigger : GPIO 23

    # Initialisation du buzzer connect√© √† la broche GPIO 17
    buzzer = Buzzer(17)

    def lcdsetup():
        # Initialisation de l'√©cran LCD avec l'adresse I2C et activation du r√©tro√©clairage
        LCD1602.init(0x27, 1)  # 0x27 est l'adresse I2C de l'√©cran LCD
        LCD1602.clear()  # Effacer l'√©cran LCD
        # Affichage des messages de d√©marrage sur l'√©cran LCD
        LCD1602.write(0, 0, 'Ultrasonic Starting')
        LCD1602.write(1, 1, 'By SunFounder')
        time.sleep(2)  # Attendre 2 secondes

    def distance():
        # Calculer et retourner la distance mesur√©e par le capteur
        dis = sensor.distance * 100  # Convertir la distance en centim√®tres
        print('Distance: {:.2f} cm'.format(dis))  # Afficher la distance avec deux d√©cimales
        time.sleep(0.3)  # Attendre 0,3 seconde avant la prochaine mesure
        return dis

    def loop():
        # Mesurer la distance en continu et mettre √† jour l'√©cran LCD et le buzzer
        while True:
            dis = distance()  # Obtenir la distance actuelle
            # Afficher la distance et g√©rer les alertes en fonction de celle-ci
            if dis > 400:  # V√©rifier si la distance est hors de port√©e
                LCD1602.clear()
                LCD1602.write(0, 0, 'Error')
                LCD1602.write(3, 1, 'Out of range')
                time.sleep(0.5)
            else:
                # Afficher la distance actuelle sur l'√©cran LCD
                LCD1602.clear()
                LCD1602.write(0, 0, 'Distance is')
                LCD1602.write(5, 1, str(round(dis, 2)) + ' cm')
                # Ajuster la fr√©quence du buzzer en fonction de la distance
                if dis >= 50:
                    time.sleep(0.5)
                elif 20 < dis < 50:
                    # Distance moyenne : fr√©quence moyenne du buzzer
                    for _ in range(2):
                        buzzer.on()
                        time.sleep(0.05)
                        buzzer.off()
                        time.sleep(0.2)
                elif dis <= 20:
                    # Distance proche : fr√©quence √©lev√©e du buzzer
                    for _ in range(5):
                        buzzer.on()
                        time.sleep(0.05)
                        buzzer.off()
                        time.sleep(0.05)

    try:
        lcdsetup()  # Configurer l'√©cran LCD
        loop()      # D√©marrer la boucle de mesure
    except KeyboardInterrupt:
        # √âteindre le buzzer et effacer l'√©cran LCD en cas d'interruption par l'utilisateur (ex. Ctrl+C)
        buzzer.off()
    LCD1602.clear()


**Explication du Code**

#. Ce script utilise plusieurs biblioth√®ques pour son bon fonctionnement. La biblioth√®que ``LCD1602`` g√®re l'affichage de l'√©cran LCD, tandis que ``time`` fournit les fonctions li√©es au temps. La biblioth√®que ``gpiozero`` est essentielle pour les interactions avec les broches GPIO du Raspberry Pi, en particulier pour contr√¥ler le capteur de distance et le buzzer.

   .. code-block:: python

       #!/usr/bin/env python3
       import LCD1602
       import time
       from gpiozero import DistanceSensor, Buzzer

#. Le capteur ultrasonique est configur√© avec ses broches Echo et Trigger connect√©es respectivement aux broches GPIO 24 et 23. De plus, un buzzer est connect√© √† la broche GPIO 17.

   .. code-block:: python

       # Initialisation du capteur ultrasonique avec les broches GPIO
       sensor = DistanceSensor(echo=24, trigger=23)  # Broche Echo : GPIO 24, Broche Trigger : GPIO 23

       # Initialisation du buzzer connect√© √† la broche GPIO 17
       buzzer = Buzzer(17)

#. L'initialisation de l'√©cran LCD consiste √† le configurer, √† effacer l'affichage et √† afficher un message de d√©marrage.

   .. code-block:: python

       def lcdsetup():
           # Initialisation de l'√©cran LCD avec l'adresse I2C et activation du r√©tro√©clairage
           LCD1602.init(0x27, 1)  # 0x27 est l'adresse I2C de l'√©cran LCD
           LCD1602.clear()  # Effacer l'√©cran LCD
           # Affichage des messages de d√©marrage sur l'√©cran LCD
           LCD1602.write(0, 0, 'Ultrasonic Starting')
           LCD1602.write(1, 1, 'By SunFounder')
           time.sleep(2)  # Attendre 2 secondes
#. La fonction ``distance`` calcule la distance mesur√©e par le capteur ultrasonique et l'affiche, puis retourne la valeur en centim√®tres.

   .. code-block:: python

       def distance():
           # Calculer et retourner la distance mesur√©e par le capteur
           dis = sensor.distance * 100  # Convertir la distance en centim√®tres
           print('Distance: {:.2f} cm'.format(dis))  # Afficher la distance avec deux d√©cimales
           time.sleep(0.3)  # Attendre 0,3 seconde avant la prochaine mesure
           return dis

#. La boucle principale mesure continuellement la distance, met √† jour l'√©cran LCD et le buzzer. Elle g√®re les diff√©rentes plages de distance avec des actions sp√©cifiques, comme l'affichage de messages d'erreur ou la variation de la fr√©quence du buzzer en fonction de la distance mesur√©e.

   .. code-block:: python

       def loop():
           # Mesurer continuellement la distance et mettre √† jour l'√©cran LCD et le buzzer
           while True:
               dis = distance()  # Obtenir la distance actuelle
               # Afficher la distance et g√©rer les alertes en fonction de celle-ci
               if dis > 400:  # V√©rifier si la distance est hors de port√©e
                   LCD1602.clear()
                   LCD1602.write(0, 0, 'Error')
                   LCD1602.write(3, 1, 'Out of range')
                   time.sleep(0.5)
               else:
                   # Afficher la distance actuelle sur l'√©cran LCD
                   LCD1602.clear()
                   LCD1602.write(0, 0, 'Distance is')
                   LCD1602.write(5, 1, str(round(dis, 2)) + ' cm')
                   # Ajuster la fr√©quence du buzzer en fonction de la distance
                   if dis >= 50:
                       time.sleep(0.5)
                   elif 20 < dis < 50:
                       # Distance moyenne : fr√©quence moyenne du buzzer
                       for _ in range(2):
                           buzzer.on()
                           time.sleep(0.05)
                           buzzer.off()
                           time.sleep(0.2)
                   elif dis <= 20:
                       # Distance proche : fr√©quence √©lev√©e du buzzer
                       for _ in range(5):
                           buzzer.on()
                           time.sleep(0.05)
                           buzzer.off()
                           time.sleep(0.05)

#. Lors de l'ex√©cution, le script initialise l'√©cran LCD et entre dans la boucle principale. Il peut √™tre interrompu par une commande clavier (Ctrl+C), ce qui √©teint le buzzer et efface l'√©cran LCD.

   .. code-block:: python

       try:
           lcdsetup()  # Configurer l'√©cran LCD
           loop()      # D√©marrer la boucle de mesure
       except KeyboardInterrupt:
           # √âteindre le buzzer et effacer l'√©cran LCD en cas d'interruption par l'utilisateur (ex. Ctrl+C)
           buzzer.off()
           LCD1602.clear()
