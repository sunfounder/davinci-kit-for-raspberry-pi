.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur de l'univers Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et Partagez** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

3.1.9 Serrure √† Code
====================

Introduction
---------------

Dans ce projet, nous utiliserons un pav√© num√©rique (Keypad) et un √©cran LCD 
pour cr√©er une serrure √† combinaison. Le LCD affichera une invite correspondante 
pour que vous puissiez saisir votre mot de passe sur le pav√© num√©rique. Si le mot 
de passe est correct, le message ¬´ Correct ¬ª s'affichera.

Sur la base de ce projet, nous pouvons ajouter d'autres composants √©lectroniques, 
tels qu'un buzzer ou des LED, pour varier les comportements du syst√®me en fonction 
de l'entr√©e du mot de passe.

Composants
------------
.. image:: img/list_Password_Lock.png
    :align: center

Sch√©ma de c√¢blage
--------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: img/Schematic_three_one9.png
   :align: center

Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image262.png
   :alt: 3.1.3_PasswordLock_bb_ÁúãÂõæÁéã
   :width: 800

**√âtape 2 :** Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.9/

**√âtape 3 :** Compilez.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.9_PasswordLock.cpp -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier compil√©.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Lorsque le code s'ex√©cute, utilisez le pav√© num√©rique pour saisir le mot 
de passe. Si ¬´ CORRECT ¬ª appara√Æt sur l'√©cran LCD1602, cela signifie que 
le mot de passe est correct ; sinon, ¬´ WRONG KEY ¬ª s'affichera.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur indiquant ¬´ wiringPi.h : Aucun fichier ou r√©pertoire de ce type ¬ª, veuillez consulter :ref:`C code is not working?`.


**Explication du Code**

.. code-block:: c

    #define ROWS  4 
    #define COLS  4
    #define BUTTON_NUM (ROWS * COLS)
    #define LENS  4

    unsigned char KEYS[BUTTON_NUM] {  
    '1','2','3','A',
    '4','5','6','B',
    '7','8','9','C',
    '*','0','#','D'};

    char password[LENS]={'1','9','8','4'};

Ici, nous d√©finissons la longueur du mot de passe avec **LENS**, le tableau **KEYS** qui contient les valeurs des touches du clavier matriciel et le tableau **password** qui stocke le mot de passe correct.

.. code-block:: c

    void keyRead(unsigned char* result);
    bool keyCompare(unsigned char* a, unsigned char* b);
    void keyCopy(unsigned char* a, unsigned char* b);
    void keyPrint(unsigned char* a);
    void keyClear(unsigned char* a);
    int keyIndexOf(const char value);

Voici la d√©claration des sous-fonctions pour la gestion du clavier matriciel. R√©f√©rez-vous √† la section :ref:`2.1.5 Keypad` de ce document pour plus de d√©tails.

.. code-block:: c

    void write_word(int data);
    void send_command(int comm);
    void send_data(int data);
    void lcdInit();
    void clear();
    void write(int x, int y, char const data[]);

Voici la d√©claration des sous-fonctions pour l'√©cran **LCD1602**. R√©f√©rez-vous √† la section :ref:`1.1.7 I2C LCD1602` de ce document pour plus de d√©tails.

.. code-block:: c

    while(1){
            keyRead(pressed_keys);
            bool comp = keyCompare(pressed_keys, last_key_pressed);
            ...
                    testword[keyIndex]=pressed_keys[0];
                    keyIndex++;
                    if(keyIndex==LENS){
                        if(check()==0){
                            clear();
                            write(3, 0, "WRONG KEY!");
                            write(0, 1, "please try again");
                            }
                    ...

Lit la valeur de la touche press√©e et la stocke dans le tableau **testword**. 
Si le nombre de valeurs saisies est sup√©rieur √† **4**, la v√©rification du mot 
de passe est automatiquement d√©clench√©e et le r√©sultat est affich√© sur l'interface LCD.

.. code-block:: c

    int check(){
        for(int i=0;i<LENS;i++){
            if(password[i]!=testword[i])
            {return 0;}
        }
        return 1;
    }

V√©rifie la validit√© du mot de passe. Retourne **1** si le mot de passe est correct, 
**0** sinon.

