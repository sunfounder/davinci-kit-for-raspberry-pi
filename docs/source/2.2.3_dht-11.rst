.. note::

    Hola, ¡bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook! Sumérgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¿Por qué unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desafíos técnicos con ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Accede antes que nadie a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos más recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones en épocas festivas.

    👉 ¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y únete hoy mismo.

2.2.3 DHT-11
==============

Introducción
---------------

El sensor digital de temperatura y humedad DHT11 es un sensor compuesto que 
proporciona una salida de señal digital calibrada para temperatura y humedad. 
Se aplican tecnologías avanzadas de módulos de recolección digital y de sensado 
de temperatura y humedad para asegurar alta confiabilidad y excelente estabilidad 
en el producto.

Los sensores incluyen un sensor resistivo de humedad y un sensor de temperatura 
NTC, conectados a un microcontrolador de alto rendimiento de 8 bits.

Componentes
-------------

.. image:: img/list_2.2.3_dht-11.png


Principio
------------

El DHT11 es un sensor digital de temperatura y humedad básico y de bajo costo. 
Utiliza un sensor capacitivo de humedad y un termistor para medir el aire 
circundante, y envía una señal digital a través del pin de datos (no se necesitan 
pines de entrada analógicos).

.. image:: img/image205.png
    :width: 200

Solo tiene tres pines: VCC, GND y DATA. El proceso de comunicación comienza 
cuando la línea de datos envía señales de inicio al DHT11, que recibe las 
señales y devuelve una señal de respuesta. Luego, el dispositivo anfitrión 
recibe la señal de respuesta y empieza a recibir datos de humedad y temperatura 
en 40 bits (8 bits para la humedad entera + 8 bits para el decimal de la humedad 
+ 8 bits para la temperatura entera + 8 bits para el decimal de la temperatura + 8 bits 
de verificación). Para obtener más detalles, consulta la hoja de datos del DHT11.



Diagrama Esquemático
------------------------

.. image:: img/image326.png


Procedimiento Experimental
-----------------------------

**Paso 1:** Construye el circuito.

.. image:: img/image207.png
    :width: 800



Para Usuarios del Lenguaje C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Paso 2:** Ve a la carpeta del código.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.3/

**Paso 3:** Compila el código.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.3_DHT.c -lwiringPi

**Paso 4:** Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Una vez que el código se ejecute, el programa imprimirá la temperatura 
y humedad detectadas por el DHT11 en la pantalla de la computadora.

.. note::

    Si no funciona después de ejecutar, o si aparece el mensaje de error: \"wiringPi.h: No such file or directory\", consulta :ref:`C code is not working?`.

**Código**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <stdint.h>

    #define maxTim 85
    #define dhtPin 0

    int dht11_dat[5] = {0,0,0,0,0};
    **Explicación del Código**

.. code-block:: c

    void readDht11() {
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0, i;
        float Fah; // fahrenheit
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
        // baja el pin por 18 milisegundos
        pinMode(dhtPin, OUTPUT);
        digitalWrite(dhtPin, LOW);
        delay(18);
        // luego sube el pin por 40 microsegundos
        digitalWrite(dhtPin, HIGH);
        delayMicroseconds(40); 
        // prepara la lectura del pin
        pinMode(dhtPin, INPUT);

        // detectar cambios y leer datos
        for ( i=0; i< maxTim; i++) {
            counter = 0;
            while (digitalRead(dhtPin) == laststate) {
                counter++;
                delayMicroseconds(1);
                if (counter == 255) {
                    break;
                }
            }
            laststate = digitalRead(dhtPin);

            if (counter == 255) break;
            // ignora las primeras 3 transiciones
            if ((i >= 4) && (i%2 == 0)) {
                // almacena cada bit en los bytes de almacenamiento
                dht11_dat[j/8] <<= 1;
                if (counter > 50)
                    dht11_dat[j/8] |= 1;
                j++;
            }
        }
        // verifica que se hayan leído 40 bits (8 bits x 5) y confirma el checksum en el último byte
        // imprime los datos si son correctos
        if ((j >= 40) && 
                (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) {
            Fah = dht11_dat[2] * 9. / 5. + 32;
            printf("Humedad = %d.%d %% Temperatura = %d.%d *C (%.1f *F)\n", 
                    dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], Fah);
        }
    }

    int main (void) {
        if(wiringPiSetup() == -1){ // si falla la inicialización de wiring, imprime un mensaje en pantalla
            printf("¡Error al configurar wiringPi!");
            return 1; 
        }
        while (1) {
            readDht11();
            delay(500); // espera 1 segundo para refrescar
        }
        return 0 ;
    }
**Explicación del Código**

.. code-block:: c

    void readDht11() {
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0, i;
        float Fah; // fahrenheit
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
        // ...
    }

Esta función realiza la lectura del DHT11.

Generalmente se divide en tres partes:

1. Prepararse para leer el pin:

.. code-block:: c

    // poner el pin a bajo nivel por 18 milisegundos
    pinMode(dhtPin, OUTPUT);
    digitalWrite(dhtPin, LOW);
    delay(18);
    // luego subirlo por 40 microsegundos
    digitalWrite(dhtPin, HIGH);
    delayMicroseconds(40); 
    // preparar para leer el pin
    pinMode(dhtPin, INPUT);

El flujo de comunicación está determinado por la sincronización de trabajo.

.. image:: img/image208.png
    :width: 800



Cuando el DHT11 se inicia, la MCU envía una señal de bajo nivel y luego 
mantiene la señal en alto nivel durante 40 μs. Después de esto, comienza 
la detección de la condición del entorno externo.

2. Leer los datos:

.. code-block:: c

    // detectar cambios y leer datos  
    for ( i=0; i< maxTim; i++) {
            counter = 0;
            while (digitalRead(dhtPin) == laststate) {
                counter++;
                delayMicroseconds(1);
                if (counter == 255) {
                    break;
                }
            }
            laststate = digitalRead(dhtPin);
            if (counter == 255) break;
            // ignorar las primeras 3 transiciones
            if ((i >= 4) && (i%2 == 0)) {
                // almacenar cada bit en los bytes de almacenamiento
                dht11_dat[j/8] <<= 1;
                if (counter > 50)
                    dht11_dat[j/8] |= 1;
                j++;
            }
        }

El bucle almacena los datos detectados en el array dht11_dat[]. El DHT11 
transmite datos de 40 bits a la vez. Los primeros 16 bits están relacionados 
con la humedad, los 16 bits intermedios con la temperatura, y los últimos 
ocho bits se utilizan para verificación. El formato de los datos es:

**8 bits de datos enteros de humedad** + **8 bits de datos decimales de 
humedad** + **8 bits de datos enteros de temperatura** + **8 bits de datos 
decimales de temperatura** + **8 bits de verificación**.

3. Imprimir Humedad y Temperatura.

.. code-block:: c

    // verificar que hemos leído 40 bits (8 bits x 5 ) + comprobar el checksum en el último byte
    // imprimir si los datos son correctos
    if ((j >= 40) && 
            (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) {
        Fah = dht11_dat[2] * 9. / 5. + 32;
        printf("Humidity = %d.%d %% Temperature = %d.%d *C (%.1f *F)\n", 
                dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], Fah);
    }

Cuando se almacenan los 40 bits de datos, se verifica la validez de los datos 
a través del **bit de verificación (dht11_dat[4])**, y luego se imprime la 
temperatura y la humedad.

Por ejemplo, si los datos recibidos son 00101011 (valor de 8 bits de la parte 
entera de humedad) 00000000 (valor de 8 bits de la parte decimal de humedad) 
00111100 (valor de 8 bits de la parte entera de temperatura) 00000000 (valor 
de 8 bits de la parte decimal de temperatura) 01100111 (bit de verificación).

**Cálculo:**

00101011+00000000+00111100+00000000=01100111.

El resultado final es igual al bit de verificación, lo que indica que los datos recibidos son correctos:

Humedad = 43%, Temperatura = 60°C.

Si no es igual al bit de verificación, la transmisión de datos no es normal y se reciben los datos nuevamente.

Para Usuarios del Lenguaje Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Paso 2:** Dirígete a la carpeta del código.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**Paso 3:** Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.3_DHT.py

Una vez que el código se ejecuta, el programa imprimirá en pantalla la 
temperatura y la humedad detectadas por el DHT11.

**Código**

.. note::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el código a continuación. 
    Pero antes de eso, debes ir a la ruta del código fuente como ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    dhtPin = 17

    GPIO.setmode(GPIO.BCM)

    MAX_UNCHANGE_COUNT = 100

    STATE_INIT_PULL_DOWN = 1
    STATE_INIT_PULL_UP = 2
    STATE_DATA_FIRST_PULL_DOWN = 3
    STATE_DATA_PULL_UP = 4
    STATE_DATA_PULL_DOWN = 5

    def readDht11():
        GPIO.setup(dhtPin, GPIO.OUT)
        GPIO.output(dhtPin, GPIO.HIGH)
        time.sleep(0.05)
        GPIO.output(dhtPin, GPIO.LOW)
        time.sleep(0.02)
        GPIO.setup(dhtPin, GPIO.IN, GPIO.PUD_UP)

        unchanged_count = 0
        last = -1
        data = []
        while True:
            current = GPIO.input(dhtPin)
            data.append(current)
            if last != current:
                unchanged_count = 0
                last = current
            else:
                unchanged_count += 1
                if unchanged_count > MAX_UNCHANGE_COUNT:
                    break

        state = STATE_INIT_PULL_DOWN

        lengths = []
        current_length = 0

        for current in data:
            current_length += 1

            if state == STATE_INIT_PULL_DOWN:
                if current == GPIO.LOW:
                    state = STATE_INIT_PULL_UP
                else:
                    continue
            if state == STATE_INIT_PULL_UP:
                if current == GPIO.HIGH:
                    state = STATE_DATA_FIRST_PULL_DOWN
                else:
                    continue
            if state == STATE_DATA_FIRST_PULL_DOWN:
                if current == GPIO.LOW:
                    state = STATE_DATA_PULL_UP
                else:
                    continue
            if state == STATE_DATA_PULL_UP:
                if current == GPIO.HIGH:
                    current_length = 0
                    state = STATE_DATA_PULL_DOWN
                else:
                    continue
            if state == STATE_DATA_PULL_DOWN:
                if current == GPIO.LOW:
                    lengths.append(current_length)
                    state = STATE_DATA_PULL_UP
                else:
                    continue
        if len(lengths) != 40:
            #print ("Datos incorrectos, omitir")
            return False

        shortest_pull_up = min(lengths)
        longest_pull_up = max(lengths)
        halfway = (longest_pull_up + shortest_pull_up) / 2
        bits = []
        the_bytes = []
        byte = 0

        for length in lengths:
            bit = 0
            if length > halfway:
                bit = 1
            bits.append(bit)
        #print ("bits: %s, longitud: %d" % (bits, len(bits)))
        for i in range(0, len(bits)):
            byte = byte << 1
            if (bits[i]):
                byte = byte | 1
            else:
                byte = byte | 0
            if ((i + 1) % 8 == 0):
                the_bytes.append(byte)
                byte = 0
        #print (the_bytes)
        checksum = (the_bytes[0] + the_bytes[1] + the_bytes[2] + the_bytes[3]) & 0xFF
        if the_bytes[4] != checksum:
            #print ("Datos incorrectos, omitir")
            return False

        return the_bytes[0], the_bytes[2]

    def main():

        while True:
            result = readDht11()
            if result:
                humidity, temperature = result
                print ("humidity: %s %%,  Temperature: %s C`" % (humidity, temperature))
            time.sleep(1)

    def destroy():
        GPIO.cleanup()

    if __name__ == '__main__':
        try:
            main()
        except KeyboardInterrupt:
            destroy()
**Explicación del Código**

.. code-block:: python

    def readDht11():
        GPIO.setup(dhtPin, GPIO.OUT)
        GPIO.output(dhtPin, GPIO.HIGH)
        time.sleep(0.05)
        GPIO.output(dhtPin, GPIO.LOW)
        time.sleep(0.02)
        GPIO.setup(dhtPin, GPIO.IN, GPIO.PUD_UP)
        unchanged_count = 0
        last = -1
        data = []
        #...

Esta función se utiliza para implementar las funciones del DHT11. Almacena 
los datos detectados en el arreglo the_bytes[]. El DHT11 transmite datos de 
40 bits a la vez. Los primeros 16 bits están relacionados con la humedad, 
los 16 bits del medio están relacionados con la temperatura y los últimos ocho 
bits se utilizan para la verificación. El formato de los datos es:

**Datos enteros de humedad de 8 bits** + **Datos decimales de humedad de 8 bits** + 
**Datos enteros de temperatura de 8 bits** + **Datos decimales de temperatura de 8 bits** + 
**Bit de verificación de 8 bits**.

Cuando se verifica la validez a través del bit de verificación, la función 
devuelve dos resultados: 1. error; 2. humedad y temperatura.

.. code-block:: python

    checksum = (the_bytes[0] + the_bytes[1] + the_bytes[2] + the_bytes[3]) & 0xFF
    if the_bytes[4] != checksum:
        #print ("Datos incorrectos, omitir")
        return False

    return the_bytes[0], the_bytes[2]

Por ejemplo, si los datos recibidos son 00101011 (valor de 8 bits de humedad 
entera) 00000000 (valor de 8 bits de humedad decimal) 00111100 (valor de 8 bits 
de temperatura entera) 00000000 (valor de 8 bits de temperatura decimal) 01100111 
(bit de verificación)

**Cálculo:**

00101011 + 00000000 + 00111100 + 00000000 = 01100111.

Si el resultado final es igual a los datos del bit de verificación, la transmisión 
de datos es anormal: devuelve False.

Si el resultado final es igual a los datos del bit de verificación, los datos 
recibidos son correctos, entonces se devolverán the_bytes[0] y the_bytes[2] y 
se mostrará "Humedad = 43%, Temperatura = 60°C".

Imagen del Fenómeno
------------------------

.. image:: img/image209.jpeg