.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes techniques et questions apr√®s-vente avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Obtenez un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.1.6 Joystick
=================

Introduction
---------------

Dans ce projet, nous allons apprendre comment fonctionne un joystick. 
Nous allons manipuler le joystick et afficher les r√©sultats √† l'√©cran.

Composants
---------------

.. image:: img/image317.png


Principe
-----------

**Joystick**

L'id√©e de base d'un joystick est de traduire le mouvement d'un manche en 
informations √©lectroniques que l'ordinateur peut traiter.

Pour communiquer toute l'amplitude des mouvements √† l'ordinateur, un joystick 
doit mesurer la position du manche sur deux axes : l'axe X (gauche-droite) et 
l'axe Y (haut-bas). Comme en g√©om√©trie de base, les coordonn√©es X-Y d√©terminent 
pr√©cis√©ment la position du manche.

Pour d√©terminer la position du manche, le syst√®me de contr√¥le du joystick surveille 
simplement la position de chaque axe. Le joystick analogique conventionnel le fait 
avec deux potentiom√®tres, ou r√©sistances variables.

Le joystick dispose √©galement d'une entr√©e num√©rique qui est activ√©e lorsque l'on 
appuie sur le joystick.

.. image:: img/image318.png

Sch√©ma de c√¢blage
--------------------

Lorsque les donn√©es du joystick sont lues, il y a quelques diff√©rences entre les axes : 
les donn√©es des axes X et Y sont analogiques, et n√©cessitent donc l'utilisation de 
l'ADC0834 pour convertir la valeur analogique en valeur num√©rique. Les donn√©es de 
l'axe Z sont num√©riques, vous pouvez donc directement utiliser le GPIO pour les lire, 
ou √©galement utiliser l'ADC.

.. image:: img/image319.png

.. image:: img/image320.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Construire le circuit.

.. image:: img/image193.png
    :width: 800


Pour les utilisateurs du langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Aller dans le r√©pertoire du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.1.6/

**√âtape 3 :** Compiler le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.6_Joystick.c -lwiringPi

**√âtape 4 :** Ex√©cuter le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s avoir ex√©cut√© le code, tournez le joystick, et les valeurs correspondantes 
de x, y et Btn seront affich√©es √† l'√©cran.

.. note::

    Si cela ne fonctionne pas apr√®s ex√©cution ou si une erreur ¬´ wiringPi.h: Aucun fichier ou r√©pertoire de ce type ¬ª appara√Æt, veuillez vous r√©f√©rer √† :ref:`C code is not working?`.
**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <softPwm.h>

    typedef unsigned char uchar;
    typedef unsigned int uint;

    #define     ADC_CS    0
    #define     ADC_CLK   1
    #define     ADC_DIO   2
    #define     BtnPin    3

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Bit de d√©marrage
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Mode Single End
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // ODD
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,odd);  delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // S√©lection
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,sel);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);
        
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        
        for(i=0;i<8;i++)
        {
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
            pinMode(ADC_DIO, INPUT);
            dat1=dat1<<1 | digitalRead(ADC_DIO);
        }
        for(i=0;i<8;i++)
        {
            dat2 = dat2 | ((uchar)(digitalRead(ADC_DIO))<<i);
            digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
            digitalWrite(ADC_CLK,0);    delayMicroseconds(2);
        }
        digitalWrite(ADC_CS,1);
        pinMode(ADC_DIO, OUTPUT);
        return(dat1==dat2) ? dat1 : 0;
    }
    int main(void)
    {
        uchar x_val;
        uchar y_val;
        uchar btn_val;
        if(wiringPiSetup() == -1){ // lorsque l'initialisation de wiring √©choue, afficher un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(BtnPin,  INPUT);
        pullUpDnControl(BtnPin, PUD_UP);
        pinMode(ADC_CS,  OUTPUT);
        pinMode(ADC_CLK, OUTPUT);

        while(1){
            x_val = get_ADC_Result(0);
            y_val = get_ADC_Result(1);
            btn_val = digitalRead(BtnPin);
            printf("x = %d, y = %d, btn = %d\n", x_val, y_val, btn_val);
            delay(100);
        }
        return 0;
    }
**Explication du Code**

.. code-block:: c

    uchar get_ADC_Result(uint channel)
    {
        uchar i;
        uchar dat1=0, dat2=0;
        int sel = channel > 1 & 1;
        int odd = channel & 1;

        digitalWrite(ADC_CLK, 1);
        delayMicroseconds(2);
        digitalWrite(ADC_CLK, 0);
        delayMicroseconds(2);

        pinMode(ADC_DIO, OUTPUT);
        digitalWrite(ADC_CS, 0);
        // Bit de d√©marrage
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        // Mode Single End
        digitalWrite(ADC_CLK,0);
        digitalWrite(ADC_DIO,1);    delayMicroseconds(2);
        digitalWrite(ADC_CLK,1);    delayMicroseconds(2);
        ......

Le processus de fonctionnement de cette fonction est d√©taill√© dans la section 2.1.4 Potentiom√®tre.

.. code-block:: c

    while(1){
            x_val = get_ADC_Result(0);
            y_val = get_ADC_Result(1);
            btn_val = digitalRead(BtnPin);
            printf("x = %d, y = %d, btn = %d\n", x_val, y_val, btn_val);
            delay(100);
        }

Les broches VRX et VRY du joystick sont connect√©es respectivement aux canaux 
CH0 et CH1 de l'ADC0834. La fonction getResult() est donc appel√©e pour lire 
les valeurs de CH0 et CH1, qui sont ensuite stock√©es dans les variables x_val 
et y_val. De plus, la valeur de SW du joystick est lue et stock√©e dans la 
variable btn_val. Enfin, les valeurs de x_val, y_val et btn_val sont imprim√©es 
√† l'√©cran gr√¢ce √† la fonction print().

Pour les utilisateurs Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**√âtape 3 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.6_Joystick.py

Apr√®s l'ex√©cution du code, tournez le joystick, puis les valeurs correspondantes 
de x, y, Btn s'affichent √† l'√©cran.


**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source tel que ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import ADC0834
    import time

    BtnPin = 22

    def setup():
        # Configure les modes GPIO en mode BCM
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BtnPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        ADC0834.setup()

    def destroy():
        # Lib√®re les ressources
        GPIO.cleanup()

    def loop():
        while True:
            x_val = ADC0834.getResult(0)
            y_val = ADC0834.getResult(1)
            Btn_val = GPIO.input(BtnPin)
            print ('X: %d  Y: %d  Btn: %d' % (x_val, y_val, Btn_val))
            time.sleep(0.2)

    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # Lorsque 'Ctrl+C' est press√©, le programme destroy() sera ex√©cut√©.
            destroy()

**Explication du Code**

.. code-block:: python

    def loop():
        while True:
            x_val = ADC0834.getResult(0)
            y_val = ADC0834.getResult(1)
            Btn_val = GPIO.input(BtnPin)
            print ('X: %d  Y: %d  Btn: %d' % (x_val, y_val, Btn_val))
            time.sleep(0.2)

Les broches VRX et VRY du joystick sont connect√©es respectivement aux canaux CH0 et 
CH1 de l'ADC0834. La fonction getResult() est donc appel√©e pour lire les valeurs de 
CH0 et CH1. Ces valeurs sont ensuite stock√©es dans les variables x_val et y_val. 
De plus, la valeur de SW du joystick est lue et stock√©e dans la variable btn_val. 
Enfin, les valeurs de x_val, y_val et btn_val sont imprim√©es √† l'√©cran avec la fonction print().

Image du ph√©nom√®ne
---------------------

.. image:: img/image194.jpeg

