.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook¬†! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des promotions et √† des tirages au sort lors des f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous¬†? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui¬†!

2.1.2 Interrupteur √† glissi√®re
===================================

Introduction
------------

Dans cette le√ßon, nous allons apprendre √† utiliser un interrupteur √† glissi√®re. 
Habituellement, l'interrupteur √† glissi√®re est soud√© sur une carte PCB comme 
interrupteur d'alimentation, mais ici, nous devons l'ins√©rer dans la breadboard, 
donc il pourrait ne pas √™tre bien fix√©. Nous l‚Äôutilisons sur la breadboard pour 
montrer son fonctionnement.

Composants
-------------

.. image:: img/list_2.1.2_slide_switch.png


Principe
-----------

**Interrupteur √† glissi√®re**

.. image:: img/image156.jpeg


Un interrupteur √† glissi√®re, comme son nom l'indique, permet de glisser la barre 
de l'interrupteur pour connecter ou rompre le circuit et ainsi basculer entre les 
circuits. Les types les plus couramment utilis√©s sont SPDT, SPTT, DPDT, DPTT, etc. 
L'interrupteur √† glissi√®re est couramment utilis√© dans les circuits basse tension. 
Il est caract√©ris√© par sa flexibilit√© et sa stabilit√© et est largement utilis√© dans 
les instruments √©lectriques et les jouets √©lectriques.

Fonctionnement : La broche du milieu est fixe. Lorsque vous tirez la glissi√®re vers 
la gauche, les deux broches de gauche sont connect√©es¬†; lorsque vous la tirez vers la 
droite, les deux broches de droite sont connect√©es. Ainsi, il fonctionne comme un 
interrupteur reliant ou d√©connectant les circuits. Voir l'illustration ci-dessous¬†:

.. image:: img/image304.png


Le symbole du circuit pour l'interrupteur √† glissi√®re est montr√© ci-dessous. La broche 
2 dans le sch√©ma fait r√©f√©rence √† la broche du milieu.

.. image:: img/image159.png


**Condensateur**

Le condensateur est un composant capable de stocker de l'√©nergie sous forme de charge 
√©lectrique ou de produire une diff√©rence de potentiel (tension statique) entre ses plaques, 
√† l'instar d'une petite batterie rechargeable.

Unit√©s standard de capacit√©

Microfarad (ŒºF) 1ŒºF = 1/1 000 000 = 0,000001 = :math:`10^{- 6}` F

Nanofarad (nF) 1nF = 1/1 000 000 000 = 0,000000001 = :math:`10^{- 9}`\ F

Picofarad (pF) 1pF = 1/1 000 000 000 000 = 0,000000000001 = :math:`10^{- 12}`\ F

.. note::
    Ici, nous utilisons un **condensateur 104 (10 x 10\ 4\ pF)**. Comme les anneaux des 
    r√©sistances, les num√©ros sur les condensateurs permettent de lire leurs valeurs une 
    fois assembl√©s sur la carte. Les deux premiers chiffres repr√©sentent la valeur et le 
    dernier chiffre signifie le multiplicateur. Ainsi, 104 repr√©sente une puissance de 
    10 x 10 √† la 4 (en pF), soit 100 nF.

Sch√©ma de c√¢blage
--------------------

Connectez la broche du milieu de l'interrupteur √† glissi√®re √† GPIO17 et deux LEDs aux 
roches GPIO22 et GPIO27 respectivement. Lorsque vous faites glisser l'interrupteur, vous 
verrez les deux LEDs s‚Äôallumer alternativement.

.. image:: img/image305.png


.. image:: img/image306.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1¬†:** Construire le circuit.

.. image:: img/image161.png
    :width: 800



Pour les utilisateurs de C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2** : Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.1.2

**√âtape 3** : Compilez.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.2_Slider.c -lwiringPi 

**√âtape 4** : Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Lorsque le code est en cours d'ex√©cution, si l'interrupteur est d√©plac√© vers la gauche, 
la LED jaune s'allume ; vers la droite, la lumi√®re rouge s'allume.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution ou si un message d'erreur appara√Æt : \"wiringPi.h: No such file or directory\", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #define slidePin        0
    #define led1            3
    #define led2            2

    int main(void)
    {
        // Si l'initialisation de wiringPi √©choue, afficher un message √† l'√©cran
        if(wiringPiSetup() == -1){
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(slidePin, INPUT);
        pinMode(led1, OUTPUT);
        pinMode(led2, OUTPUT);
        while(1){
            // interrupteur √† glissi√®re en haut, led1 allum√©e
            if(digitalRead(slidePin) == 1){
                digitalWrite(led1, LOW);
                digitalWrite(led2, HIGH);
                printf("LED1 on\n");
                delay(100);
            }
            // interrupteur √† glissi√®re en bas, led2 allum√©e
            if(digitalRead(slidePin) == 0){
                digitalWrite(led2, LOW);
                digitalWrite(led1, HIGH);
                printf(".....LED2 on\n");
                delay(100);
            }
        }
        return 0;
    }

**Explication du code**

.. code-block:: c

    if(digitalRead(slidePin) == 1){
                digitalWrite(led1, LOW);
                digitalWrite(led2, HIGH);
                printf("LED1 on\n");
        }

Lorsque l'interrupteur √† glissi√®re est tir√© vers la droite, la broche du milieu 
et celle de droite sont connect√©es ; le Raspberry Pi lit un niveau haut sur la 
„ÄÅbroche du milieu, donc la LED1 s'allume et la LED2 s'√©teint.

.. code-block:: c

    if(digitalRead(slidePin) == 0){
                digitalWrite(led2, LOW);
                digitalWrite(led1, HIGH);
                printf(".....LED2 on\n");
            }

Lorsque l'interrupteur √† glissi√®re est tir√© vers la gauche, la broche du milieu et 
celle de gauche sont connect√©es ; le Raspberry Pi lit un niveau bas, donc la LED2 
s'allume et la LED1 s'√©teint.


Pour les utilisateurs de Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2** : Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python

**√âtape 3** : Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.2_Slider.py

Lorsque le code est en cours d'ex√©cution, si l'interrupteur est d√©plac√© vers la 
gauche, la LED jaune s'allume ; vers la droite, la lumi√®re rouge s'allume.
**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. 
    Mais avant cela, vous devez acc√©der au chemin du code source comme ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    # D√©finir la broche #17 comme broche de l'interrupteur √† glissi√®re, #22 comme broche led1, #27 comme broche led2
    slidePin = 17
    led1Pin = 22
    led2Pin = 27

    # D√©finir une fonction setup pour quelques configurations
    def setup():
        # D√©finir les modes GPIO sur le num√©rotage BCM
        GPIO.setmode(GPIO.BCM)
        # Configurer slidePin en entr√©e
        # Configurer ledPin en sortie,
        # et niveau initial √† High(3,3v)
        GPIO.setup(slidePin, GPIO.IN)
        GPIO.setup(led1Pin, GPIO.OUT, initial=GPIO.HIGH)
        GPIO.setup(led2Pin, GPIO.OUT, initial=GPIO.HIGH)

    # D√©finir une fonction principale pour le processus principal
    def main():
        while True:
            # interrupteur √† glissi√®re haut, led1 allum√©e
            if GPIO.input(slidePin) == 1:
                print ('LED1 ON')
                GPIO.output(led1Pin, GPIO.LOW)
                GPIO.output(led2Pin, GPIO.HIGH)

            # interrupteur √† glissi√®re bas, led2 allum√©e
            if GPIO.input(slidePin) == 0:
                print ('    LED2 ON')
                GPIO.output(led2Pin, GPIO.LOW)
                GPIO.output(led1Pin, GPIO.HIGH)

            time.sleep(0.5)

    # D√©finir une fonction destroy pour tout nettoyer apr√®s
    # la fin du script
    def destroy():
        # √âteindre les LED
        GPIO.output(led1Pin, GPIO.HIGH)
        GPIO.output(led2Pin, GPIO.HIGH)
        # Lib√©rer les ressources
        GPIO.cleanup()                     

    # Si vous ex√©cutez directement ce script, faites :
    if __name__ == '__main__':
        setup()
        try:
            main()
        # Quand 'Ctrl+C' est appuy√©, le programme
        # destroy() sera ex√©cut√©.
        except KeyboardInterrupt:
            destroy()

**Explication du code**

.. code-block:: python

    if GPIO.input(slidePin) == 1:
        GPIO.output(led1Pin, GPIO.LOW)
        GPIO.output(led2Pin, GPIO.HIGH)

Lorsque l'interrupteur √† glissi√®re est tir√© vers la droite, la broche du milieu et 
celle de droite sont connect√©es ; le Raspberry Pi lit un niveau haut sur la broche 
du milieu, donc la LED1 s'allume et la LED2 s'√©teint.

.. code-block:: python

    if GPIO.input(slidePin) == 0:
        GPIO.output(led2Pin, GPIO.LOW)
        GPIO.output(led1Pin, GPIO.HIGH)

Lorsque l'interrupteur √† glissi√®re est tir√© vers la gauche, la broche du milieu et 
celle de gauche sont connect√©es ; le Raspberry Pi lit un niveau bas, donc la LED2 
s'allume et la LED1 s'√©teint.

Image du ph√©nom√®ne
----------------------

.. image:: img/image162.jpeg

