.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el fascinante mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones especiales de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

1.3.3 Relay
===============

Introducci√≥n
---------------

En este proyecto, aprenderemos a utilizar un rel√©, uno de los componentes 
m√°s comunes en sistemas de control autom√°tico. Cuando el voltaje, la corriente, 
la temperatura, la presi√≥n, etc., alcanzan, exceden o est√°n por debajo de un 
valor preestablecido, el rel√© conecta o interrumpe el circuito para controlar 
y proteger el equipo.

Componentes
---------------

.. image:: ../img/list_1.3.4.png


Diagrama del Circuito
-------------------------

.. image:: ../img/image345.png


Procedimiento Experimental
------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../img/image144.png

**Paso 2:** Dir√≠gete a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/


**Paso 3:** Ejecuta el c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    sudo node relay.js

Mientras el c√≥digo se ejecuta, el LED se enciende. Adem√°s, puedes escuchar un 
"clic" causado por la apertura del contacto normalmente cerrado y el cierre del 
contacto normalmente abierto.

**C√≥digo**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const relay = new Gpio(17,{mode: Gpio.OUTPUT});

    setInterval(() => {
        relay.digitalWrite(!relay.digitalRead());
    }, 500);

    process.on('SIGINT',function(){
        relay.digitalWrite(0);
        process.exit();
    });


**Explicaci√≥n del C√≥digo**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const relay = new Gpio(17,{mode: Gpio.OUTPUT});

Importa el m√≥dulo ``pigpio`` e instancia un objeto relay de Gpio para controlar el puerto IO Gpio17, configurado en modo de salida.


.. code-block:: js

    setInterval(() => {
        relay.digitalWrite(!relay.digitalRead());
    }, 500);

El rel√© se abre y se cierra continuamente, y los LEDs tambi√©n se encender√°n y apagar√°n a intervalos de 500 ms.


.. code-block:: js

    process.on('SIGINT',function(){
        relay.digitalWrite(0);
        process.exit();
    });

Cuando se detecta ctrl+c, el rel√© se abre.

Imagen del Fen√≥meno
-----------------------

.. image:: ../img/image145.jpeg
