.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez-vous plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux aper√ßus.
    - **Remises sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

1.1.7 LCD1602 I2C
======================

Introduction
------------------

Le LCD1602 est un √©cran √† cristaux liquides de type caract√®re, capable d'afficher 
32 caract√®res (16*2) simultan√©ment.

Composants
-------------------

.. image:: img/list_i2c_lcd.png

Principe
-------------

**LCD1602 I2C**

.. image:: img/i2c_lcd1602.png
    :width: 800

* **GND** : Masse
* **VCC** : Alimentation √©lectrique, 5V.
* **SDA** : Ligne de donn√©es s√©rie. Connecter au VCC via une r√©sistance de tirage.
* **SCL** : Ligne d'horloge s√©rie. Connecter au VCC via une r√©sistance de tirage.

Comme vous le savez, bien que les √©crans LCD et d'autres types d'affichages enrichissent consid√©rablement l'interaction homme-machine, ils pr√©sentent un inconv√©nient commun : lorsqu'ils sont connect√©s √† un contr√¥leur, ils occupent de nombreux ports d'E/S, limitant ainsi d'autres fonctionnalit√©s. 

C'est pourquoi le LCD1602 avec un module I2C a √©t√© d√©velopp√© pour r√©soudre ce probl√®me. Le module I2C int√®gre une puce PCF8574 qui convertit les donn√©es s√©rie I2C en donn√©es parall√®les pour l'affichage sur le LCD. 

* `PCF8574 Datasheet <https://www.ti.com/lit/ds/symlink/pcf8574.pdf?ts=1627006546204&ref_url=https%253A%252F%252Fwww.google.com%252F>`_

**Adresse I2C**

L'adresse par d√©faut est g√©n√©ralement 0x27, dans quelques cas, elle peut √™tre 0x3F.

Prenons l'exemple de l'adresse par d√©faut 0x27, l'adresse de l'appareil peut √™tre modifi√©e en court-circuitant les broches A0/A1/A2 ; √† l'√©tat par d√©faut, A0/A1/A2 sont √† 1, et si le pont est r√©alis√©, A0/A1/A2 sont √† 0.

.. image:: img/i2c_address.jpg
    :width: 600

**R√©tro√©clairage/Contraste**

Le r√©tro√©clairage peut √™tre activ√© par un cavalier. Retirez le cavalier pour d√©sactiver le r√©tro√©clairage. Le potentiom√®tre bleu √† l'arri√®re est utilis√© pour ajuster le contraste (le rapport de luminosit√© entre le blanc le plus brillant et le noir le plus sombre).

.. image:: img/back_lcd1602.jpg

* **Cavalier de court-circuit** : Le r√©tro√©clairage peut √™tre activ√© gr√¢ce √† ce cavalier. Retirez-le pour d√©sactiver le r√©tro√©clairage.
* **Potentiom√®tre** : Utilis√© pour ajuster le contraste (la clart√© du texte affich√©), qui augmente dans le sens horaire et diminue dans le sens antihoraire.


Sch√©ma de c√¢blage
---------------------

============ ========
T-Board Name physical
SDA1         Pin 3
SCL1         Pin 5
============ ========

.. image:: img/schematic_i2c_lcd.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image96.png
    :width: 800



**√âtape 2 :** Configurez I2C (voir :ref:`I2C Configuration`. Si vous avez d√©j√† configur√© I2C, passez cette √©tape).

**√âtape 3 :** Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.1.7/

**√âtape 4 :** Compilez.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.1.7_Lcd1602.c -lwiringPi

**√âtape 5 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, vous verrez ¬´ Greetings ¬ª, ¬´ From SunFounder ¬ª s'afficher sur le LCD.

.. note::

    * Si une erreur indique ``wiringPi.h: No such file or directory``, veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.
    * Si vous obtenez l'erreur ``Unable to open I2C device: No such file or directory``, vous devez vous r√©f√©rer √† :ref:`i2c_config` pour activer I2C et v√©rifier si le c√¢blage est correct.
    * Si le code et le c√¢blage sont corrects mais que le LCD n'affiche toujours pas de contenu, ajustez le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

**Code**

.. code-block:: c

    #include <stdio.h>
    #include <wiringPi.h>
    #include <wiringPiI2C.h>
    #include <string.h>

    int LCDAddr = 0x27;
    int BLEN = 1;
    int fd;

    void write_word(int data){
        int temp = data;
        if ( BLEN == 1 )
            temp |= 0x08;
        else
            temp &= 0xF7;
        wiringPiI2CWrite(fd, temp);
    }

    void send_command(int comm){
        int buf;
        // Envoie des bits 7 √† 4 en premier
        buf = comm & 0xF0;
        buf |= 0x04;			// RS = 0, RW = 0, EN = 1
        write_word(buf);
        delay(2);
        buf &= 0xFB;			// D√©sactive EN (EN = 0)
        write_word(buf);

        // Envoie des bits 3 √† 0 en second
        buf = (comm & 0x0F) << 4;
        buf |= 0x04;			// RS = 0, RW = 0, EN = 1
        write_word(buf);
        delay(2);
        buf &= 0xFB;			// D√©sactive EN (EN = 0)
        write_word(buf);
    }

    void send_data(int data){
        int buf;
        // Envoie des bits 7 √† 4 en premier
        buf = data & 0xF0;
        buf |= 0x05;			// RS = 1, RW = 0, EN = 1
        write_word(buf);
        delay(2);
        buf &= 0xFB;			// D√©sactive EN (EN = 0)
        write_word(buf);

        // Envoie des bits 3 √† 0 en second
        buf = (data & 0x0F) << 4;
        buf |= 0x05;			// RS = 1, RW = 0, EN = 1
        write_word(buf);
        delay(2);
        buf &= 0xFB;			// D√©sactive EN (EN = 0)
        write_word(buf);
    }

    void init(){
        send_command(0x33);	// Initialisation en mode 8 lignes
        delay(5);
        send_command(0x32);	// Passage en mode 4 lignes
        delay(5);
        send_command(0x28);	// 2 lignes et caract√®res 5*7
        delay(5);
        send_command(0x0C);	// Activation de l'affichage sans curseur
        delay(5);
        send_command(0x01);	// Effacement de l'√©cran
        wiringPiI2CWrite(fd, 0x08);
    }

    void clear(){
        send_command(0x01);	// Effacement de l'√©cran
    }

    void write(int x, int y, char data[]){
        int addr, i;
        int tmp;
        if (x < 0)  x = 0;
        if (x > 15) x = 15;
        if (y < 0)  y = 0;
        if (y > 1)  y = 1;

        // D√©place le curseur
        addr = 0x80 + 0x40 * y + x;
        send_command(addr);
        
        tmp = strlen(data);
        for (i = 0; i < tmp; i++){
            send_data(data[i]);
        }
    }


    void main(){
        fd = wiringPiI2CSetup(LCDAddr);
        init();
        write(0, 0, "Greetings!");
        write(1, 1, "From SunFounder");
    }

**Explication du Code**

.. code-block::

    void write_word(int data){‚Ä¶‚Ä¶}
    void send_command(int comm){‚Ä¶‚Ä¶}
    void send_data(int data){‚Ä¶‚Ä¶}
    void init(){‚Ä¶‚Ä¶}
    void clear(){‚Ä¶‚Ä¶}
    void write(int x, int y, char data[]){‚Ä¶‚Ä¶}

Ces fonctions sont utilis√©es pour contr√¥ler le code source ouvert du LCD1602 I2C, ce qui nous permet de l'utiliser facilement.
Parmi ces fonctions, `init()` est utilis√©e pour l'initialisation, `clear()` pour effacer l'√©cran, `write()` pour √©crire les informations √† afficher, et les autres fonctions servent de support √† ces principales.

.. code-block:: c

    fd = wiringPiI2CSetup(LCDAddr);

Cette fonction initialise le syst√®me I2C avec le symbole de l'appareil sp√©cifi√©. Le prototype de la fonction :

.. code-block:: c

    int wiringPiI2CSetup(int devId);

Le param√®tre `devId` est l'adresse du p√©riph√©rique I2C, il peut √™tre trouv√© via la commande `i2cdetect` (voir annexe) et l'adresse de l'I2C LCD1602 est g√©n√©ralement 0x27.

.. code-block:: c

    void write(int x, int y, char data[]){}

Dans cette fonction, `data[]` est le texte √† imprimer sur le LCD, et les param√®tres `x` et `y` d√©terminent la position d'impression (la ligne y+1, la colonne x+1 correspond au point de d√©part du texte √† afficher).

