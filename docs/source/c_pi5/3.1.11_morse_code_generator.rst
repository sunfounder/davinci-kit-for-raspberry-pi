.. note::

    Bonjour, bienvenue dans la communautÃ© SunFounder pour les passionnÃ©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au cÅ“ur de lâ€™univers du Raspberry Pi, de lâ€™Arduino et de lâ€™ESP32 avec dâ€™autres passionnÃ©s.

    **Pourquoi nous rejoindre ?**

    - **Support dâ€™experts** : RÃ©solvez les problÃ¨mes aprÃ¨s-vente et les dÃ©fis techniques avec lâ€™aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre et partager** : Ã‰changez des astuces et tutoriels pour dÃ©velopper vos compÃ©tences.
    - **AperÃ§us exclusifs** : AccÃ©dez en avant-premiÃ¨re aux annonces de nouveaux produits et Ã  des aperÃ§us exclusifs.
    - **RÃ©ductions spÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos nouveaux produits.
    - **Promotions et concours festifs** : Participez Ã  des concours et Ã  des promotions spÃ©ciales pendant les fÃªtes.

    ğŸ‘‰ PrÃªt Ã  explorer et crÃ©er avec nous ? Cliquez sur [|link_sf_facebook|] pour nous rejoindre dÃ¨s aujourd'hui !

3.1.11 GÃ©nÃ©rateur de Code Morse
==================================

Introduction
--------------

Dans cette leÃ§on, nous allons crÃ©er un gÃ©nÃ©rateur de code Morse, oÃ¹ vous 
saisissez une sÃ©rie de lettres anglaises sur le Raspberry Pi pour les convertir 
en signaux de code Morse.

Composants
-------------

.. image:: img/3.1.10.png
    :align: center

SchÃ©ma de CÃ¢blage
---------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: img/Schematic_three_one11.png
   :align: center

ProcÃ©dures ExpÃ©rimentales
-----------------------------

**Ã‰tape 1 :** Montez le circuit. (Faites attention aux pÃ´les du buzzer : 
le cÃ´tÃ© avec lâ€™Ã©tiquette Â« + Â» est le pÃ´le positif et lâ€™autre est le pÃ´le nÃ©gatif.)

.. image:: img/image269.png
   :alt: Morse_bb
   :width: 800

**Ã‰tape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.11/

**Ã‰tape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.11_MorseCodeGenerator.c -lwiringPi

**Ã‰tape 4 :** ExÃ©cutez le fichier exÃ©cutable ci-dessus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Une fois le programme lancÃ©, tapez une sÃ©rie de caractÃ¨res et le buzzer et la 
LED enverront les signaux de code Morse correspondants.

.. note::

    Si cela ne fonctionne pas aprÃ¨s lâ€™exÃ©cution, ou sâ€™il y a un message dâ€™erreur indiquant : \"wiringPi.h: Aucun fichier ou rÃ©pertoire de ce type Â», veuillez vous rÃ©fÃ©rer Ã  :ref:`C code is not working?`.

**Explication du Code**

.. code-block:: c

    structÂ MORSE{
    Â Â Â Â charÂ word;
    Â Â Â Â unsignedÂ charÂ *code;
    };

    structÂ MORSEÂ morseDict[]=
    {
    Â Â Â Â {'A',"01"},Â {'B',"1000"},Â {'C',"1010"},Â {'D',"100"},Â {'E',"0"},Â 
    Â Â Â Â {'F',"0010"},Â {'G',"110"},Â {'H',"0000"},Â {'I',"00"},Â {'J',"0111"},Â 
    Â Â Â Â {'K',"101"},Â {'L',"0100"},Â {'M',"11"},Â {'N',"10"},Â {'O',"111"},Â 
    Â Â Â Â {'P',"0110"},Â {'Q',"1101"},Â {'R',"010"},Â {'S',"000"},Â {'T',"1"},
    Â Â Â Â {'U',"001"},Â {'V',"0001"},Â {'W',"011"},Â {'X',"1001"},Â {'Y',"1011"},Â 
    Â Â Â Â {'Z',"1100"},{'1',"01111"},Â {'2',"00111"},Â {'3',"00011"},Â {'4',"00001"},Â 
    Â Â Â Â {'5',"00000"},{'6',"10000"},Â {'7',"11000"},Â {'8',"11100"},Â {'9',"11110"},
    Â Â Â Â {'0',"11111"},{'?',"001100"},Â {'/',"10010"},Â {',',"110011"},Â {'.',"010101"},
    Â Â Â Â {';',"101010"},{'!',"101011"},Â {'@',"011010"},Â {':',"111000"}
    };

Dans ce programme, une structure `MORSE` est dÃ©finie pour associer chaque lettre et symbole Ã  sa reprÃ©sentation en code Morse. `morseDict` est un tableau de ces structures, oÃ¹ chaque Ã©lÃ©ment reprÃ©sente une lettre ou un caractÃ¨re spÃ©cial avec son code Morse correspondant.

Cette structure `MORSE` constitue le dictionnaire du code Morse, contenant les caractÃ¨res de A Ã  Z, les chiffres de 0 Ã  9 ainsi que les symboles Â« ? Â» Â« / Â» Â« : Â» Â« , Â» Â« . Â» Â« ; Â» Â« ! Â» Â« @ Â».

.. code-block:: c

    charÂ *lookup(charÂ key,structÂ MORSEÂ *dict,intÂ length)
    {
    Â Â Â Â forÂ (intÂ i=0;i<length;i++)
        {
            if(dict[i].word==key){
    Â Â Â Â Â Â Â Â Â Â Â Â returnÂ dict[i].code;
            }
        }
    }

La fonction **lookup()** fonctionne comme une "recherche dans le dictionnaire". 
Elle prend un **key** en paramÃ¨tre, recherche la correspondance dans la structure 
**morseDict** et renvoie le code Morse associÃ©.

.. code-block:: c

    voidÂ on(){
        digitalWrite(ALedPin,HIGH);
        digitalWrite(BeepPin,HIGH);     
    }

CrÃ©ation dâ€™une fonction `on()` pour allumer le buzzer et la LED.

.. code-block:: c

    voidÂ off(){
        digitalWrite(ALedPin,LOW);
        digitalWrite(BeepPin,LOW);
    }

La fonction `off()` Ã©teint le buzzer et la LED.

.. code-block:: c

    voidÂ beep(intÂ dt){
        on();
        delay(dt);
        off();
        delay(dt);
    }

DÃ©finition de la fonction `beep()` pour faire sonner le buzzer et clignoter la LED avec un intervalle de temps `dt`.

.. code-block:: c

    voidÂ morsecode(charÂ *code){
    Â Â Â Â intÂ pauseÂ =Â 250;
    Â Â Â Â charÂ *pointÂ =Â NULL;
    Â Â Â Â intÂ lengthÂ =Â sizeof(morseDict)/sizeof(morseDict[0]);
    Â Â Â Â forÂ (intÂ i=0;i<strlen(code);i++)
        {
            point=lookup(code[i],morseDict,length);
    Â Â Â Â Â Â Â Â forÂ (intÂ j=0;j<strlen(point);j++){
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ (point[j]=='0')
                {
                    beep(pause/2);
    Â Â Â Â Â Â Â Â Â Â Â Â }elseÂ if(point[j]=='1')
                {
                    beep(pause);
                }
                delay(pause);
            }
        }
    }

La fonction `morsecode()` gÃ©nÃ¨re le code Morse des caractÃ¨res saisis. Chaque Â« 1 Â» 
du code produit un son ou une lumiÃ¨re longue, et chaque Â« 0 Â» un son ou une lumiÃ¨re 
courte. Par exemple, pour lâ€™entrÃ©e Â« SOS Â», le signal sera : trois courts, trois longs, 
puis trois courts Â« Â· Â· Â· - - - Â· Â· Â· Â».

.. code-block:: c

    intÂ toupper(intÂ c)
    {
    Â Â Â Â ifÂ ((cÂ >=Â 'a')Â &&Â (cÂ <=Â 'z'))
    Â Â Â Â Â Â Â Â returnÂ cÂ +Â ('A'Â -Â 'a');
    Â Â Â Â returnÂ c;
    }
    charÂ *strupr(charÂ *str)
    {
    Â Â Â Â charÂ *orign=str;
    Â Â Â Â forÂ (;Â *str!='\0';Â str++)
    Â Â Â Â Â Â Â Â *strÂ =Â toupper(*str);
    returnÂ orign;
    }

Avant de coder, il est nÃ©cessaire de convertir toutes les lettres en majuscules.

.. code-block:: c

    voidÂ main(){
        setup();
    Â Â Â Â charÂ *code;
    Â Â Â Â intÂ length=8;
    Â Â Â Â codeÂ =Â (char*)malloc(sizeof(char)*length);
    Â Â Â Â whileÂ (1){
    Â Â Â Â Â Â Â Â printf("PleaseÂ inputÂ theÂ messenger:");
            delay(100);
            scanf("%s",code);
            code=strupr(code);
            printf("%s\n",code);
            delay(100);
            morsecode(code);
        }
    }

Lorsque vous saisissez les caractÃ¨res avec le clavier, `code=strupr(code)` 
convertit les lettres en majuscules. 

La fonction `printf()` affiche ensuite le texte en clair sur lâ€™Ã©cran de lâ€™ordinateur, 
et `morsecode()` fait Ã©mettre le code Morse par le buzzer et la LED.

Ã€ noter que la longueur des caractÃ¨res saisis ne doit pas dÃ©passer la valeur de 
**length** (modifiable).
