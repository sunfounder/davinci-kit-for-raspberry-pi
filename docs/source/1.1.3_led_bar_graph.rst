.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder pour les passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur de l‚Äôunivers Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux aper√ßus.
    - **R√©ductions exclusives** : B√©n√©ficiez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions de vacances et des tirages au sort.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

1.1.3 Graphique √† barres LED
=================================

Introduction
--------------

Dans ce projet, nous allumerons s√©quentiellement les lumi√®res du graphique √† barres LED.

Composants
------------

.. image:: img/list_led_bar.png


Principe
----------

**Graphique √† barres LED**

Le graphique √† barres LED est un tableau de LED utilis√© pour se connecter √† un 
circuit √©lectronique ou un microcontr√¥leur. Il est facile de connecter un graphique 
√† barres LED √† un circuit, tout comme la connexion de 10 LED individuelles √† 10 broches 
de sortie. G√©n√©ralement, nous utilisons le graphique √† barres LED comme indicateur de 
niveau de batterie, dans les √©quipements audio ou les panneaux de contr√¥le industriels. 
Il existe de nombreuses autres applications pour les graphiques √† barres LED.

.. image:: img/led_bar_sche.png

Sch√©ma du circuit
-------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SDA1         Pin 3    8        2
SCL1         Pin 5    9        3
SPICE0       Pin 24   10       8
============ ======== ======== ===

.. image:: img/schematic_led_bar.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: img/image66.png
    :width: 800

Pour les utilisateurs du langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.1.3/

**√âtape 3 :** Compiler le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.1.3_LedBarGraph.c -lwiringPi

**√âtape 4 :** Ex√©cuter le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, vous verrez les LED du graphique √† barres 
s'allumer et s'√©teindre r√©guli√®rement.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution ou s'il y a un message 
    d'erreur tel que : "wiringPi.h: No such file or directory", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    int pins[10] = {0,1,2,3,4,5,6,8,9,10};
    void oddLedBarGraph(void){
        for(int i=0;i<5;i++){
            int j=i*2;
            digitalWrite(pins[j],HIGH);
            delay(300);
            digitalWrite(pins[j],LOW);
        }
    }
    void evenLedBarGraph(void){
        for(int i=0;i<5;i++){
            int j=i*2+1;
            digitalWrite(pins[j],HIGH);
            delay(300);
            digitalWrite(pins[j],LOW);
        }
    }
    void allLedBarGraph(void){
        for(int i=0;i<10;i++){
            digitalWrite(pins[i],HIGH);
            delay(300);
            digitalWrite(pins[i],LOW);
        }
    }
    int main(void)
    {
        if(wiringPiSetup() == -1){ // Si l'initialisation de wiring √©choue, afficher un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }
        for(int i=0;i<10;i++){       // Configurer les broches LED en mode sortie
            pinMode(pins[i], OUTPUT);
            digitalWrite(pins[i],LOW);
        }
        while(1){
            oddLedBarGraph();
            delay(300);
            evenLedBarGraph();
            delay(300);
            allLedBarGraph();
            delay(300);
        }
        return 0;
    }
**Explication du code**

.. code-block:: c

    int pins[10] = {0,1,2,3,4,5,6,8,9,10};

Cr√©er un tableau et lui attribuer les num√©ros de broches correspondant au graphique 
√† barres LED (0,1,2,3,4,5,6,8,9,10), ce tableau sera utilis√© pour contr√¥ler les LED.

.. code-block:: c

    void oddLedBarGraph(void){
        for(int i=0;i<5;i++){
            int j=i*2;
            digitalWrite(pins[j],HIGH);
            delay(300);
            digitalWrite(pins[j],LOW);
        }
    }

Faire en sorte que les LED sur les positions impaires du graphique √† barres LED s‚Äôallument successivement.

.. code-block:: c

    void evenLedBarGraph(void){
        for(int i=0;i<5;i++){
            int j=i*2+1;
            digitalWrite(pins[j],HIGH);
            delay(300);
            digitalWrite(pins[j],LOW);
        }
    }

Faire en sorte que les LED sur les positions paires du graphique √† barres LED s‚Äôallument successivement.

.. code-block:: c

    void allLedBarGraph(void){
        for(int i=0;i<10;i++){
            digitalWrite(pins[i],HIGH);
            delay(300);
            digitalWrite(pins[i],LOW);
        }
    }

Faire en sorte que toutes les LED du graphique √† barres LED s‚Äôallument une √† une.

Pour les utilisateurs du langage Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©der au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**√âtape 3 :** Ex√©cuter le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.3_LedBarGraph.py

Apr√®s l'ex√©cution du code, vous verrez les LED du graphique √† barres s‚Äôallumer 
et s‚Äô√©teindre r√©guli√®rement.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. 
    Mais avant cela, vous devez vous rendre dans le chemin du code source comme ``davinci-kit-for-raspberry-pi/python``.

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    ledPins = [11, 12, 13, 15, 16, 18, 22, 3, 5, 24]

    def oddLedBarGraph():
        for i in range(5):
            j = i*2
            GPIO.output(ledPins[j],GPIO.HIGH)
            time.sleep(0.3)
            GPIO.output(ledPins[j],GPIO.LOW)

    def evenLedBarGraph():
        for i in range(5):
            j = i*2+1
            GPIO.output(ledPins[j],GPIO.HIGH)
            time.sleep(0.3)
            GPIO.output(ledPins[j],GPIO.LOW)

    def allLedBarGraph():
        for i in ledPins:
            GPIO.output(i,GPIO.HIGH)
            time.sleep(0.3)
            GPIO.output(i,GPIO.LOW)

    def setup():
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BOARD)        # Num√©rotation des GPIO par emplacement physique
        for i in ledPins:
            GPIO.setup(i, GPIO.OUT)   # Configurer toutes les broches ledPins en sortie
            GPIO.output(i, GPIO.LOW) # √âteindre toutes les LED

    def loop():
        while True:
            oddLedBarGraph()
            time.sleep(0.3)
            evenLedBarGraph()
            time.sleep(0.3)
            allLedBarGraph()
            time.sleep(0.3)

    def destroy():
        for pin in ledPins:
            GPIO.output(pin, GPIO.LOW)    # √âteindre toutes les LED
        GPIO.cleanup()                     # Lib√©rer les ressources

    if __name__ == '__main__':     # Le programme commence ici
        setup()
        try:
            loop()
        except KeyboardInterrupt:  # Lorsque 'Ctrl+C' est press√©, la fonction destroy() sera ex√©cut√©e.
            destroy()

**Explication du code**

ledPins = [11, 12, 13, 15, 16, 18, 22, 3, 5, 24]
Cr√©er un tableau et lui attribuer les num√©ros de broches correspondant au graphique √† barres LED (11, 12, 13, 15, 16, 18, 22, 3, 5, 24), ce tableau sera utilis√© pour contr√¥ler les LED.

.. code-block:: python

    def oddLedBarGraph():
        for i in range(5):
            j = i*2
            GPIO.output(ledPins[j],GPIO.HIGH)
            time.sleep(0.3)
            GPIO.output(ledPins[j],GPIO.LOW)

Faire en sorte que les LED sur les positions impaires du graphique √† barres LED s‚Äôallument successivement.

.. code-block:: python

    def evenLedBarGraph():
        for i in range(5):
            j = i*2+1
            GPIO.output(ledPins[j],GPIO.HIGH)
            time.sleep(0.3)
            GPIO.output(ledPins[j],GPIO.LOW)

Faire en sorte que les LED sur les positions paires du graphique √† barres LED s‚Äôallument successivement.

.. code-block:: python

    def allLedBarGraph():
        for i in ledPins:
            GPIO.output(i,GPIO.HIGH)
            time.sleep(0.3)
            GPIO.output(i,GPIO.LOW)

Faire en sorte que toutes les LED du graphique √† barres LED s‚Äôallument une √† une.

Image du ph√©nom√®ne
---------------------

.. image:: img/image67.jpeg
