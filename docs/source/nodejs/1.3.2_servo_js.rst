.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder pour les passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, de l‚ÄôArduino et de l‚ÄôESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d‚Äôexperts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques gr√¢ce √† l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprenez et Partagez** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d‚Äôun acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

1.3.2 Servo
==============

Introduction
--------------

Dans ce projet, nous allons apprendre √† faire tourner un servo-moteur.

Composants
------------

.. image:: ../img/list_1.3.2.png



Sch√©ma de c√¢blage
-------------------

.. image:: ../img/image337.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image125.png

**√âtape 2 :** Acc√©der au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 3 :** Ex√©cuter le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node servo.js

Une fois le programme ex√©cut√©, le servo-moteur tournera de 0 degr√©s √† 180 degr√©s, 
puis de 180 degr√©s √† 0 degr√©s, en boucle.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    SERVO_MIN_ANGLE = 0
    SERVO_MAX_ANGLE = 180
    SERVO_MIN_PULSE = 500
    SERVO_MAX_PULSE = 2500

    ServoPin = new Gpio(18, { mode: Gpio.OUTPUT })

    function map(value, inMin, inMax, outMin, outMax){
        return (outMax - outMin) * (value - inMin) / (inMax - inMin) + outMin
    }

    function angle2pulse(angle){
        return Math.floor(map(angle,SERVO_MIN_ANGLE,SERVO_MAX_ANGLE,SERVO_MIN_PULSE ,SERVO_MAX_PULSE))
    }

    let angle=90;
    let step=5;
    setInterval(() => {
        if(angle>=180||angle<=0){
            step=-step
        }
        angle+=step;
        ServoPin.servoWrite(angle2pulse(angle));
    }, 20);

**Explication du code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    ServoPin = new Gpio(18,{mode: Gpio.OUTPUT})

Importer le module pigpio et cr√©er un objet de la classe Gpio, ``ServoPin``, pour contr√¥ler la sortie du Gpio18.

.. code-block:: js

    SERVO_MIN_ANGLE = 0
    SERVO_MAX_ANGLE = 180
    SERVO_MIN_PULSE = 500
    SERVO_MAX_PULSE = 2500

    function map(value, inMin, inMax, outMin, outMax){
        return (outMax - outMin) * (value - inMin) / (inMax - inMin) + outMin
    }

    function angle2pulse(angle){
        return Math.floor(map(angle,SERVO_MIN_ANGLE,SERVO_MAX_ANGLE,SERVO_MIN_PULSE ,SERVO_MAX_PULSE))
    }

D√©finir une fonction qui mappe l‚Äôangle sur la largeur d‚Äôimpulsion.

Cela est n√©cessaire car la fonction de contr√¥le du servo-moteur, ``servoWrite(pulseWidth)``, 
encapsul√©e dans la classe Gpio, a besoin d‚Äôune largeur d‚Äôimpulsion et non d‚Äôun angle. 
L‚Äôangle de rotation du servo que nous utilisons varie de 0 √† 180 degr√©s, ce qui doit √™tre 
mapp√© sur une gamme de largeur d‚Äôimpulsions de 500 √† 2500.

.. code-block:: js

    let angle=90;
    let step=5;
    setInterval(() => {
        if(angle>=180||angle<=0){
            step=-step
        }
        angle+=step;
        ServoPin.servoWrite(angle2pulse(angle));
    }, 20);

Faire osciller le servo de 0 √† 180 degr√©s et vice-versa.


Image du r√©sultat
--------------------

.. image:: ../img/image126.jpeg

