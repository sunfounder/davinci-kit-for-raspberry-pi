.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci Raspberry Pi, Arduino ed ESP32 con altri appassionati.

    **PerchÃ© Unirsi?**

    - **Supporto Esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunitÃ  e del nostro team.
    - **Impara & Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci dei nuovi prodotti.
    - **Sconti Speciali**: Godi di sconti esclusivi sui nostri prodotti piÃ¹ recenti.
    - **Promozioni Festive e Omaggi**: Partecipa a omaggi e promozioni speciali per le festivitÃ .

    ðŸ‘‰ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

2.1.4 Potenziometro
=======================

Introduzione
--------------

La funzione ADC puÃ² essere utilizzata per convertire segnali analogici in 
segnali digitali. In questo esperimento, usiamo lâ€™ADC0834 per ottenere la 
funzione ADC e implementare questo processo tramite un potenziometro. Il 
potenziometro modifica la grandezza fisica, ovvero la tensione, che viene 
convertita dalla funzione ADC.

Componenti
-------------

.. image:: ../img/list_2.1.4_potentiometer.png



Schema a Blocchi
---------------------

.. image:: ../img/image311.png

.. image:: ../img/image312.png


Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image180.png

.. note::
    Posiziona il chip facendo riferimento alla posizione corrispondente 
    indicata nell'immagine. Assicurati che la scanalatura sul chip sia a 
    sinistra quando lo posizioni.

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**Passo 3:** Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo node potentionmeter.js

Dopo l'esecuzione del codice, ruota la manopola del potenziometro: 
l'intensitÃ  del LED cambierÃ  di conseguenza.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    const adc = new ADC0834(17, 18, 27);
    const led = new Gpio(22, {mode: Gpio.OUTPUT});

    setInterval(() => {
        adc.read(0).then((value) => {
            console.log(`Current analogVal: ${value}\n`);
            led.pwmWrite(value);
        }, (error)=>{
            console.log("Error: " + error);
        });
    }, 100);

**Spiegazione del Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

Importa il modulo ``pigpio``.

.. code-block:: js

    const ADC0834 = require('./adc0834.js').ADC0834;

Importiamo un costruttore ``ADC0834`` per utilizzare il modulo adc0834.

.. code-block:: js

   const adc = new ADC0834(17, 18, 27);


Istanzia un oggetto ADC0834: i tre parametri rappresentano i suoi tre pin.

Questo Ã¨ un oggetto "promise"; per comprenderlo meglio puoi fare riferimento al link seguente:

* `Promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_


.. code-block:: js

    setInterval(() => {
        adc.read(0).then((value) => {
            console.log(`Current analogVal: ${value}\n`);
            led.pwmWrite(value);
        }, (error)=>{
            console.log("Error: " + error);
        });
    }, 100);

Ogni 100 ms viene letto il valore del canale 0 dellâ€™ADC0834 (collegato al potenziometro) e il valore viene memorizzato in ``value``.

Stampa il valore ``value`` e usalo per controllare la luminositÃ  del LED, ora puoi vedere che la luminositÃ  del LED cambia in base al valore del potenziometro.


Immagine del Fenomeno
-------------------------

.. image:: ../img/image181.jpeg


