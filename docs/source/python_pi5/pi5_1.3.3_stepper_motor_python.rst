.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres amateurs.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et Partagez** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Profitez d'un acc√®s anticip√© aux nouvelles annonces de produits et d'aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et tirages au sort** : Participez √† des promotions festives et √† des tirages au sort.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.3.3_py_pi5:

1.3.3 Moteur Pas √† Pas
=========================

Introduction
--------------

Les moteurs pas √† pas, en raison de leur conception unique, peuvent √™tre contr√¥l√©s 
avec une grande pr√©cision sans avoir besoin de m√©canismes de r√©troaction. L'axe du 
moteur, √©quip√© d'une s√©rie d'aimants, est command√© par un ensemble de bobines 
√©lectromagn√©tiques qui sont charg√©es positivement et n√©gativement dans une s√©quence 
sp√©cifique, le faisant avancer ou reculer en petits ¬´ pas ¬ª.


Composants requis
---------------------

Pour ce projet, nous aurons besoin des composants suivants :

.. image:: ../python_pi5/img/1.3.3_stepper_motor_list.png
.. raw:: html

   <br/>

Sch√©ma de c√¢blage
---------------------

.. image:: /python_pi5/img/1.3.3_stepper_motor_schematic.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/1.3.3_stepper_motor_circuit.png

**√âtape 2 :** Ouvrez le fichier de code.
.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le programme.
.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.3_StepperMotor.py

Pendant l'ex√©cution du code, le moteur pas √† pas tournera dans le sens horaire ou anti-horaire selon l'entr√©e de votre commande, soit 'a' pour anti-horaire, soit 'c' pour horaire.

.. warning::

    Si le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address`` appara√Æt, veuillez consulter :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Avant cela, assurez-vous d'√™tre dans le chemin source, comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, vous pouvez ex√©cuter directement le programme pour voir l'effet.
.. raw:: html

    <run></run>
.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import OutputDevice
   from time import sleep

   # Initialiser les broches du moteur aux broches GPIO 18, 23, 24, 25
   motorPin = [OutputDevice(pin) for pin in (18, 23, 24, 25)]

   # D√©finir les param√®tres de vitesse de rotation du moteur
   rotationParMinute = 15
   stepsPerRevolution = 2048
   # Calculer le temps d'attente entre chaque pas pour une op√©ration fluide du moteur
   stepSpeed = (60 / rotationPerMinute) / stepsPerRevolution

   def rotary(direction):
       """
       Controls the rotation of the motor based on the specified direction.
       
       :param direction: 'c' for clockwise, 'a' for anti-clockwise
       """
       if direction == 'c':
           # Execute the stepping sequence for clockwise rotation
           for j in range(4):
               for i in range(4):
                   if 0x99 << j & (0x08 >> i):
                       motorPin[i].on()
                   else:
                       motorPin[i].off()
                   sleep(stepSpeed)
       elif direction == 'a':
           # Execute the stepping sequence for anti-clockwise rotation
           for j in range(4):
               for i in range(4):
                   if 0x99 >> j & (0x08 >> i):
                       motorPin[i].on()
                   else:
                       motorPin[i].off()
                   sleep(stepSpeed)

   def loop():
       """
       Continuously prompts the user to select the motor rotation direction
       and controls the motor based on this input.
       """
       while True:
           direction = input('Select motor direction a=anticlockwise, c=clockwise: ')
           if direction == 'c':
               print('Motor running clockwise\n')
               break
           elif direction == 'a':
               print('Motor running anti-clockwise\n')
               break
           else:
               print('Input error, please try again!')

       # Maintient la rotation du moteur dans la direction s√©lectionn√©e
       while True:
           rotary(direction)

   def destroy():
       """
       Safely turns off all motor pins, used for clean shutdown.
       """
       for pin in motorPin:
           pin.off()

   # Ex√©cution principale du programme
   try:
       loop()
   except KeyboardInterrupt:
       destroy()  # Handle keyboard interrupt to safely shut down the motor


**Explication du code**

#. Cette section importe les biblioth√®ques n√©cessaires. ``gpiozero`` pour contr√¥ler les broches GPIO et ``time`` pour la fonction sleep utilis√©e dans la gestion des temporisations.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import OutputDevice
       from time import sleep

#. Initialise les broches GPIO 18, 23, 24 et 25 comme dispositifs de sortie pour contr√¥ler le moteur pas √† pas.

   .. code-block:: python

       # Initialiser les broches du moteur aux broches GPIO 18, 23, 24, 25
       motorPin = [OutputDevice(pin) for pin in (18, 23, 24, 25)]

#. D√©finit la vitesse de rotation du moteur et calcule l'intervalle de temps entre chaque pas pour un fonctionnement fluide.

   .. code-block:: python

       # D√©finir les param√®tres de vitesse de rotation du moteur
       rotationParMinute = 15
       pasParR√©volution = 2048
       # Calculer le temps d'attente entre chaque pas pour une op√©ration fluide du moteur
       stepSpeed = (60 / rotationPerMinute) / stepsPerRevolution

#. La fonction ``rotation`` contr√¥le la rotation du moteur. Elle utilise la manipulation de bits et une s√©quence de pas pour activer les broches du moteur dans le bon ordre pour une rotation horaire ou anti-horaire.

   .. code-block:: python

       def rotary(direction):
           """
           Controls the rotation of the motor based on the specified direction.
           
           :param direction: 'c' for clockwise, 'a' for anti-clockwise
           """
           if direction == 'c':
               # Ex√©cute la s√©quence de pas pour la rotation horaire
               for j in range(4):
                   for i in range(4):
                       if 0x99 << j & (0x08 >> i):
                           motorPin[i].on()
                       else:
                           motorPin[i].off()
                       sleep(stepSpeed)
           elif direction == 'a':
               # Ex√©cute la s√©quence de pas pour la rotation anti-horaire
               for j in range(4):
                   for i in range(4):
                       if 0x99 >> j & (0x08 >> i):
                           motorPin[i].on()
                       else:
                           motorPin[i].off()
                       sleep(stepSpeed)

#. Cette fonction invite continuellement l'utilisateur √† choisir la direction de rotation du moteur et contr√¥le le moteur en fonction de l'entr√©e.

   .. code-block:: python

       def loop():
           """
           Continuously prompts the user to select the motor rotation direction
           and controls the motor based on this input.
           """
           while True:
               direction = input('Select motor direction a=anticlockwise, c=clockwise: ')
               if direction == 'c':
                   print('Motor running clockwise\n')
                   break
               elif direction == 'a':
                   print('Motor running anti-clockwise\n')
                   break
               else:
                   print('Input error, please try again!')

           # Maintient la rotation du moteur dans la direction s√©lectionn√©e
           while True:
               rotary(direction)

#. La fonction ``d√©truire`` √©teint toutes les broches du moteur. Elle est utilis√©e pour un arr√™t propre, garantissant que le moteur s'arr√™te en toute s√©curit√© lorsque le programme se termine.

   .. code-block:: python

       def destroy():
           """
           Safely turns off all motor pins, used for clean shutdown.
           """
           for pin in motorPin:
               pin.off()

#. Le programme principal appelle ``boucle`` et g√®re les interruptions clavier (comme Ctrl+C) pour arr√™ter proprement le moteur en utilisant ``d√©truire``.

   .. code-block:: python

       # Ex√©cution principale du programme
       try:
           boucle()
       except KeyboardInterrupt:
           d√©truire()  # G√®re l'interruption clavier pour arr√™ter proprement le moteur

