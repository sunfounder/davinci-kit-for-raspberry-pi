.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi & Arduino & ESP32 de SunFounder sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

1.1.7 I2C LCD1602
======================

Introduction
------------------

Le LCD1602 est un √©cran √† cristaux liquides de type caract√®re, capable d'afficher simultan√©ment 32 caract√®res (16*2).

Composants
-------------------

.. image:: img/list_i2c_lcd.png

Principe
-----------

**I2C LCD1602**

.. image:: img/i2c_lcd1602.png
    :width: 800

* **GND**: Masse
* **VCC**: Alimentation en tension, 5V.
* **SDA**: Ligne de donn√©es s√©rie. Connectez-la √† VCC via une r√©sistance pull-up.
* **SCL**: Ligne d'horloge s√©rie. Connectez-la √† VCC via une r√©sistance pull-up.

Comme vous le savez, bien que les √©crans LCD et d'autres affichages am√©liorent grandement l'interaction homme-machine, ils partagent une faiblesse commune. Lorsqu'ils sont connect√©s √† un contr√¥leur, plusieurs E/S sont occup√©es, ce qui r√©duit le nombre de ports disponibles pour d'autres fonctions.

Pour rem√©dier √† ce probl√®me, le LCD1602 avec un module I2C a √©t√© d√©velopp√©. Le module I2C int√®gre une puce PCF8574 qui convertit les donn√©es s√©rie I2C en donn√©es parall√®les pour l'affichage LCD.

* `PCF8574 Datasheet <https://www.ti.com/lit/ds/symlink/pcf8574.pdf?ts=1627006546204&ref_url=https%253A%252F%252Fwww.google.com%252F>`_

**Adresse I2C**

L'adresse par d√©faut est g√©n√©ralement 0x27, dans certains cas, elle peut √™tre 0x3F.

Prenons l'exemple de l'adresse par d√©faut 0x27. L'adresse du p√©riph√©rique peut √™tre modifi√©e en court-circuitant les broches A0/A1/A2 ; √† l'√©tat par d√©faut, A0/A1/A2 est √† 1, et si le cavalier est enlev√©, A0/A1/A2 est √† 0.

.. image:: img/i2c_address.jpg
    :width: 600

**R√©tro√©clairage/Contraste**

Le r√©tro√©clairage peut √™tre activ√© via un cavalier, et en enlevant le cavalier, le r√©tro√©clairage est d√©sactiv√©. Le potentiom√®tre bleu √† l'arri√®re est utilis√© pour ajuster le contraste (la diff√©rence de luminosit√© entre le blanc le plus clair et le noir le plus sombre).

.. image:: img/back_lcd1602.jpg

* **Cavalier de court-circuit** : Le r√©tro√©clairage peut √™tre activ√© par ce cavalier, retirez-le pour le d√©sactiver.
* **Potentiom√®tre** : Utilis√© pour ajuster le contraste (la clart√© du texte affich√©), augmentez-le en tournant dans le sens des aiguilles d'une montre et diminuez-le dans le sens inverse.

Sch√©ma
---------------------

============ ========
T-Board Name physical
SDA1         Pin 3
SCL1         Pin 5
============ ========

.. image:: img/schematic_i2c_lcd.png


Proc√©dures exp√©rimentales
------------------------------

**√âtape 1 :** Montez le circuit.

.. image:: img/image96.png
    :width: 800

**√âtape 2** : Configurez l'I2C (voir :ref:`I2C Configuration`. Si vous avez d√©j√† configur√© l'I2C, passez cette √©tape.)

Pour les utilisateurs du langage C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 3 :** Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.1.7/

**√âtape 4 :** Compilez.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.1.7_Lcd1602.c -lwiringPi

**√âtape 5 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, vous verrez "Greetings", "From SunFounder" affich√© sur le LCD.

.. note::

    * Si une erreur du type ``wiringPi.h: No such file or directory`` appara√Æt, veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.
    * Si vous obtenez l'erreur ``Unable to open I2C device: No such file or directory``, vous devez vous r√©f√©rer √† :ref:`i2c_config` pour activer l'I2C et v√©rifier si le c√¢blage est correct.
    * Si le code et le c√¢blage sont corrects, mais que l'√©cran LCD ne s'affiche toujours pas, vous pouvez ajuster le potentiom√®tre √† l'arri√®re pour augmenter le contraste.


**Code**

.. code-block:: c

    #include <stdio.h>
    #include <wiringPi.h>
    #include <wiringPiI2C.h>
    #include <string.h>

    int LCDAddr = 0x27;
    int BLEN = 1;
    int fd;

    void write_word(int data){
        int temp = data;
        if ( BLEN == 1 )
            temp |= 0x08;
        else
            temp &= 0xF7;
        wiringPiI2CWrite(fd, temp);
    }

    void send_command(int comm){
        int buf;
        // Envoyer d'abord les bits 7-4
        buf = comm & 0xF0;
        buf |= 0x04;            // RS = 0, RW = 0, EN = 1
        write_word(buf);
        delay(2);
        buf &= 0xFB;            // Mettre EN = 0
        write_word(buf);

        // Envoyer ensuite les bits 3-0
        buf = (comm & 0x0F) << 4;
        buf |= 0x04;            // RS = 0, RW = 0, EN = 1
        write_word(buf);
        delay(2);
        buf &= 0xFB;            // Mettre EN = 0
        write_word(buf);
    }

    void send_data(int data){
        int buf;
        // Envoyer d'abord les bits 7-4
        buf = data & 0xF0;
        buf |= 0x05;            // RS = 1, RW = 0, EN = 1
        write_word(buf);
        delay(2);
        buf &= 0xFB;            // Mettre EN = 0
        write_word(buf);

        // Envoyer ensuite les bits 3-0
        buf = (data & 0x0F) << 4;
        buf |= 0x05;            // RS = 1, RW = 0, EN = 1
        write_word(buf);
        delay(2);
        buf &= 0xFB;            // Mettre EN = 0
        write_word(buf);
    }

    void init(){
        send_command(0x33);    // Doit initialiser en mode 8 bits en premier
        delay(5);
        send_command(0x32);    // Puis passer en mode 4 bits
        delay(5);
        send_command(0x28);    // 2 lignes et caract√®res de 5*7 points
        delay(5);
        send_command(0x0C);    // Activer l'affichage sans curseur
        delay(5);
        send_command(0x01);    // Effacer l'√©cran
        wiringPiI2CWrite(fd, 0x08);
    }

    void clear(){
        send_command(0x01);    // Effacer l'√©cran
    }

    void write(int x, int y, char data[]){
        int addr, i;
        int tmp;
        if (x < 0)  x = 0;
        if (x > 15) x = 15;
        if (y < 0)  y = 0;
        if (y > 1)  y = 1;

        // D√©placer le curseur
        addr = 0x80 + 0x40 * y + x;
        send_command(addr);
        
        tmp = strlen(data);
        for (i = 0; i < tmp; i++){
            send_data(data[i]);
        }
    }


    void main(){
        fd = wiringPiI2CSetup(LCDAddr);
        init();
        write(0, 0, "Greetings!");
        write(1, 1, "From SunFounder");
    }

**Explication du Code**

.. code-block::

    void write_word(int data){‚Ä¶‚Ä¶}
    void send_command(int comm){‚Ä¶‚Ä¶}
    void send_data(int data){‚Ä¶‚Ä¶}
    void init(){‚Ä¶‚Ä¶}
    void clear(){‚Ä¶‚Ä¶}
    void write(int x, int y, char data[]){‚Ä¶‚Ä¶}

Ces fonctions sont utilis√©es pour contr√¥ler le code source ouvert de l'I2C LCD1602. Elles nous permettent d'utiliser facilement l'I2C LCD1602.
Parmi ces fonctions, `init()` est utilis√©e pour l'initialisation, `clear()` pour effacer l'√©cran, `write()` pour √©crire ce qui est affich√©, et les autres fonctions soutiennent ces op√©rations.

.. code-block:: c

    fd = wiringPiI2CSetup(LCDAddr);

Cette fonction initialise le syst√®me I2C avec le p√©riph√©rique sp√©cifi√©. Le prototype de la fonction :

.. code-block:: c

    int wiringPiI2CSetup(int devId);

Le param√®tre `devId` est l'adresse du p√©riph√©rique I2C, elle peut √™tre trouv√©e avec la commande `i2cdetect` (voir annexe) et l'adresse de l'I2C LCD1602 est g√©n√©ralement 0x27.

.. code-block:: c

    void write(int x, int y, char data[]){}

Dans cette fonction, `data[]` est le texte √† imprimer sur l'√©cran LCD, et les param√®tres `x` et `y` d√©terminent la position d'impression (ligne `y+1`, colonne `x+1` comme position de d√©part du texte √† imprimer).

Pour les utilisateurs de Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 3:** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**√âtape 4:** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.7_Lcd1602.py

Apr√®s l'ex√©cution du code, vous verrez ¬´ Greetings ¬ª, ¬´ From SunFounder ¬ª s'afficher sur l'√©cran LCD.

.. note::

    * Si vous obtenez l'erreur ``FileNotFoundError: [Errno 2] No such file or directory: '/dev/i2c-1'``, vous devez consulter :ref:`i2c_config` pour activer l'I2C.
    * Si vous obtenez l'erreur ``ModuleNotFoundError: No module named 'smbus2'``, ex√©cutez la commande ``sudo pip3 install smbus2``.
    * Si l'erreur ``OSError: [Errno 121] Remote I/O`` appara√Æt, cela signifie que le module est mal c√¢bl√© ou endommag√©.
    * Si le c√¢blage et le code sont corrects mais que l'√©cran LCD n'affiche toujours rien, essayez d'ajuster le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller dans le r√©pertoire du code source tel que ``davinci-kit-for-raspberry-pi/python``. 
    
.. raw:: html

    <run></run>

.. code-block:: python

    import LCD1602
    import time

    def setup():
        LCD1602.init(0x27, 1)  # init(adresse du p√©riph√©rique, lumi√®re de fond)
        LCD1602.write(0, 0, 'Greetings!!')
        LCD1602.write(1, 1, 'from SunFounder')
        time.sleep(2)

    def destroy():
        LCD1602.clear()

    if __name__ == "__main__":
        try:
            setup()
        except KeyboardInterrupt:
            destroy()

**Explication du Code**

.. code-block:: python

    import LCD1602

Ce fichier est un fichier open source pour contr√¥ler l'I2C LCD1602. Il permet d'utiliser facilement l'I2C LCD1602.

.. code-block:: python

    LCD1602.init(0x27, 1)

Cette fonction initialise le syst√®me I2C avec le p√©riph√©rique d√©sign√©. Le premier param√®tre est l'adresse du p√©riph√©rique I2C, d√©tectable par la commande `i2cdetect` (voir l'annexe pour les d√©tails). L'adresse de l'I2C LCD1602 est g√©n√©ralement 0x27.

.. code-block:: python

    LCD1602.write(0, 0, 'Greetings!!')

Dans cette fonction, le texte `'Greetings!!'` est imprim√© sur la ligne `0+1`, colonne `0+1` de l'√©cran LCD.
Vous verrez maintenant ¬´ Greetings! From SunFounder ¬ª affich√© sur l'√©cran LCD.

Image du R√©sultat
------------------------

.. image:: img/image97.jpeg
