.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des d√©monstrations exclusives.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions et cadeaux festifs** : Participez √† des concours et des promotions durant les p√©riodes festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Lumi√®re Intelligente
=======================

Dans ce projet, nous allons apprendre √† contr√¥ler la luminosit√© d'une LED en utilisant le widget curseur de Cloud4RPi.

Proc√©dures exp√©rimentales
----------------------------

Construisez le circuit.

.. image:: img/led1.png
  :align: center

Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/cloud4rpi-raspberrypi-python
    sudo nano smart_light.py

Trouvez la ligne ci-dessous et compl√©tez-la avec le bon token de l'appareil.

.. code-block:: python

    DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'

Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 smart_light.py

Acc√©dez √† Cloud4RPi, ajoutez un nouveau panneau de contr√¥le nomm√© **project3**, et cliquez sur **Add Widget** pour ajouter un widget de type **Slider**.

.. image:: img/led2.png
    :align: center

Une fois ajout√©, vous pouvez utiliser le widget curseur pour contr√¥ler la luminosit√© de la LED.

.. image:: img/led3.png
    :align: center

Explication du code
-----------------------

.. code-block:: python

    led_val = GPIO.PWM(LED_PIN, 2000)
    led_val.start(0)

Appelez la fonction ``GPIO.PWM()`` pour d√©finir ``LED_PIN`` comme une broche PWM et d√©finissez la fr√©quence de la broche PWM √† 2000Hz. Ensuite, utilisez la fonction ``start()`` pour d√©finir le cycle de travail initial √† 0.

.. code-block:: python

    led_val.ChangeDutyCycle(value)

La valeur envoy√©e par le widget curseur au Raspberry Pi est utilis√©e comme cycle de travail PWM pour ajuster la luminosit√© de la LED.

.. code-block:: python

    variables = {
        'CPU Temp': {
            'type': 'numeric',
            'value': 0,
            'bind': led_control
        },
    }

En d√©finissant la valeur de la cl√© ``'value'``, nous pouvons d√©finir la valeur initiale du widget curseur, puis lire en continu la valeur de la cl√© ``'value'`` et envoyer le niveau actuel de ``LED_PIN`` (la valeur retourn√©e par la fonction ``led_control``) √† Cloud4RPi.

