.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur de ces technologies avec d'autres amateurs partageant la m√™me passion.

    **Pourquoi nous rejoindre ?**

    - **Support d'Experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez vos d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez astuces et tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† nos promotions sp√©ciales et tirages au sort pendant les p√©riodes festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pi5_bell:

3.1.10 Alarme Manuelle
=========================

Introduction
------------------

Dans ce projet, nous allons cr√©er un dispositif d'alarme manuel. Vous pouvez remplacer 
l'interrupteur √† bascule par une thermistance ou un capteur photosensible pour r√©aliser 
une alarme de temp√©rature ou de lumi√®re.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/4.1.15_alarm_bell_list.png
    :width: 800
    :align: center

.. Il est certainement plus pratique d'acheter un kit complet, voici le lien :

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Nom	
..         - COMPOSANTS DANS CE KIT
..         - LIEN
..     *   - Kit Raphael
..         - 337
..         - |link_Raphael_kit|

.. Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - INTRODUCTION DES COMPOSANTS
..         - LIEN D'ACHAT

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`led`
..         - |link_led_buy|
..     *   - :ref:`Buzzer`
..         - |link_passive_buzzer_buy|
..     *   - :ref:`slide_switch`
..         - |link_slide_switch_buy|
..     *   - :ref:`transistor`
..         - |link_transistor_buy|
..     *   - :ref:`capacitor`
..         - |link_capacitor_buy|

Sch√©ma du Circuit
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.15_alarm_bell_schematic.png
    :width: 600
    :align: center

Proc√©dure exp√©rimentale
-----------------------------

**√âtape 1** : Construisez le circuit.

.. image:: ../python_pi5/img/4.1.15_alarm_bell_circuit.png

**√âtape 2** : Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3** : Ex√©cutez le script.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.10_AlarmBell_zero.py

Une fois le programme d√©marr√©, l'interrupteur basculera √† droite et le 
buzzer √©mettra des sons d'alarme. En m√™me temps, les LED rouge et verte 
clignoteront √† une certaine fr√©quence.

.. warning::

    Si le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address`` s'affiche, veuillez vous r√©f√©rer √† :ref:`faq_soc`

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code, tel que ``raphael-kit/python-pi5``.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3

    from gpiozero import LED, Button, TonalBuzzer
    import time
    import threading

    # Initialisation du TonalBuzzer sur la broche GPIO 22
    BeepPin = TonalBuzzer(22)

    # Initialisation des LEDs sur les broches GPIO 17 et 27
    ALedPin = LED(17)
    BLedPin = LED(27)

    # Initialisation du bouton sur la broche GPIO 18
    switchPin = Button(18)

    # Variable globale pour contr√¥ler l'√©tat du buzzer et des LEDs
    flag = 0

    def ledWork():
        """
        Control LED blinking pattern based on the flag state.
        When flag is set, alternately blink ALedPin and BLedPin.
        """
        while True:
            if flag:
                # Clignotement alternatif des LEDs
                ALedPin.on()
                time.sleep(0.5)
                ALedPin.off()
                BLedPin.on()
                time.sleep(0.5)
                BLedPin.off()
            else:
                # √âteindre les deux LEDs si flag est d√©sactiv√©
                ALedPin.off()
                BLedPin.off()

    # D√©finir la m√©lodie musicale comme une liste de notes et de leurs dur√©es
    tune = [
        ('C4', 0.1), ('E4', 0.1), ('G4', 0.1), 
        (None, 0.1), 
        ('E4', 0.1), ('G4', 0.1), ('C5', 0.1), 
        (None, 0.1), 
        ('C5', 0.1), ('G4', 0.1), ('E4', 0.1), 
        (None, 0.1), 
        ('G4', 0.1), ('E4', 0.1), ('C4', 0.1), 
        (None, 0.1)
    ]

    def buzzerWork():
        """
        Play a tune using the buzzer based on the flag state.
        The tune is played only when the flag is set.
        """
        while True:
            for note, duration in tune:
                if flag == 0:
                    break
                print(note)  # Afficher la note actuelle dans la console
                BeepPin.play(note)  # Jouer la note actuelle
                time.sleep(duration)  # Pause pendant la dur√©e de la note
            BeepPin.stop()  # Arr√™ter le buzzer apr√®s la m√©lodie

    def main():
        """
        Monitor button press to update the flag state.
        Sets the flag when the button is pressed.
        """
        global flag
        while True:
            flag = 1 if switchPin.is_pressed else 0

    try:
        # Initialisation et d√©marrage des threads pour le contr√¥le du buzzer et des LEDs
        tBuzz = threading.Thread(target=buzzerWork)
        tBuzz.start()
        tLed = threading.Thread(target=ledWork)
        tLed.start()
        main()

    except KeyboardInterrupt:
        # Arr√™ter le buzzer et √©teindre les LEDs en cas d'interruption du programme
        BeepPin.stop()
        ALedPin.off()    
        BLedPin.off()

        
**Explication du Code**

#. Ce segment comprend l'importation des biblioth√®ques essentielles pour impl√©menter des d√©lais et la gestion des threads. Il importe √©galement les classes `LED`, `Button` et `TonalBuzzer` de la biblioth√®que `gpiozero`, n√©cessaires pour contr√¥ler les p√©riph√©riques GPIO sur un Raspberry Pi.

   .. code-block:: python

       #!/usr/bin/env python3

       from gpiozero import LED, Button, TonalBuzzer
       import time
       import threading

#. Configure un buzzer sur la broche GPIO 22, deux LEDs sur les broches GPIO 17 et 27, et initialise un bouton sur la broche GPIO 18. Un drapeau global est √©galement d√©fini pour g√©rer l'√©tat du buzzer et des LEDs.

   .. code-block:: python

       # Initialisation du TonalBuzzer sur la broche GPIO 22
       BeepPin = TonalBuzzer(22)

       # Initialisation des LEDs sur les broches GPIO 17 et 27
       ALedPin = LED(17)
       BLedPin = LED(27)

       # Initialisation du bouton sur la broche GPIO 18
       switchPin = Button(18)

       # Drapeau global pour contr√¥ler l'√©tat du buzzer et des LEDs
       flag = 0

#. Cette fonction contr√¥le le clignotement des LEDs en fonction de l'√©tat du drapeau (`flag`). Si le drapeau est activ√© (1), les LEDs s'allument et s'√©teignent alternativement. Si le drapeau est d√©sactiv√© (0), les deux LEDs restent √©teintes.

   .. code-block:: python

       def ledWork():
           """
           Control LED blinking pattern based on the flag state.
           When flag is set, alternately blink ALedPin and BLedPin.
           """
           while True:
               if flag:
                   # Clignotement alternatif des LEDs
                   ALedPin.on()
                   time.sleep(0.5)
                   ALedPin.off()
                   BLedPin.on()
                   time.sleep(0.5)
                   BLedPin.off()
               else:
                   # √âteindre les deux LEDs si le drapeau est d√©sactiv√©
                   ALedPin.off()
                   BLedPin.off()

#. La m√©lodie est d√©finie comme une s√©quence de notes (fr√©quence) et de dur√©es (secondes).

   .. code-block:: python

       # D√©finir la m√©lodie musicale comme une liste de notes et de leurs dur√©es
       tune = [
           ('C4', 0.1), ('E4', 0.1), ('G4', 0.1), 
           (None, 0.1), 
           ('E4', 0.1), ('G4', 0.1), ('C5', 0.1), 
           (None, 0.1), 
           ('C5', 0.1), ('G4', 0.1), ('E4', 0.1), 
           (None, 0.1), 
           ('G4', 0.1), ('E4', 0.1), ('C4', 0.1), 
           (None, 0.1)
       ]

#. Joue une m√©lodie pr√©d√©finie lorsque le drapeau est activ√©. La m√©lodie s'arr√™te si le drapeau est d√©sactiv√© en cours de lecture.

   .. code-block:: python

       def buzzerWork():
           """
           Play a tune using the buzzer based on the flag state.
           The tune is played only when the flag is set.
           """
           while True:
               for note, duration in tune:
                   if flag == 0:
                       break
                   print(note)  # Affiche la note actuelle dans la console
                   BeepPin.play(note)  # Joue la note actuelle
                   time.sleep(duration)  # Pause pendant la dur√©e de la note
               BeepPin.stop()  # Arr√™te le buzzer apr√®s la m√©lodie

#. V√©rifie en continu l'√©tat du bouton pour activer ou d√©sactiver le drapeau.

   .. code-block:: python

       def main():
           """
           Monitor button press to update the flag state.
           Sets the flag when the button is pressed.
           """
           global flag
           while True:
               flag = 1 if switchPin.is_pressed else 0

#. Les threads pour les fonctions `buzzerWork` et `ledWork` sont d√©marr√©s, leur permettant de s'ex√©cuter simultan√©ment avec la fonction principale.

   .. code-block:: python

       try:
           # Initialiser et d√©marrer les threads pour le contr√¥le du buzzer et des LEDs
           tBuzz = threading.Thread(target=buzzerWork)
           tBuzz.start()
           tLed = threading.Thread(target=ledWork)
           tLed.start()
           main()

#. Arr√™te le buzzer et √©teint les LEDs en cas d'interruption du programme, garantissant une sortie propre.

   .. code-block:: python

       except KeyboardInterrupt:
           # Arr√™ter le buzzer et √©teindre les LEDs en cas d'interruption du programme
           BeepPin.stop()
           ALedPin.off()    
           BLedPin.off()