.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans le monde des Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d‚Äôexperts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux avant-go√ªts exclusifs.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de remises exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des tirages au sort et des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] pour nous rejoindre d√®s aujourd'hui !

1.2.1 Buzzer Actif
=====================

Introduction
---------------

Dans cette le√ßon, nous allons apprendre √† utiliser un buzzer actif pour √©mettre un son avec un transistor PNP.

Composants
-----------

.. image:: img/list_1.2.1.png


Principe
----------

**Buzzer**

Le buzzer est un dispositif sonore √©lectronique avec une structure int√©gr√©e, 
aliment√© par un courant continu (DC). Il est couramment utilis√© dans les ordinateurs, 
imprimantes, photocopieuses, alarmes, jouets √©lectroniques, dispositifs √©lectroniques 
automobiles, t√©l√©phones, minuteries, et autres produits ou dispositifs sonores. Les 
buzzers peuvent √™tre class√©s en deux cat√©gories : les buzzers actifs et passifs 
(voir image ci-dessous). Si vous orientez le buzzer avec les broches vers le haut, 
celui avec un circuit imprim√© vert est un buzzer passif, tandis que celui entour√© de 
ruban noir est un buzzer actif.

Diff√©rence entre un buzzer actif et un buzzer passif :

.. image:: img/image101.png
    :width: 400
    :align: center


La diff√©rence r√©side dans le fait qu‚Äôun buzzer actif poss√®de une source d‚Äôoscillation 
int√©gr√©e, ce qui lui permet de produire un son d√®s qu‚Äôil est aliment√© en √©lectricit√©. 
En revanche, un buzzer passif n‚Äôa pas de source d‚Äôoscillation int√©gr√©e et n√©cessite des 
signaux carr√©s avec une fr√©quence comprise entre 2 kHz et 5 kHz pour √©mettre un son. Le 
buzzer actif est g√©n√©ralement plus co√ªteux que le passif en raison de ses circuits 
oscillants int√©gr√©s.

Le sch√©ma ci-dessous montre le symbole √©lectrique d‚Äôun buzzer. Il comporte deux broches, 
avec une polarit√© positive et n√©gative. La broche marqu√©e d‚Äôun + sur la surface repr√©sente 
l‚Äôanode, et l‚Äôautre repr√©sente la cathode.

.. image:: img/image102.png
    :width: 150
    :align: center


Vous pouvez identifier les broches du buzzer : la broche la plus longue est l‚Äôanode et la 
plus courte est la cathode. Faites attention √† ne pas les inverser lors du c√¢blage, sinon 
le buzzer ne produira pas de son.

Sch√©ma de montage
---------------------

Dans cette exp√©rience, un buzzer actif, un transistor PNP et une r√©sistance de 1kŒ© sont 
utilis√©s entre la base du transistor et le GPIO pour prot√©ger le transistor. Lorsque la 
sortie GPIO17 du Raspberry Pi est aliment√©e avec un niveau bas (0V), le transistor conduit 
en raison de la saturation du courant et le buzzer √©met un son. Mais lorsque le GPIO du 
Raspberry Pi est aliment√© avec un niveau haut, le transistor est coup√© et le buzzer n‚Äô√©met 
plus de son.

.. image:: img/image332.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Montez le circuit. (Faites attention aux polarit√©s du buzzer : la broche 
marqu√©e d‚Äôun + est le p√¥le positif et l‚Äôautre est le p√¥le n√©gatif.)

.. image:: img/image104.png
    :width: 800


**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.2.1/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.2.1_ActiveBuzzer.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier compil√©.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Une fois le code ex√©cut√©, le buzzer √©met un bip.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur : \"wiringPi.h: Aucun fichier ou r√©pertoire de ce type\", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define BeepPin 0
    int main(void){
        if(wiringPiSetup() == -1){ //si l'initialisation de wiring √©choue, affiche un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }
        
        pinMode(BeepPin, OUTPUT);   //d√©finit GPIO0 comme sortie
        while(1){
            //beep on
            printf("Buzzer on\n");
            digitalWrite(BeepPin, LOW);
            delay(100);
            printf("Buzzer off\n");
            //beep off
            digitalWrite(BeepPin, HIGH);
            delay(100);
        }
        return 0;
    }

**Explication du Code**

.. code-block:: c

    digitalWrite(BeepPin, LOW);

Nous utilisons un buzzer actif dans cette exp√©rience, ce qui signifie qu‚Äôil √©mettra 
automatiquement un son lorsqu‚Äôil est connect√© au courant continu. Ce programme configure 
le port I/O √† un niveau bas (0V), ce qui permet de contr√¥ler le transistor et de faire 
√©mettre un son au buzzer. 

.. code-block:: c

    digitalWrite(BeepPin, HIGH);

Configurer le port I/O √† un niveau haut (3,3V), de sorte que le transistor ne soit pas 
aliment√©, et que le buzzer reste silencieux. 

