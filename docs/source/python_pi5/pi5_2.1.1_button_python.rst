.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux pr√©sentations exclusives.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _2.1.1_py_pi5:

2.1.1 Bouton
==============

Introduction
---------------

Dans ce projet, nous allons apprendre √† allumer ou √©teindre une LED √† l'aide d'un bouton.

Composants n√©cessaires
--------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/2.1.1_Button_list.png

.. raw:: html

   <br/>

Sch√©ma de circuit
---------------------

Utilisez un bouton normalement ouvert comme entr√©e pour le Raspberry Pi, selon le sch√©ma de connexion ci-dessous. Lorsque le bouton est press√©, le GPIO18 passe √† un niveau haut (3,3V). Nous pouvons d√©tecter l'√©tat du GPIO18 gr√¢ce √† un programme. Ainsi, si le GPIO18 passe √† un niveau haut, cela signifie que le bouton est press√©. Vous pouvez alors ex√©cuter le code correspondant pour allumer la LED.

.. note::
    La broche la plus longue de la LED est l'anode (+) et la plus courte est la cathode (-).

.. image:: ../python_pi5/img/2.1.1_Button_schematic_1.png

.. image:: ../python_pi5/img/2.1.1_Button_schematic_2.png


Proc√©dure exp√©rimentale
-----------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.1.1_Button_circuit.png

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.1_Button_zero.py

Maintenant, appuyez sur le bouton et la LED s'allumera ; rel√¢chez le bouton et la LED s'√©teindra.

.. warning::

    En cas d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, vous pouvez ex√©cuter le code pour observer le r√©sultat.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Importer les classes LED et Button depuis gpiozero
   from signal import pause  # Importer la fonction pause du module signal

   # Initialiser un objet LED sur la broche GPIO 17
   led = LED(17)
   # Initialiser un objet Button sur la broche GPIO 18
   button = Button(18)

   # Associer l'√©v√©nement "when_pressed" du bouton √† la m√©thode on() de la LED
   button.when_pressed = led.on
   # Associer l'√©v√©nement "when_released" du bouton √† la m√©thode off() de la LED
   button.when_released = led.off

   # Lancer une boucle d'√©v√©nements pour maintenir le script en attente des interactions avec le bouton
   pause()


**Explication du code**

#. Le script est √©crit en Python3 et importe les classes ``LED`` et ``Button`` de la biblioth√®que ``gpiozero``, ainsi que la fonction ``pause`` du module ``signal``.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Importer les classes LED et Button depuis gpiozero
       from signal import pause  # Importer la fonction pause du module signal

#. Initialise un objet ``LED`` sur la broche GPIO 17 et un objet ``Button`` sur la broche GPIO 18.

   .. code-block:: python

       # Initialiser un objet LED sur la broche GPIO 17
       led = LED(17)
       # Initialiser un objet Button sur la broche GPIO 18
       button = Button(18)

#. Configure les gestionnaires d'√©v√©nements pour que la LED s'allume lorsque le bouton est press√© et s'√©teigne lorsque le bouton est rel√¢ch√©.

   .. code-block:: python

       # Associer l'√©v√©nement "when_pressed" du bouton √† la m√©thode on() de la LED
       button.when_pressed = led.on
       # Associer l'√©v√©nement "when_released" du bouton √† la m√©thode off() de la LED
       button.when_released = led.off

#. Cette fonction maintient le script en attente dans une boucle d'√©v√©nements, pr√™t √† r√©agir aux interactions du bouton.

   .. code-block:: python

       # Lancer une boucle d'√©v√©nements pour maintenir le script en attente des interactions avec le bouton
       pause()

