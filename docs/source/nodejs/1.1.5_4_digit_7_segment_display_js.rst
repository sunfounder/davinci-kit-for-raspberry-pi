.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, d'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques gr√¢ce √† l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Obtenez un acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Afficheur 7 segments √† 4 chiffres
====================================

Introduction
--------------

Dans ce projet, nous allons apprendre √† contr√¥ler un afficheur 7 segments √† 4 chiffres.

Composants
-------------

.. image:: img/list_4_digit.png


.. note::
    Dans ce projet, nous utilisons un mod√®le BS pour l'afficheur 7 segments √† 4 chiffres. Si vous utilisez un mod√®le AS, il se peut qu'il ne s'allume pas.

Sch√©ma de c√¢blage
-------------------

.. image:: img/schmatic_4_digit.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Construire le circuit.

.. image:: img/image80.png


**√âtape 2 :** Acc√©der au dossier du code.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 3 :** Ex√©cuter le code.

.. raw:: html

    <run></run>

.. code-block::

    sudo node 4_digit_7_segment_display.js

Apr√®s l'ex√©cution du code, le programme commence √† compter, en augmentant de 1 chaque seconde, et l'afficheur 7 segments √† 4 chiffres affiche le nombre correspondant.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    var counter = 0;

    const number = [0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90]; //for BS
    
    const SDI = new Gpio(24, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(23, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(18, { mode: Gpio.OUTPUT });

    const pin1 = new Gpio(10, { mode: Gpio.OUTPUT });
    const pin2 = new Gpio(22, { mode: Gpio.OUTPUT });
    const pin3 = new Gpio(27, { mode: Gpio.OUTPUT });
    const pin4 = new Gpio(17, { mode: Gpio.OUTPUT });
    const placePin = [pin1, pin2, pin3, pin4];

    function clearDisplay() {
        hc595_shift(0xff); //for BS
    }

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

    function pickDigit(digit) {
        for(let i=0;i<4;i++){
            placePin[i].digitalWrite(0);
        }
        placePin[digit].digitalWrite(1);
    }


    let digit = -1
    setInterval(() => {
        digit = (digit +1)% 4
        clearDisplay();
        pickDigit(digit);
        switch(digit){
            case 0:
                hc595_shift(number[Math.floor(counter % 10)]);  
                break;
            case 1:
                hc595_shift(number[Math.floor(counter % 100 / 10)]);
                break;        
            case 2:
                hc595_shift(number[Math.floor(counter % 1000 / 100)]);
                break;        
            case 3:
                hc595_shift(number[Math.floor(counter % 10000 / 1000)]);
                break;
        }
    }, 5);

    setInterval(() => {
        counter++;
    }, 1000);

**Explication du code**

.. code-block:: js

    const pin1 = new Gpio(10, {mode: Gpio.OUTPUT});
    const pin2 = new Gpio(25, {mode: Gpio.OUTPUT});
    const pin3 = new Gpio(27, {mode: Gpio.OUTPUT});
    const pin4 = new Gpio(17, {mode: Gpio.OUTPUT});
    const placePin = [pin1,pin2,pin3,pin4];    

Initialiser les broches 10, 25, 27 et 17 en mode sortie et les placer dans le tableau ``placePin`` pour faciliter le contr√¥le de l'anode commune de l'afficheur 7 segments √† 4 chiffres.

.. code-block:: js

    const number = [0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90];

D√©finir un tableau constant ``number`` pour repr√©senter les codes hexad√©cimaux des segments de 0 √† 9 (anode commune).

.. code-block:: js

    function clearDisplay() {
        hc595_shift(0xff); 
    }

√âcrire 0xff pour √©teindre l'afficheur.

.. code-block:: js

    function pickDigit(digit) {
        for(let i=0;i<4;i++){
            placePin[i].digitalWrite(0);
        }
        placePin[digit].digitalWrite(1);
    }

S√©lectionner le chiffre √† afficher. 
Une seule position doit √™tre activ√©e √† la fois.
La position activ√©e sera d√©finie √† l‚Äô√©tat haut.

.. code-block:: js

    let digit = -1
    setInterval(() => {
        digit = (digit +1)% 4
        clearDisplay();
        pickDigit(digit);
        switch(digit){
            case 0:
                hc595_shift(number[Math.floor(counter % 10)]);  
                break;
            case 1:
                hc595_shift(number[Math.floor(counter % 100 / 10)]);
                break;        
            case 2:
                hc595_shift(number[Math.floor(counter % 1000 / 100)]);
                break;        
            case 3:
                hc595_shift(number[Math.floor(counter % 10000 / 1000)]);
                break;
        }
    }, 5);

Ce code est utilis√© pour d√©finir le chiffre affich√© sur l'afficheur 7 segments √† 4 chiffres.

Tout d‚Äôabord, on active le quatri√®me segment, puis on y √©crit le chiffre des unit√©s.
Ensuite, on active le troisi√®me segment et on y √©crit le chiffre des dizaines.
Puis on active le second et le premier segment respectivement pour y afficher les centaines et les milliers.
Comme la vitesse de rafra√Æchissement est tr√®s rapide, on per√ßoit un affichage complet de quatre chiffres.

.. code-block:: js

    setInterval(() => {
        counter++;
    }, 1000);

Ajouter une unit√© au ``counter`` chaque seconde qui passe 
(ce qui correspond √† l‚Äôaffichage incr√©ment√© d‚Äôune unit√© chaque seconde).

Image du r√©sultat
---------------------

.. image:: img/image81.jpeg
