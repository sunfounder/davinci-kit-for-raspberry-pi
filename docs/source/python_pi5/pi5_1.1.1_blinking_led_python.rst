.. note::

    Bonjour et bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 ! Plongez-vous plus profond√©ment dans le monde du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits.
    - **Remises sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions et cadeaux festifs** : Participez √† des tirages au sort et des promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _1.1.1_py_pi5:

1.1.1 LED Clignotante
=========================

Introduction
-----------------

Dans ce projet, nous apprendrons √† faire clignoter une LED par programmation. 
Gr√¢ce √† vos param√®tres, votre LED peut produire une s√©rie de ph√©nom√®nes int√©ressants. 
C'est parti !

Composants n√©cessaires
--------------------------

Pour ce projet, nous aurons besoin des composants suivants :

.. image:: ../python_pi5/img/1.1.1_blinking_led_list.png
    :width: 800
    :align: center

.. raw:: html

   <br/>

Sch√©ma de c√¢blage
----------------------

Dans cet exercice, nous connectons la broche GPIO 17 du Raspberry Pi √† l'anode (patte longue) de la LED, puis la cathode (patte courte) de la LED √† une r√©sistance, et enfin l'autre extr√©mit√© de la r√©sistance √† la broche GND du Raspberry Pi. Pour allumer la LED, il faut r√©gler GPIO17 sur l'√©tat haut (3,3 V). Nous pouvons r√©aliser ce ph√©nom√®ne par la programmation.

.. note::

    **Pin11** fait r√©f√©rence √† la 11e broche du Raspberry Pi de gauche √† droite, et ses num√©ros de broche correspondants en **BCM** sont indiqu√©s dans le tableau ci-dessous.

Dans le contexte de la programmation en Python, la broche GPIO 17 est d√©sign√©e comme 
17 dans la colonne BCM du tableau ci-dessous. Cela correspond √©galement √† la 11e broche 
physique sur le Raspberry Pi, appel√©e Pin 11.

============ ======== ===
T-Board Name physical BCM
GPIO17       Pin 11   17
============ ======== ===

.. image:: ../python_pi5/img/1.1.1_blinking_led_schematic.png
    :width: 800
    :align: center

Proc√©dure exp√©rimentale
--------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../python_pi5/img/1.1.1_blinking_led_circuit.png
    :width: 800
    :align: center

**√âtape 2 :** Acc√©dez au dossier du code et ex√©cutez-le.

1. Si vous utilisez un √©cran, nous vous recommandons de suivre les √©tapes suivantes.

Recherchez le fichier `1.1.1_BlinkingLed.py` et double-cliquez pour l'ouvrir. 
Vous √™tes maintenant dans le fichier.

Cliquez sur **Run** ->\ **Run Module** dans la fen√™tre, et les r√©sultats suivants appara√Ætront.

Pour arr√™ter l'ex√©cution, cliquez simplement sur le bouton X en haut √† droite pour 
le fermer, et vous reviendrez au code. Si vous modifiez le code, avant de cliquer 
sur **Run Module (F5)**, vous devez d'abord l'enregistrer. Ensuite, vous verrez le 
r√©sultat de vos modifications.

2. Si vous vous connectez √† distance au Raspberry Pi, tapez la commande suivante :

.. raw:: html

   <run></run>

.. code-block::

   cd ~/davinci-kit-for-raspberry-pi/python-pi5

.. note::
    Changez de r√©pertoire pour acc√©der au chemin du code de cet exercice via ``cd``.

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 1.1.1_BlinkingLed.py

.. note::
    Ici, sudo signifie "superuser do" (super utilisateur), et python indique d'ex√©cuter le fichier avec Python.

Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.

**√âtape 4 :** Si vous souhaitez modifier le fichier de code `1.1.1_BlinkingLed.py`, 
appuyez sur ``Ctrl + C`` pour arr√™ter l'ex√©cution du code. Puis tapez la commande suivante 
pour ouvrir `1.1.1_BlinkingLed.py` :

.. raw:: html

   <run></run>

.. code-block::

   nano 1.1.1_BlinkingLed.py

.. note::
    nano est un √©diteur de texte. La commande est utilis√©e pour ouvrir le fichier 
    de code `1.1.1_BlinkingLed.py` avec cet outil.

Appuyez sur ``Ctrl+X`` pour quitter. Si vous avez modifi√© le code, une invite vous 
demandera si vous souhaitez enregistrer les modifications. Tapez ``Y`` (enregistrer) 
ou ``N`` (ne pas enregistrer).

Ensuite, appuyez sur ``Entr√©e`` pour quitter. Tapez de nouveau 
`nano 1.1.1_BlinkingLed.py` pour voir l'effet apr√®s les modifications.

.. warning::

    Si vous recevez une erreur du type ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`.

**Code**

Voici le code du programme :

.. note::

   Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin source du code comme ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification du code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   from time import sleep

   # Initialisation d'une LED connect√©e √† la broche GPIO 17 en utilisant la biblioth√®que GPIO Zero.
   led = LED(17)

   try:
      # D√©marrage d'une boucle infinie pour alterner l'√©tat de la LED.
      while True:
         # Allume la LED et affiche un message dans la console.
         led.on()
         print('...LED ON')

         # Attends 0,5 seconde avec la LED allum√©e.
         sleep(0.5)

         # √âteint la LED et affiche un message dans la console.
         led.off()
         print('LED OFF...')

         # Attends 0,5 seconde avec la LED √©teinte.
         sleep(0.5)

   except KeyboardInterrupt:
      # G√®re proprement une interruption du clavier (Ctrl+C) en sortant de la boucle.
      # GPIO Zero g√®re automatiquement le nettoyage des param√®tres GPIO √† la sortie.
      pass


**Explication du code**

#. Quand le syst√®me d√©tecte cela, il recherche le chemin d'installation de python dans 
la variable env, puis appelle l'interpr√©teur correspondant pour effectuer l'op√©ration. 
Cela permet d'√©viter que l'utilisateur n'installe pas Python dans le chemin par d√©faut ``/usr/bin``.

   .. code-block:: python

       #!/usr/bin/env python3

#. Ces lignes importent les classes et fonctions n√©cessaires : ``LED`` de ``gpiozero`` pour 
le contr√¥le de la LED, et ``sleep`` de ``time`` pour les pauses.

   .. code-block:: python

       from gpiozero import LED
       from time import sleep

#. Cette ligne cr√©e un objet LED connect√© √† la broche GPIO 17.

   .. code-block:: python

       # Initialisation d'une LED connect√©e √† la broche GPIO 17.
       led = LED(17)

#. Une boucle infinie est d√©marr√©e avec ``while True:``. √Ä l'int√©rieur de la boucle, 
la LED s'allume (``led.on()``) et un message est affich√©. Le programme attend alors 0,5 
seconde (``sleep(0.5)``). Ensuite, la LED s'√©teint (``led.off()``), un autre message est 
affich√© et le programme attend encore 0,5 seconde.

   .. code-block:: python

       try:
           # D√©marrage d'une boucle infinie pour alterner l'√©tat de la LED.
           while True:
               # Allume la LED et affiche un message dans la console.
               led.on()
               print('...LED ON')

               # Attends 0,5 seconde avec la LED allum√©e.
               sleep(0.5)

               # √âteint la LED et affiche un message dans la console.
               led.off()
               print('LED OFF...')

               # Attends 0,5 seconde avec la LED √©teinte.
               sleep(0.5)

#. Le bloc ``except`` intercepte une ``KeyboardInterrupt`` (par exemple en appuyant sur Ctrl+C) et quitte proprement la boucle. L'instruction ``pass`` est utilis√©e ici comme un espace r√©serv√© indiquant qu'aucune action sp√©cifique n'est effectu√©e en cas d'interruption.

   .. code-block:: python

       except KeyboardInterrupt:
           # G√®re proprement une interruption du clavier (Ctrl+C) en sortant de la boucle.
           # GPIO Zero g√®re automatiquement le nettoyage des param√®tres GPIO √† la sortie.
           pass

