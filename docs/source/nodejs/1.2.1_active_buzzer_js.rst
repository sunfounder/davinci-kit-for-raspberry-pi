.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l‚Äôunivers du Raspberry Pi, d‚ÄôArduino et de l‚ÄôESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d‚Äôexperts** : R√©solvez vos probl√®mes apr√®s-vente et surmontez vos d√©fis techniques gr√¢ce √† l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre et Partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Obtenez un acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

1.2.1 Buzzer Actif
=====================

Introduction
-------------

Dans ce projet, nous allons apprendre √† piloter un buzzer actif pour qu'il √©mette un 
son √† l'aide d'un transistor PNP.

Composants
-----------

.. image:: ../img/list_1.2.1.png


Sch√©ma de c√¢blage
--------------------

Dans cet exercice, un buzzer actif, un transistor PNP et une r√©sistance de 1k sont 
utilis√©s entre la base du transistor et le GPIO pour prot√©ger le transistor. Lorsque 
la sortie GPIO17 du Raspberry Pi est programm√©e pour fournir un niveau bas (0V), le 
transistor se mettra en conduction √† cause de la saturation du courant, et le buzzer 
√©mettra un son. En revanche, lorsque le GPIO fournit un niveau haut, le transistor 
sera coup√©, et le buzzer ne produira aucun son.

.. image:: ../img/image332.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit (le buzzer actif poss√®de un autocollant blanc sur la surface et un dos noir).

.. image:: ../img/image104.png

**√âtape 2 :** Acc√©der au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 3 :** Ex√©cuter le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node active_buzzer.js

Une fois le code ex√©cut√©, le buzzer se met √† √©mettre un bip sonore.

**Code**

.. code-block:: js

  const Gpio = require('pigpio').Gpio;
  const active = new Gpio(17,{mode: Gpio.OUTPUT});

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

  process.on('SIGINT',function(){
    active.digitalWrite(1);
    process.exit();
  });

**Explication du code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const active = new Gpio(17,{mode: Gpio.OUTPUT});

Importer le module ``pigpio`` et cr√©er une instance d‚Äôobjet ``active`` pour contr√¥ler le port GPIO17. Le mode est d√©fini sur la sortie.

.. code-block:: js

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

Le buzzer actif est similaire √† la LED dans son utilisation et peut √™tre contr√¥l√© avec ``digitalWrite()``, tandis que ``digitalRead()`` est utilis√© pour lire le niveau actuel de la broche. Ici, nous faisons changer l‚Äô√©tat du buzzer actif toutes les 500 ms.

.. code-block:: js

  process.on('SIGINT', function() {
      /* DO SOME STUFF HERE */

      process.exit()
  })

G√©rer l'√©v√©nement Ctrl+C, utilis√© ici pour arr√™ter le son du buzzer lors de la fermeture du programme.

`Process - NodeJS <https://nodejs.org/api/process.html>`_

Image du r√©sultat
--------------------

.. image:: ../img/image105.jpeg