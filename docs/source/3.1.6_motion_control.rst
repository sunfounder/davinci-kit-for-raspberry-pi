.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **ExpertenunterstÃ¼tzung**: LÃ¶sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre FÃ¤higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie frÃ¼hzeitigen Zugang zu neuen ProduktankÃ¼ndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: GenieÃŸen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    ðŸ‘‰ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!


3.1.6 Bewegungssteuerung
==========================

EinfÃ¼hrung
-----------------

In dieser Lektion werden wir ein einfaches Bewegungserfassungs- und SteuergerÃ¤t herstellen. Die MPU6050 wird als Sensor und der Schrittmotor als gesteuertes GerÃ¤t verwendet. Mit der am Handschuh montierten MPU6050 kÃ¶nnen Sie den Schrittmotor durch Drehen Ihres Handgelenks steuern.

Komponenten
---------------

.. image:: media/list_Motion_Control.png
    :align: center

Schematische Darstellung
--------------------------

============ ======== ======== ===
T-Karte Name physisch wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: media/Schematic_three_one6.png
   :align: center

Experimentelle Verfahren
------------------------------

Schritt 1: Bauen Sie die Schaltung auf.

.. image:: media/image251.png
   :alt: 3.1.6 Motion Control_bb
   :width: 800
   :align: center

FÃ¼r Benutzer in C-Sprache
^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: Gehen Sie zum Ordner der Kode.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/c/3.1.6/

Schritt 3: Kompilieren Sie die Kode.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.6_MotionControl.c -lwiringPi -lm

Schritt 4: FÃ¼hren Sie die ausfÃ¼hrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Wenn der Neigungswinkel von mpu6050 auf der Y-Achse grÃ¶ÃŸer als 45 â„ƒ, ist, 
dreht sich der Schrittmotor wÃ¤hrend der Kode gegen den Uhrzeigersinn. 
Bei weniger als -45 â„ƒ, dreht sich der Schrittmotor im Uhrzeigersinn.

**Code ErklÃ¤rung**

.. code-block:: c

    doubleÂ mpu6050(){
    Â Â Â Â acclXÂ =Â read_word_2c(0x3B);
    Â Â Â Â acclYÂ =Â read_word_2c(0x3D);
    Â Â Â Â acclZÂ =Â read_word_2c(0x3F);
    Â Â Â Â acclX_scaledÂ =Â acclXÂ /Â 16384.0;
    Â Â Â Â acclY_scaledÂ =Â acclYÂ /Â 16384.0;
    Â Â Â Â acclZ_scaledÂ =Â acclZÂ /Â 16384.0;
    Â Â Â Â doubleÂ angle=get_y_rotation(acclX_scaled,Â acclY_scaled,Â acclZ_scaled);
    Â Â Â Â returnÂ angle;
    }

mpu6050 erhÃ¤lt den Neigungswinkel in Richtung der Y-Achse.

.. code-block:: c

    voidÂ rotary(charÂ direction){
    Â Â Â Â if(directionÂ ==Â 'c'){
    Â Â Â Â Â Â Â Â for(intÂ j=0;j<4;j++){
    Â Â Â Â Â Â Â Â Â Â Â Â for(intÂ i=0;i<4;i++)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {digitalWrite(motorPin[i],0x99>>jÂ &Â (0x08>>i));}
    Â Â Â Â Â Â Â Â Â Â Â Â delayMicroseconds(stepSpeed);
    Â Â Â Â Â Â Â Â }Â Â Â Â Â Â Â Â 
    Â Â Â Â }
    Â Â Â Â elseÂ if(directionÂ =='a'){
    Â Â Â Â Â Â Â Â for(intÂ j=0;j<4;j++){
    Â Â Â Â Â Â Â Â Â Â Â Â for(intÂ i=0;i<4;i++)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {digitalWrite(motorPin[i],0x99<<jÂ &Â (0x80>>i));}
    Â Â Â Â Â Â Â Â Â Â Â Â delayMicroseconds(stepSpeed);
    Â Â Â Â Â Â Â Â }Â Â Â 
    Â Â Â Â }
    }


Wenn die empfangene Richtung Taste â€šcâ€˜ ist, dreht sich der Schrittmotor im Uhrzeigersinn; wenn die Taste â€šaâ€˜ ist, 
dreht der Motor gegen den Uhrzeigersinn. 
Siehe :ref:`py_step_motor`  fÃ¼r weitere Details zur Berechnung der Drehrichtung des Schrittmotors.

.. code-block:: c

    intÂ main()
    {
    Â Â Â Â setup();
    Â Â Â Â doubleÂ angle;
    Â Â Â Â while(1)Â {
    Â Â Â Â Â Â Â Â angleÂ =Â mpu6050();
    Â Â Â Â Â Â Â Â ifÂ (angleÂ >=45){rotary('a');}
    Â Â Â Â Â Â Â Â elseÂ ifÂ (angle<=-45){rotary('c');}
    Â Â Â Â }
    Â Â Â Â returnÂ 0;
    }

Der Neigungswinkel in Richtung der Y-Achse wird von mpu6050 abgelesen. 
Wenn er grÃ¶ÃŸer als 45 â„ƒ, ist, dreht sich der Schrittmotor gegen den Uhrzeigersinn. 
Bei weniger als -45 â„ƒ, dreht sich der Schrittmotor im Uhrzeigersinn.

FÃ¼r Python-Sprachbenutzer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: Gehen Sie zum Ordner der Kode.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

Schritt 3: FÃ¼hren Sie die ausfÃ¼hrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 3.1.6_MotionControl.py

Wenn der Neigungswinkel von mpu6050 auf der Y-Achse grÃ¶ÃŸer als 45 â„ƒ, ist, 
dreht sich der Schrittmotor wÃ¤hrend der Kode gegen den Uhrzeigersinn. 
Bei weniger als -45 â„ƒ, dreht sich der Schrittmotor im Uhrzeigersinn.

**Code**

.. note::

    Sie kÃ¶nnen den folgenden Code **Ã„ndern/ZurÃ¼cksetzen/Kopieren/AusfÃ¼hren/Stoppen** . Zuvor mÃ¼ssen Sie jedoch zu einem Quellcodepfad wie ``davinci-kit-for-raspberry-pi/python`` gehen.
    

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import smbus
    import math
    import time



    # Power management registers
    power_mgmt_1 = 0x6b
    power_mgmt_2 = 0x6c

    bus = smbus.SMBus(1) 
    address = 0x68     
    bus.write_byte_data(address, power_mgmt_1, 0)

    #Stepper motor pins
    motorPin = (18,23,24,25) 
    rolePerMinute =15
    stepsPerRevolution = 2048
    stepSpeed = (60/rolePerMinute)/stepsPerRevolution

    #mpu6050
    def read_byte(adr):
        return bus.read_byte_data(address, adr)

    def read_word(adr):
        high = bus.read_byte_data(address, adr)
        low = bus.read_byte_data(address, adr+1)
        val = (high << 8) + low
        return val

    def read_word_2c(adr):
        val = read_word(adr)
        if (val >= 0x8000):
            return -((65535 - val) + 1)
        else:
            return val

    def dist(a,b):
        return math.sqrt((a*a)+(b*b))

    def get_y_rotation(x,y,z):
        radians = math.atan2(x, dist(y,z))
        return -math.degrees(radians)

    def get_x_rotation(x,y,z):
        radians = math.atan2(y, dist(x,z))
        return math.degrees(radians)

    def mpu6050():
        accel_xout = read_word_2c(0x3b)
        accel_yout = read_word_2c(0x3d)
        accel_zout = read_word_2c(0x3f)
        accel_xout_scaled = accel_xout / 16384.0
        accel_yout_scaled = accel_yout / 16384.0
        accel_zout_scaled = accel_zout / 16384.0
        angle=get_y_rotation(accel_xout_scaled, accel_yout_scaled, accel_zout_scaled)
        return angle

    #Stepper Motor
    def rotary(direction):
        if(direction == 'c'):   
            for j in range(4):
                for i in range(4):
                    GPIO.output(motorPin[i],0x99>>j & (0x08>>i))
                time.sleep(stepSpeed)

        elif(direction == 'a'):
            for j in range(4):
                for i in range(4):
                    GPIO.output(motorPin[i],0x99<<j & (0x80>>i))
                time.sleep(stepSpeed)


    def setup():
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        for i in motorPin:
            GPIO.setup(i, GPIO.OUT)


    def loop():
        while True:
            angle=mpu6050()
            if angle >=45 :
                rotary('a')
            elif angle <=-45:
                rotary('c')

    def destroy():
        GPIO.cleanup()   

    if __name__ == '__main__':    
        setup()
        try:
            loop()        
        except KeyboardInterrupt:
            destroy()

**Code ErklÃ¤rung**

.. code-block:: python

    defÂ mpu6050():
    Â Â Â Â accel_xoutÂ =Â read_word_2c(0x3b)
    Â Â Â Â accel_youtÂ =Â read_word_2c(0x3d)
    Â Â Â Â accel_zoutÂ =Â read_word_2c(0x3f)
    Â Â Â Â accel_xout_scaledÂ =Â accel_xoutÂ /Â 16384.0
    Â Â Â Â accel_yout_scaledÂ =Â accel_youtÂ /Â 16384.0
    Â Â Â Â accel_zout_scaledÂ =Â accel_zoutÂ /Â 16384.0
    Â Â Â Â angle=get_y_rotation(accel_xout_scaled,Â accel_yout_scaled,Â accel_zout_scaled)
    Â Â Â Â returnÂ angle

mpu6050 erhÃ¤lt den Neigungswinkel in Richtung der Y-Achse.

.. code-block:: python

    defÂ rotary(direction):
    Â Â Â Â if(directionÂ ==Â 'c'):Â Â Â 
    Â Â Â Â Â Â Â Â forÂ jÂ inÂ range(4):
    Â Â Â Â Â Â Â Â Â Â Â Â forÂ iÂ inÂ range(4):
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â GPIO.output(motorPin[i],0x99>>jÂ &Â (0x08>>i))
    Â Â Â Â Â Â Â Â Â Â Â Â time.sleep(stepSpeed)

    Â Â Â Â elif(directionÂ ==Â 'a'):
    Â Â Â Â Â Â Â Â forÂ jÂ inÂ range(4):
    Â Â Â Â Â Â Â Â Â Â Â Â forÂ iÂ inÂ range(4):
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â GPIO.output(motorPin[i],0x99<<jÂ &Â (0x80>>i))
    Â Â Â Â Â Â Â Â Â Â Â Â time.sleep(stepSpeed)

Wenn die empfangene Richtung Taste â€šcâ€˜ ist, dreht sich der Schrittmotor im Uhrzeigersinn; wenn die Taste â€šaâ€˜ ist, dreht der Motor gegen den Uhrzeigersinn. 
Siehe :ref:`py_step_motor`  fÃ¼r weitere Details zur Berechnung der Drehrichtung des Schrittmotors.

.. code-block:: python

    defÂ loop():
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â angle=mpu6050()
    Â Â Â Â Â Â Â Â ifÂ angleÂ >=45Â :
    Â Â Â Â Â Â Â Â Â Â Â Â rotary('a')
    Â Â Â Â Â Â Â Â elifÂ angleÂ <=-45:
    Â Â Â Â Â Â Â Â Â Â Â Â rotary('c')


Der Neigungswinkel in Richtung der Y-Achse wird aus mpu6050 abgelesen. 
Wenn er grÃ¶ÃŸer als 45 â„ƒ, ist, wird ``rotary()`` aufgerufen, damit sich der Schrittmotor gegen den Uhrzeigersinn dreht. Bei weniger als -45 â„ƒ, dreht sich der Schrittmotor im Uhrzeigersinn.

PhÃ¤nomen Bild
-----------------------

.. image:: media/image252.jpeg
   :align: center