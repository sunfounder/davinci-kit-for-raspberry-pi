.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez en profondeur les possibilit√©s offertes par ces technologies avec d'autres amateurs √©clair√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux nouvelles annonces de produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions sp√©ciales √† l'occasion des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] pour nous rejoindre d√®s aujourd'hui !

.. _py_pi5_keypad:

2.1.5 Pav√© num√©rique
========================

Introduction
-----------------

Un pav√© num√©rique est un tableau rectangulaire de boutons. Dans ce projet, 
nous allons l'utiliser pour saisir des caract√®res.

Composants n√©cessaires
-------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../python_pi5/img/2.1.5_keypad_list.png

.. raw:: html

   <br/>

Sch√©ma de circuit
---------------------

.. image:: ../python_pi5/img/2.1.5_keypad_chematic_1.png

.. image:: ../python_pi5/img/2.1.5_keypad_chematic_2.png


Proc√©dure exp√©rimentale
--------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.1.5_keypad_circuit.png

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/davinci-kit-for-raspberry-pi/python-pi5

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.1.5_Keypad_zero.py

Une fois le code lanc√©, les valeurs des boutons press√©s sur le pav√© 
num√©rique (valeur des boutons) s'afficheront √† l'√©cran.

.. warning::

    En cas d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`. 

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, assurez-vous de vous rendre dans le r√©pertoire source, tel que ``davinci-kit-for-raspberry-pi/python-pi5``. Apr√®s modification, vous pouvez ex√©cuter le code pour observer le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import DigitalOutputDevice, Button
   from time import sleep

   class Keypad:
       def __init__(self, rows_pins, cols_pins, keys):
           """
           Initialize the Keypad with specified row and column pins and keypad layout.
           :param rows_pins: List of GPIO pins for the rows.
           :param cols_pins: List of GPIO pins for the columns.
           :param keys: List of keys in the keypad layout.
           """
           # Initialisation des broches de lignes comme DigitalOutputDevice
           self.rows = [DigitalOutputDevice(pin) for pin in rows_pins]
           # Initialisation des broches de colonnes comme Boutons
           self.cols = [Button(pin, pull_up=False) for pin in cols_pins]
           self.keys = keys  # D√©finir la disposition des touches du pav√©

       def read(self):
           """
           Read the currently pressed keys on the keypad.
           :return: A list of pressed keys.
           """
           pressed_keys = []
           # Parcourt chaque ligne et colonne pour identifier les touches press√©es
           for i, row in enumerate(self.rows):
               row.on()  # Activer la ligne actuelle
               for j, col in enumerate(self.cols):
                   if col.is_pressed:  # V√©rifier si le bouton de la colonne est press√©
                       # Calculer l'index de la touche en fonction de la ligne et de la colonne
                       index = i * len(self.cols) + j
                       pressed_keys.append(self.keys[index])
               row.off()  # D√©sactiver la ligne actuelle
           return pressed_keys

   try:
       # Configuration des broches de lignes, colonnes et disposition des touches
       rows_pins = [18, 23, 24, 25]
       cols_pins = [10, 22, 27, 17]
       keys = ["1", "2", "3", "A",
               "4", "5", "6", "B",
               "7", "8", "9", "C",
               "*", "0", "#", "D"]

       # Cr√©e une instance de la classe Keypad
       keypad = Keypad(rows_pins, cols_pins, keys)
       last_key_pressed = []

       # Lecture continue du pav√© et affichage des touches nouvellement press√©es
       while True:
           pressed_keys = keypad.read()
           if pressed_keys and pressed_keys != last_key_pressed:
               print(pressed_keys)  # Afficher la liste des touches press√©es
               last_key_pressed = pressed_keys
           sleep(0.1)  # Petite pause pour r√©duire la charge du CPU

   except KeyboardInterrupt:
       # G√©rer une interruption clavier (Ctrl+C) pour une sortie propre
       pass


**Explication du code**

#. Importation des classes ``DigitalOutputDevice`` et ``Button`` de la biblioth√®que ``gpiozero`` et de la fonction ``sleep`` pour les temporisations.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import DigitalOutputDevice, Button
       from time import sleep

#. D√©finition de la classe ``Keypad``. La m√©thode ``__init__`` initialise le pav√© avec les broches de lignes, de colonnes et les touches sp√©cifi√©es. La m√©thode ``read`` parcourt le pav√© et retourne la liste des touches press√©es.

   .. code-block:: python

       class Keypad:
           def __init__(self, rows_pins, cols_pins, keys):
               """
               Initialize the Keypad with specified row and column pins and keypad layout.
               :param rows_pins: List of GPIO pins for the rows.
               :param cols_pins: List of GPIO pins for the columns.
               :param keys: List of keys in the keypad layout.
               """
               self.rows = [DigitalOutputDevice(pin) for pin in rows_pins]
               self.cols = [Button(pin, pull_up=False) for pin in cols_pins]
               self.keys = keys

           def read(self):
               """
               Read the currently pressed keys on the keypad.
               :return: A list of pressed keys.
               """
               pressed_keys = []
               # Scan each row and column to identify pressed keys
               for i, row in enumerate(self.rows):
                   row.on()  # Enable the current row
                   for j, col in enumerate(self.cols):
                       if col.is_pressed:  # Check if the column button is pressed
                           # Calculate the key index based on row and column
                           index = i * len(self.cols) + j
                           pressed_keys.append(self.keys[index])
                   row.off()  # Disable the current row
               return pressed_keys

#. Configure les broches GPIO pour les lignes et les colonnes, et d√©finit la disposition du pav√©.

   .. code-block:: python

       try:
           # Configure rows, columns, and keypad layout
           rows_pins = [18, 23, 24, 25]
           cols_pins = [10, 22, 27, 17]
           keys = ["1", "2", "3", "A",
                   "4", "5", "6", "B",
                   "7", "8", "9", "C",
                   "*", "0", "#", "D"]

#. Cr√©e une instance de la classe ``Keypad`` avec la configuration sp√©cifi√©e.

   .. code-block:: python

       try:
           ...

           # Create an instance of the Keypad class
           keypad = Keypad(rows_pins, cols_pins, keys)
           last_key_pressed = []

#. Lecture continue du pav√© pour d√©tecter les nouvelles touches press√©es et affichage des changements d'√©tat des touches. Le script s'arr√™te proprement lors d'une interruption clavier (Ctrl+C).

   .. code-block:: python

       try:
           ...

           # Continuously read the keypad and print newly pressed keys
           while True:
               pressed_keys = keypad.read()
               if pressed_keys and pressed_keys != last_key_pressed:
                   print(pressed_keys)  # Print the list of pressed keys
                   last_key_pressed = pressed_keys
               sleep(0.1)  # Short delay to reduce CPU load

       except KeyboardInterrupt:
           # Handle a keyboard interrupt (Ctrl+C) for a clean exit
           pass

