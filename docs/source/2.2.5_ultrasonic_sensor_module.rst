.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support expert** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2.2.5 Module de Capteur Ultrasonique
=======================================

Introduction
---------------

Le capteur ultrasonique utilise les ultrasons pour d√©tecter pr√©cis√©ment les 
objets et mesurer les distances. Il √©met des ondes ultrasoniques et les 
convertit en signaux √©lectroniques.

Composants
-------------

.. image:: img/list_2.2.5.png


Principe
------------

**Ultrason**

Le module de t√©l√©m√©trie par ultrasons fournit une mesure sans contact de 2 cm √† 400 cm, 
avec une pr√©cision pouvant atteindre 3 mm. Il assure un signal stable dans un rayon de 
5 m, puis s'affaiblit progressivement apr√®s cette distance, jusqu'√† dispara√Ætre vers 7 m.

Le module comprend des √©metteurs ultrasoniques, un r√©cepteur et un circuit de commande. 
Les principes de base sont les suivants :

1. Utilisez un basculement d'IO pour traiter un signal de niveau haut d'au moins 10 ¬µs.
2. Le module envoie automatiquement huit cycles de 40 kHz et d√©tecte si un signal de 
retour est re√ßu sous forme d'impulsion.
3. Si un signal est renvoy√©, le temps de niveau haut de la sortie IO correspond √† la 
dur√©e entre l'√©mission de l'onde ultrasonique et sa r√©ception. Ici, la distance de test = 
(temps haut x vitesse du son (340 m/s)) / 2.

.. image:: img/image217.png
    :width: 200

.. image:: img/image328.png
    :width: 500

Le diagramme de synchronisation est illustr√© ci-dessous. Il suffit de fournir une 
impulsion courte de 10 ¬µs pour d√©clencher l'entr√©e de la mesure, et le module enverra 
alors une rafale de 8 cycles d'ultrasons √† 40 kHz et attendra l'√©cho. Vous pouvez calculer 
la distance en mesurant le temps √©coul√© entre l'envoi du signal de d√©clenchement et la 
r√©ception du signal d'√©cho.

Formule : ¬µs / 58 = centim√®tres ou ¬µs / 148 = pouces ; ou : la distance = temps de niveau 
haut * vitesse (340 M/S) / 2. Il est recommand√© d'utiliser un cycle de mesure sup√©rieur √† 
60 ms pour √©viter les collisions entre le signal de d√©clenchement et le signal d'√©cho.

.. image:: img/image218.png
    :width: 800


Sch√©ma
---------

.. image:: img/image329.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image220.png
    :width: 800



Pour les utilisateurs de C
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/2.2.5/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.5_Ultrasonic.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Une fois le code ex√©cut√©, le module de capteur ultrasonique d√©tectera la 
distance entre l'obstacle devant lui et le module, puis affichera la distance sur l'√©cran.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution ou si un message d'erreur appara√Æt : \"wiringPi.h:  Fichier ou r√©pertoire introuvable", veuillez vous r√©f√©rer √† :ref:`C code is not working?`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <sys/time.h>

    #define Trig    4
    #define Echo    5

    void ultraInit(void)
    {
        pinMode(Echo, INPUT);
        pinMode(Trig, OUTPUT);
    }

    float disMeasure(void)
    {
        struct timeval tv1;
        struct timeval tv2;
        long time1, time2;
        float dis;

        digitalWrite(Trig, LOW);
        delayMicroseconds(2);

        digitalWrite(Trig, HIGH);
        delayMicroseconds(10);      
        digitalWrite(Trig, LOW);
                                  
        while(!(digitalRead(Echo) == 1));   
        gettimeofday(&tv1, NULL);           

        while(!(digitalRead(Echo) == 0));   
        gettimeofday(&tv2, NULL);           

        time1 = tv1.tv_sec * 1000000 + tv1.tv_usec;   
        time2  = tv2.tv_sec * 1000000 + tv2.tv_usec;

        dis = (float)(time2 - time1) / 1000000 * 34000 / 2;  

        return dis;
    }

    int main(void)
    {
        float dis;
        if(wiringPiSetup() == -1){ // Si l'initialisation de wiringPi √©choue, afficher un message √† l'√©cran
            printf("setup wiringPi failed !");
            return 1;
        }

        ultraInit();
        
        while(1){
            dis = disMeasure();
            printf("%0.2f cm\n\n",dis);
            delay(300);
        }

        return 0;
    }

**Explication du Code**

.. code-block:: c

    void ultraInit(void)
    {
        pinMode(Echo, INPUT);
        pinMode(Trig, OUTPUT);
    }

Initialise les broches du capteur ultrasonique ; Echo est configur√© en entr√©e, Trig en sortie.

.. code-block:: c

    float disMeasure(void){};

Cette fonction permet de r√©aliser la mesure de distance √† l'aide du capteur 
ultrasonique en calculant la distance de d√©tection retourn√©e.

.. code-block:: c

    struct timeval tv1;
    struct timeval tv2;

La structure timeval est utilis√©e pour stocker l'heure actuelle. La structure 
compl√®te est la suivante :

.. code-block:: c

    struct timeval
    {
    __time_t tv_sec;        /* Secondes. */
    __suseconds_t tv_usec;  /* Microsecondes. */
    };

Ici, tv_sec repr√©sente les secondes √©coul√©es depuis Epoch lors de la cr√©ation de 
struct timeval. Tv_usec repr√©sente les microsecondes ou une fraction de secondes.

.. code-block:: c

    digitalWrite(Trig, HIGH);
    delayMicroseconds(10);     
    digitalWrite(Trig, LOW);

Un pulse ultrasonique de 10 microsecondes est envoy√©.

.. code-block:: c

    while(!(digitalRead(Echo) == 1));
    gettimeofday(&tv1, NULL);

Cette boucle vide garantit qu'aucun signal d'√©cho parasite n'est pr√©sent avant 
l'envoi du signal de d√©clenchement et permet ensuite de r√©cup√©rer l'heure actuelle.

.. code-block:: c

    while(!(digitalRead(Echo) == 0)); 
    gettimeofday(&tv2, NULL);

Cette boucle vide garantit que la prochaine √©tape ne sera effectu√©e qu'apr√®s la 
r√©ception du signal d'√©cho, puis l'heure actuelle est √† nouveau r√©cup√©r√©e.

.. code-block:: c

    time1 = tv1.tv_sec * 1000000 + tv1.tv_usec;
    time2  = tv2.tv_sec * 1000000 + tv2.tv_usec;

Convertit le temps stock√© par la structure timeval en microsecondes compl√®tes.

.. code-block:: c

    dis = (float)(time2 - time1) / 1000000 * 34000 / 2;  

La distance est calcul√©e √† partir de l'intervalle de temps et de la vitesse de propagation 
du son. La vitesse du son dans l'air est de 34000 cm/s.

Pour les utilisateurs Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**√âtape 2 :** Acc√©dez au dossier contenant le code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python/

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.5_Ultrasonic.py

Une fois le code ex√©cut√©, le module de capteur ultrasonique d√©tecte la distance 
entre l'obstacle devant lui et le module, puis la valeur de la distance sera 
affich√©e √† l'√©cran.
**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. 
    Mais avant cela, vous devez vous rendre dans le chemin source du code tel que ``davinci-kit-for-raspberry-pi/python``.
    
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    TRIG = 16
    ECHO = 18

    def setup():
        GPIO.setmode(GPIO.BOARD)
        GPIO.setup(TRIG, GPIO.OUT)
        GPIO.setup(ECHO, GPIO.IN)

    def distance():
        GPIO.output(TRIG, 0)
        time.sleep(0.000002)

        GPIO.output(TRIG, 1)
        time.sleep(0.00001)
        GPIO.output(TRIG, 0)

        
        while GPIO.input(ECHO) == 0:
            a = 0
        time1 = time.time()
        while GPIO.input(ECHO) == 1:
            a = 1
        time2 = time.time()

        during = time2 - time1
        return during * 340 / 2 * 100

    def loop():
        while True:
            dis = distance()
            print ('Distance: %.2f' % dis)
            time.sleep(0.3)

    def destroy():
        GPIO.cleanup()

    if __name__ == "__main__":
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()

**Explication du Code**

.. code-block:: python

    def distance():

Cette fonction est utilis√©e pour r√©aliser la fonction du capteur ultrasonique en calculant la distance de d√©tection retourn√©e.

.. code-block:: python

    GPIO.output(TRIG, 1)
    time.sleep(0.00001)
    GPIO.output(TRIG, 0)

Ceci envoie une impulsion ultrasonique de 10 ¬µs.

.. code-block:: python

    while GPIO.input(ECHO) == 0:
        a = 0
    time1 = time.time()

Cette boucle vide garantit qu'aucun signal d'√©cho parasite n'est pr√©sent avant 
l'envoi du signal de d√©clenchement, puis permet d'obtenir l'heure actuelle.

.. code-block:: python

    while GPIO.input(ECHO) == 1:
        a = 1
    time2 = time.time()

Cette boucle vide garantit que la prochaine √©tape ne sera effectu√©e qu'apr√®s la 
r√©ception du signal d'√©cho, puis l'heure actuelle est √† nouveau r√©cup√©r√©e.

.. code-block:: python

    during = time2 - time1

Effectuer le calcul de l'intervalle.

.. code-block:: python

    return during * 340 / 2 * 100

La distance est calcul√©e en fonction de l'intervalle de temps et de la vitesse de 
propagation du son. La vitesse du son dans l'air : 340 m/s.

Photo du Ph√©nom√®ne
----------------------

.. image:: img/image221.jpeg
