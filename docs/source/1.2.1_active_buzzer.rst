.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

1.2.1 Aktiver Summer
========================

Einf√ºhrung
------------

In dieser Lektion lernen wir, wie man einen aktiven Summer ansteuert, um mit einem PNP-Transistor zu piepen.

Komponenten
--------------------

.. image:: media/list_1.2.1.png


Prinzip
---------

**Summer**

Als eine Art elektronischer Summer mit integrierter Struktur werden Summer, 
die mit Gleichstrom versorgt werden, h√§ufig in Computern, Druckern, Fotokopierern, 
Alarmen, elektronischem Spielzeug, elektronischen Kraftfahrzeugen, Telefonen, 
Zeitschaltuhren und anderen elektronischen Produkten oder Sprachger√§ten verwendet. 
Summer k√∂nnen in aktive und passive unterteilt werden (siehe folgendes Bild). 
Drehen Sie den Summer so, dass seine Stifte nach oben zeigen, 
und der Summer mit einer gr√ºnen Leiterplatte ist ein passiver Summer, 
w√§hrend der mit einem schwarzen Band umschlossene ein aktiver ist.

Der Unterschied zwischen einem aktiven und einem passiven Summer:

.. image:: media/image101.png
    :width: 400
    :align: center


Der Unterschied zwischen einem aktiven und einem passiven Summer besteht darin, 
dass ein aktiver Summer √ºber eine integrierte Oszillationsquelle verf√ºgt, 
sodass er bei Elektrifizierung Ger√§usche erzeugt. 
Ein passiver Summer verf√ºgt jedoch nicht √ºber eine solche Quelle, sodass bei Verwendung von Gleichstromsignalen kein Piepton ert√∂nt. Stattdessen m√ºssen Sie Rechteckwellen verwenden, deren Frequenz zwischen 2K und 5K liegt, um sie anzutreiben. Der aktive Summer ist aufgrund mehrerer eingebauter Schwingkreise oft teurer als der passive.

Das Folgende ist das elektrische Symbol eines Summers. 
Es hat zwei Stifte mit positiven und negativen Polen. 
Mit einem + in der Oberfl√§che steht die Anode und das andere ist die Kathode.

.. image:: media/image102.png
    :width: 150
    :align: center


Sie k√∂nnen die Pins des Summers √ºberpr√ºfen, je l√§nger die Anode und je k√ºrzer die Kathode ist. 
Bitte verwechseln Sie sie beim Anschlie√üen nicht, da sonst kein Summer ert√∂nt.

Schematische Darstellung
-----------------------------------

In diesem Experiment werden ein aktiver Summer, 
ein PNP-Transistor und ein 1k-Widerstand zwischen der Basis des Transistors und GPIO verwendet, um den Transistor zu sch√ºtzen. Wenn der GPIO17 des Raspberry Pi-Ausgangs durch Programmierung mit einem niedrigen Niveau (0V) versorgt wird, leitet der Transistor aufgrund der Stroms√§ttigung und der Summer gibt Ger√§usche aus. Wenn jedoch die IO des Raspberry Pi mit einem hohen Niveau versorgt wird, 
wird der Transistor abgeschaltet und der Summer gibt keine Ger√§usche von sich.

.. image:: media/image332.png


Experimentelle Verfahren
----------------------------------------

Schritt 1: Bauen Sie die Schaltung auf. (Achten Sie auf die Pole des Summers: Der mit dem + Etikett ist der positive Pol und der andere der negative.)

.. image:: media/image104.png
    :width: 800



F√ºr Benutzer in C-Sprache
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: √ñffnen Sie die Codedatei.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/c/1.2.1/

Schritt 3: Kompilieren Sie den Code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.2.1_ActiveBuzzer.c -lwiringPi

Schritt 4: F√ºhren Sie die obige ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Die Kode l√§uft, der Summer piept.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define BeepPin 0
    int main(void){
        if(wiringPiSetup() == -1){ //when initialize wiring failed, print messageto screen
            printf("setup wiringPi failed !");
            return 1;
        }
        
        pinMode(BeepPin, OUTPUT);   //set GPIO0 output
        while(1){
            //beep on
            printf("Buzzer on\n");
            digitalWrite(BeepPin, LOW);
            delay(100);
            printf("Buzzer off\n");
            //beep off
            digitalWrite(BeepPin, HIGH);
            delay(100);
        }
        return 0;
    }

**Code Erkl√§rung**

.. code-block:: c

    digitalWrite(BeepPin, LOW);

In diesem Experiment verwenden wir einen aktiven Summer, 
der beim Anschlie√üen an den Gleichstrom automatisch einen Ton erzeugt. 
Diese Skizze dient dazu, den I/O -Port auf einen niedrigen Niveau (0V) einzustellen, 
um so den Transistor zu verwalten und den Summer piepen zu lassen.

.. code-block:: c

    digitalWrite(BeepPin, HIGH);

Um den I/O -Anschluss auf einen hohen Niveau (3,3V) einzustellen, 
wird der Transistor nicht erregt und der Summer piept nicht.

F√ºr Python-Sprachbenutzer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Schritt 2: √ñffnen Sie die Codedatei.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/python

Schritt 3: Ausf√ºhren.

.. raw:: html

    <run></run>

.. code-block::

    sudo python3 1.2.1_ActiveBuzzer.py

Die Kode l√§uft, der Summer piept.


**Code**

.. note::

    Sie k√∂nnen den folgenden Code **√Ñndern/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen** . Zuvor m√ºssen Sie jedoch zu einem Quellcodepfad wie ``davinci-kit-for-raspberry-pi/python`` gehen.
 
.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    # Set #17 as buzzer pin
    BeepPin = 17

    def setup():
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set LedPin's mode to output, 
        # and initial level to High(3.3v)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.HIGH)

    def main():
        while True:
            # Buzzer on (Beep)
            print ('Buzzer On')
            GPIO.output(BeepPin, GPIO.LOW)
            time.sleep(0.1)
            # Buzzer off
            print ('Buzzer Off')
            GPIO.output(BeepPin, GPIO.HIGH)
            time.sleep(0.1)

    def destroy():
        # Turn off buzzer
        GPIO.output(BeepPin, GPIO.HIGH)
        # Release resource
        GPIO.cleanup()    

    # If run this script directly, do:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # When 'Ctrl+C' is pressed, the program 
        # destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()

**Code Erkl√§rung**

.. code-block:: python

    GPIO.output(BeepPin, GPIO.LOW)

Stellen Sie den Summer Pin auf einen niedrigen Niveau ein, damit der Summer piept.

.. code-block:: python

    time.sleep(0.1)

Warten Sie 0,1 Sekunden. √Ñndern Sie die Schaltfrequenz, indem Sie diesen Parameter √§ndern.

.. note::
    Nicht die Schallfrequenz. Der aktive Summer kann die Schallfrequenz nicht √§ndern.

.. code-block:: python

    GPIO.output(BeepPin, GPIO.HIGH)

Schlie√üen Sie den Summer.

Ph√§nomen Bild
------------------

.. image:: media/image105.jpeg