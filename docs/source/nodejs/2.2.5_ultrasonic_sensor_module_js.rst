.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l‚Äôunivers du Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d‚Äôexperts** : R√©solvez les probl√®mes post-achat et les d√©fis techniques avec l‚Äôaide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour enrichir vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d‚Äôun acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

2.2.5 Module Capteur √† Ultrasons
==================================

Introduction
--------------

Le capteur ultrasonique utilise des ultrasons pour d√©tecter avec pr√©cision des 
objets et mesurer des distances. Il √©met des ondes ultrasonores et les convertit 
en signaux √©lectroniques.

Composants
-------------

.. image:: ../img/list_2.2.5.png



Sch√©ma de c√¢blage
---------------------

.. image:: ../img/image329.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Montez le circuit.

.. image:: ../img/image220.png

**√âtape 2 :** Acc√©dez au r√©pertoire du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/davinci-kit-for-raspberry-pi/nodejs/

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node ultrasonic_sensor.js

Une fois le code ex√©cut√©, le module capteur ultrasonique d√©tecte la 
distance entre l‚Äôobstacle devant lui et le module lui-m√™me, puis la 
valeur de cette distance est affich√©e sur l‚Äô√©cran.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    // Le nombre de microsecondes n√©cessaires pour que le son parcoure 1 cm √† 20 degr√©s Celsius
    const MICROSECDONDS_PER_CM = 1e6/34321;

    const trigger = new Gpio(23, {mode: Gpio.OUTPUT});
    const echo = new Gpio(24, {mode: Gpio.INPUT, alert: true});

    trigger.digitalWrite(0); // S'assurer que le d√©clencheur est bas

    const watchHCSR04 = () => {
      let startTick;

      echo.on('alert', (level, tick) => {
        if (level === 1) {
          startTick = tick;
        } else {
          const endTick = tick;
          const diff = (endTick >> 0) - (startTick >> 0); // Calcul arithm√©tique non sign√© sur 32 bits
          console.log(diff / 2 / MICROSECDONDS_PER_CM);
        }
      });
    };

    watchHCSR04();

    // D√©clenche une mesure de distance une fois par seconde
    setInterval(() => {
      trigger.trigger(10, 1); // D√©clencher pendant 10 microsecondes
    }, 1000);

**Explication du code**

La fonction ``trigger`` peut √™tre utilis√©e pour g√©n√©rer une impulsion sur un 
GPIO et ``alerts`` peut √™tre employ√© pour d√©terminer le temps d‚Äôun changement 
d‚Äô√©tat du GPIO avec une pr√©cision de quelques microsecondes.

Ces deux caract√©ristiques peuvent √™tre combin√©es pour mesurer la distance avec 
un capteur ultrasonique HC-SR04.

.. code-block:: js

    setInterval(() => {
      trigger.trigger(10, 1); // D√©clencher pendant 10 microsecondes
    }, 1000);

Cette commande permet d‚Äôenvoyer p√©riodiquement une impulsion ultrasonique de 10 
microsecondes.

.. code-block:: js

  const watchHCSR04 = () => {

    echo.on('alert', (level, tick) => {
        if (level === 1) {
          startTick = tick;
        } else {
          const endTick = tick;
          const diff = (endTick >> 0) - (startTick >> 0); // Calcul arithm√©tique non sign√© sur 32 bits
          console.log(diff / 2 / MICROSECDONDS_PER_CM);
        }    
    });
  };

Cette fonction configure une alerte qui enregistre le temps entre l‚Äô√©mission de l‚Äôimpulsion (niveau 1) et la r√©ception de l‚Äô√©cho (niveau 0).
En multipliant la diff√©rence de temps par la vitesse du son (et en divisant par 2), vous pouvez calculer la distance jusqu‚Äô√† l‚Äôobstacle.

.. https://github.com/fivdi/pigpio

Image du ph√©nom√®ne
--------------------

.. image:: ../img/image221.jpeg
